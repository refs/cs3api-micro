// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: cs3/storage/provider/v1beta1/provider_api.proto

package providerv1beta1

import (
	fmt "fmt"
	_ "github.com/cs3org/go-cs3apis/build/go-cs3apis/cs3/rpc/v1beta1"
	_ "github.com/cs3org/go-cs3apis/build/go-cs3apis/cs3/types/v1beta1"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for ProviderAPI service

type ProviderAPIService interface {
	// Adds a new grant for the provided reference.
	// MUST return CODE_NOT_FOUND if the reference does not exist
	AddGrant(ctx context.Context, in *AddGrantRequest, opts ...client.CallOption) (*AddGrantResponse, error)
	// Creates a new resource of type container.
	// MUST return CODE_PRECONDITION_FAILED if the container
	// cannot be created at the specified reference.
	CreateContainer(ctx context.Context, in *CreateContainerRequest, opts ...client.CallOption) (*CreateContainerResponse, error)
	// Deletes a resource.
	// If a resource specifies the non-empty container (directory, ...),
	// then the entire directory is deleted recursively.
	// If a resource specifies a reference or symlink type, only the reference is removed (not the target).
	// MUST return CODE_NOT_FOUND if the reference does not exist.
	Delete(ctx context.Context, in *DeleteRequest, opts ...client.CallOption) (*DeleteResponse, error)
	// Returns the path reference for
	// the provided resource id reference.
	// MUST return CODE_NOT_FOUND if the reference does not exist
	GetPath(ctx context.Context, in *GetPathRequest, opts ...client.CallOption) (*GetPathResponse, error)
	// Returns the quota available under the provided
	// reference.
	// MUST return CODE_NOT_FOUND if the reference does not exist
	// MUST return CODE_RESOURCE_EXHAUSTED on exceeded quota limits.
	GetQuota(ctx context.Context, in *GetQuotaRequest, opts ...client.CallOption) (*GetQuotaResponse, error)
	// Initiates the download of a file using an
	// out-of-band data transfer mechanism.
	InitiateFileDownload(ctx context.Context, in *InitiateFileDownloadRequest, opts ...client.CallOption) (*InitiateFileDownloadResponse, error)
	// Initiates the upload of a file using an
	// out-of-band data transfer mechanism.
	InitiateFileUpload(ctx context.Context, in *InitiateFileUploadRequest, opts ...client.CallOption) (*InitiateFileUploadResponse, error)
	// Returns the list of grants for the provided reference.
	// MUST return CODE_NOT_FOUND if the reference does not exists.
	ListGrants(ctx context.Context, in *ListGrantsRequest, opts ...client.CallOption) (*ListGrantsResponse, error)
	// Returns a stream of resource informations
	// for the provided reference.
	// MUST return CODE_NOT_FOUND if the reference does not exists.
	ListContainerStream(ctx context.Context, in *ListContainerStreamRequest, opts ...client.CallOption) (ProviderAPI_ListContainerStreamService, error)
	// Returns a list of resource information
	// for the provided reference.
	// MUST return CODE_NOT_FOUND if the reference does not exists.
	ListContainer(ctx context.Context, in *ListContainerRequest, opts ...client.CallOption) (*ListContainerResponse, error)
	// Returns a list of the versions for a resource of
	// type file at the provided reference.
	// MUST return CODE_NOT_FOUND if the reference does not exist.
	// MUST return CODE_OK and MUST return an empty list if no versions are available.
	// TODO: What code if resource not of type file?
	ListFileVersions(ctx context.Context, in *ListFileVersionsRequest, opts ...client.CallOption) (*ListFileVersionsResponse, error)
	// Returns a stream of recycle items for this storage provider.
	ListRecycleStream(ctx context.Context, in *ListRecycleStreamRequest, opts ...client.CallOption) (ProviderAPI_ListRecycleStreamService, error)
	// Returns a list of recycle items for this storage provider.
	// MUST return CODE_OK and MUST return an empty list if no recycle items are available.
	ListRecycle(ctx context.Context, in *ListRecycleRequest, opts ...client.CallOption) (*ListRecycleResponse, error)
	// Moves a resource from one reference to another.
	// MUST return CODE_NOT_FOUND if any of the references do not exist.
	// MUST return CODE_PRECONDITION_FAILED if the source reference
	// cannot be moved to the destination reference.
	Move(ctx context.Context, in *MoveRequest, opts ...client.CallOption) (*MoveResponse, error)
	// Removes a grant for the provided reference.
	// This is recursive and atomic for directories. Does not follow references.
	// MUST return CODE_NOT_FOUND if the reference does not exist.
	// MUST return CODE_NOT_FOUND if grant does not exist.
	RemoveGrant(ctx context.Context, in *RemoveGrantRequest, opts ...client.CallOption) (*RemoveGrantResponse, error)
	// Permanently removes a recycle item from the recycle.
	// This operation is irrevocable.
	// MUST return CODE_NOT_FOUND if the recycle item id does not exist.
	PurgeRecycle(ctx context.Context, in *PurgeRecycleRequest, opts ...client.CallOption) (*PurgeRecycleResponse, error)
	// Restores a file version for the provided reference.
	// MUST return CODE_NOT_FOUND if the reference does not exist.
	// MUST return CODE_NOT_FOUND if the version does not exist.
	RestoreFileVersion(ctx context.Context, in *RestoreFileVersionRequest, opts ...client.CallOption) (*RestoreFileVersionResponse, error)
	// Restores a recycle item from the recycle.
	// MUST return CODE_NOT_FOUND if the recycle item id does not exist.
	// MUST return CODE_PRECONDITION_FAILED if the restore_path is non-empty
	// and the recycle item cannot be restored to the restore_path.
	RestoreRecycleItem(ctx context.Context, in *RestoreRecycleItemRequest, opts ...client.CallOption) (*RestoreRecycleItemResponse, error)
	// Returns the resource information at the provided reference.
	// MUST return CODE_NOT_FOUND if the reference does not exist.
	Stat(ctx context.Context, in *StatRequest, opts ...client.CallOption) (*StatResponse, error)
	// Updates an ACL for the provided reference.
	// MUST return CODE_NOT_FOUND if the reference does not exist.
	// MUST return CODE_PRECONDITION_FAILED if the acl does not exist.
	UpdateGrant(ctx context.Context, in *UpdateGrantRequest, opts ...client.CallOption) (*UpdateGrantResponse, error)
	// Creates a reference to another resource in the same cluster or another domain (OCM shares).
	// The references resource can be accessed by the protocol specificied in the request message.
	CreateReference(ctx context.Context, in *CreateReferenceRequest, opts ...client.CallOption) (*CreateReferenceResponse, error)
	// Sets arbitrary metadata into a storage resource.
	// Arbitrary metadata is returned in a cs3.storageprovider.v1beta1.ResourceInfo.
	SetArbitraryMetadata(ctx context.Context, in *SetArbitraryMetadataRequest, opts ...client.CallOption) (*SetArbitraryMetadataResponse, error)
	// Unsets arbitrary metdata into a storage resource.
	// Arbitrary metadata is returned in a cs3.storageprovider.v1beta1.ResourceInfo.
	UnsetArbitraryMetadata(ctx context.Context, in *UnsetArbitraryMetadataRequest, opts ...client.CallOption) (*UnsetArbitraryMetadataResponse, error)
	// Creates the home directory for a user.
	CreateHome(ctx context.Context, in *CreateHomeRequest, opts ...client.CallOption) (*CreateHomeResponse, error)
	// Gets the home path for the user.
	GetHome(ctx context.Context, in *GetHomeRequest, opts ...client.CallOption) (*GetHomeResponse, error)
}

type providerAPIService struct {
	c    client.Client
	name string
}

func NewProviderAPIService(name string, c client.Client) ProviderAPIService {
	return &providerAPIService{
		c:    c,
		name: name,
	}
}

func (c *providerAPIService) AddGrant(ctx context.Context, in *AddGrantRequest, opts ...client.CallOption) (*AddGrantResponse, error) {
	req := c.c.NewRequest(c.name, "ProviderAPI.AddGrant", in)
	out := new(AddGrantResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerAPIService) CreateContainer(ctx context.Context, in *CreateContainerRequest, opts ...client.CallOption) (*CreateContainerResponse, error) {
	req := c.c.NewRequest(c.name, "ProviderAPI.CreateContainer", in)
	out := new(CreateContainerResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerAPIService) Delete(ctx context.Context, in *DeleteRequest, opts ...client.CallOption) (*DeleteResponse, error) {
	req := c.c.NewRequest(c.name, "ProviderAPI.Delete", in)
	out := new(DeleteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerAPIService) GetPath(ctx context.Context, in *GetPathRequest, opts ...client.CallOption) (*GetPathResponse, error) {
	req := c.c.NewRequest(c.name, "ProviderAPI.GetPath", in)
	out := new(GetPathResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerAPIService) GetQuota(ctx context.Context, in *GetQuotaRequest, opts ...client.CallOption) (*GetQuotaResponse, error) {
	req := c.c.NewRequest(c.name, "ProviderAPI.GetQuota", in)
	out := new(GetQuotaResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerAPIService) InitiateFileDownload(ctx context.Context, in *InitiateFileDownloadRequest, opts ...client.CallOption) (*InitiateFileDownloadResponse, error) {
	req := c.c.NewRequest(c.name, "ProviderAPI.InitiateFileDownload", in)
	out := new(InitiateFileDownloadResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerAPIService) InitiateFileUpload(ctx context.Context, in *InitiateFileUploadRequest, opts ...client.CallOption) (*InitiateFileUploadResponse, error) {
	req := c.c.NewRequest(c.name, "ProviderAPI.InitiateFileUpload", in)
	out := new(InitiateFileUploadResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerAPIService) ListGrants(ctx context.Context, in *ListGrantsRequest, opts ...client.CallOption) (*ListGrantsResponse, error) {
	req := c.c.NewRequest(c.name, "ProviderAPI.ListGrants", in)
	out := new(ListGrantsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerAPIService) ListContainerStream(ctx context.Context, in *ListContainerStreamRequest, opts ...client.CallOption) (ProviderAPI_ListContainerStreamService, error) {
	req := c.c.NewRequest(c.name, "ProviderAPI.ListContainerStream", &ListContainerStreamRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &providerAPIServiceListContainerStream{stream}, nil
}

type ProviderAPI_ListContainerStreamService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*ListContainerStreamResponse, error)
}

type providerAPIServiceListContainerStream struct {
	stream client.Stream
}

func (x *providerAPIServiceListContainerStream) Close() error {
	return x.stream.Close()
}

func (x *providerAPIServiceListContainerStream) Context() context.Context {
	return x.stream.Context()
}

func (x *providerAPIServiceListContainerStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *providerAPIServiceListContainerStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *providerAPIServiceListContainerStream) Recv() (*ListContainerStreamResponse, error) {
	m := new(ListContainerStreamResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *providerAPIService) ListContainer(ctx context.Context, in *ListContainerRequest, opts ...client.CallOption) (*ListContainerResponse, error) {
	req := c.c.NewRequest(c.name, "ProviderAPI.ListContainer", in)
	out := new(ListContainerResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerAPIService) ListFileVersions(ctx context.Context, in *ListFileVersionsRequest, opts ...client.CallOption) (*ListFileVersionsResponse, error) {
	req := c.c.NewRequest(c.name, "ProviderAPI.ListFileVersions", in)
	out := new(ListFileVersionsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerAPIService) ListRecycleStream(ctx context.Context, in *ListRecycleStreamRequest, opts ...client.CallOption) (ProviderAPI_ListRecycleStreamService, error) {
	req := c.c.NewRequest(c.name, "ProviderAPI.ListRecycleStream", &ListRecycleStreamRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &providerAPIServiceListRecycleStream{stream}, nil
}

type ProviderAPI_ListRecycleStreamService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*ListRecycleStreamResponse, error)
}

type providerAPIServiceListRecycleStream struct {
	stream client.Stream
}

func (x *providerAPIServiceListRecycleStream) Close() error {
	return x.stream.Close()
}

func (x *providerAPIServiceListRecycleStream) Context() context.Context {
	return x.stream.Context()
}

func (x *providerAPIServiceListRecycleStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *providerAPIServiceListRecycleStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *providerAPIServiceListRecycleStream) Recv() (*ListRecycleStreamResponse, error) {
	m := new(ListRecycleStreamResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *providerAPIService) ListRecycle(ctx context.Context, in *ListRecycleRequest, opts ...client.CallOption) (*ListRecycleResponse, error) {
	req := c.c.NewRequest(c.name, "ProviderAPI.ListRecycle", in)
	out := new(ListRecycleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerAPIService) Move(ctx context.Context, in *MoveRequest, opts ...client.CallOption) (*MoveResponse, error) {
	req := c.c.NewRequest(c.name, "ProviderAPI.Move", in)
	out := new(MoveResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerAPIService) RemoveGrant(ctx context.Context, in *RemoveGrantRequest, opts ...client.CallOption) (*RemoveGrantResponse, error) {
	req := c.c.NewRequest(c.name, "ProviderAPI.RemoveGrant", in)
	out := new(RemoveGrantResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerAPIService) PurgeRecycle(ctx context.Context, in *PurgeRecycleRequest, opts ...client.CallOption) (*PurgeRecycleResponse, error) {
	req := c.c.NewRequest(c.name, "ProviderAPI.PurgeRecycle", in)
	out := new(PurgeRecycleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerAPIService) RestoreFileVersion(ctx context.Context, in *RestoreFileVersionRequest, opts ...client.CallOption) (*RestoreFileVersionResponse, error) {
	req := c.c.NewRequest(c.name, "ProviderAPI.RestoreFileVersion", in)
	out := new(RestoreFileVersionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerAPIService) RestoreRecycleItem(ctx context.Context, in *RestoreRecycleItemRequest, opts ...client.CallOption) (*RestoreRecycleItemResponse, error) {
	req := c.c.NewRequest(c.name, "ProviderAPI.RestoreRecycleItem", in)
	out := new(RestoreRecycleItemResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerAPIService) Stat(ctx context.Context, in *StatRequest, opts ...client.CallOption) (*StatResponse, error) {
	req := c.c.NewRequest(c.name, "ProviderAPI.Stat", in)
	out := new(StatResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerAPIService) UpdateGrant(ctx context.Context, in *UpdateGrantRequest, opts ...client.CallOption) (*UpdateGrantResponse, error) {
	req := c.c.NewRequest(c.name, "ProviderAPI.UpdateGrant", in)
	out := new(UpdateGrantResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerAPIService) CreateReference(ctx context.Context, in *CreateReferenceRequest, opts ...client.CallOption) (*CreateReferenceResponse, error) {
	req := c.c.NewRequest(c.name, "ProviderAPI.CreateReference", in)
	out := new(CreateReferenceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerAPIService) SetArbitraryMetadata(ctx context.Context, in *SetArbitraryMetadataRequest, opts ...client.CallOption) (*SetArbitraryMetadataResponse, error) {
	req := c.c.NewRequest(c.name, "ProviderAPI.SetArbitraryMetadata", in)
	out := new(SetArbitraryMetadataResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerAPIService) UnsetArbitraryMetadata(ctx context.Context, in *UnsetArbitraryMetadataRequest, opts ...client.CallOption) (*UnsetArbitraryMetadataResponse, error) {
	req := c.c.NewRequest(c.name, "ProviderAPI.UnsetArbitraryMetadata", in)
	out := new(UnsetArbitraryMetadataResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerAPIService) CreateHome(ctx context.Context, in *CreateHomeRequest, opts ...client.CallOption) (*CreateHomeResponse, error) {
	req := c.c.NewRequest(c.name, "ProviderAPI.CreateHome", in)
	out := new(CreateHomeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerAPIService) GetHome(ctx context.Context, in *GetHomeRequest, opts ...client.CallOption) (*GetHomeResponse, error) {
	req := c.c.NewRequest(c.name, "ProviderAPI.GetHome", in)
	out := new(GetHomeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ProviderAPI service

type ProviderAPIHandler interface {
	// Adds a new grant for the provided reference.
	// MUST return CODE_NOT_FOUND if the reference does not exist
	AddGrant(context.Context, *AddGrantRequest, *AddGrantResponse) error
	// Creates a new resource of type container.
	// MUST return CODE_PRECONDITION_FAILED if the container
	// cannot be created at the specified reference.
	CreateContainer(context.Context, *CreateContainerRequest, *CreateContainerResponse) error
	// Deletes a resource.
	// If a resource specifies the non-empty container (directory, ...),
	// then the entire directory is deleted recursively.
	// If a resource specifies a reference or symlink type, only the reference is removed (not the target).
	// MUST return CODE_NOT_FOUND if the reference does not exist.
	Delete(context.Context, *DeleteRequest, *DeleteResponse) error
	// Returns the path reference for
	// the provided resource id reference.
	// MUST return CODE_NOT_FOUND if the reference does not exist
	GetPath(context.Context, *GetPathRequest, *GetPathResponse) error
	// Returns the quota available under the provided
	// reference.
	// MUST return CODE_NOT_FOUND if the reference does not exist
	// MUST return CODE_RESOURCE_EXHAUSTED on exceeded quota limits.
	GetQuota(context.Context, *GetQuotaRequest, *GetQuotaResponse) error
	// Initiates the download of a file using an
	// out-of-band data transfer mechanism.
	InitiateFileDownload(context.Context, *InitiateFileDownloadRequest, *InitiateFileDownloadResponse) error
	// Initiates the upload of a file using an
	// out-of-band data transfer mechanism.
	InitiateFileUpload(context.Context, *InitiateFileUploadRequest, *InitiateFileUploadResponse) error
	// Returns the list of grants for the provided reference.
	// MUST return CODE_NOT_FOUND if the reference does not exists.
	ListGrants(context.Context, *ListGrantsRequest, *ListGrantsResponse) error
	// Returns a stream of resource informations
	// for the provided reference.
	// MUST return CODE_NOT_FOUND if the reference does not exists.
	ListContainerStream(context.Context, *ListContainerStreamRequest, ProviderAPI_ListContainerStreamStream) error
	// Returns a list of resource information
	// for the provided reference.
	// MUST return CODE_NOT_FOUND if the reference does not exists.
	ListContainer(context.Context, *ListContainerRequest, *ListContainerResponse) error
	// Returns a list of the versions for a resource of
	// type file at the provided reference.
	// MUST return CODE_NOT_FOUND if the reference does not exist.
	// MUST return CODE_OK and MUST return an empty list if no versions are available.
	// TODO: What code if resource not of type file?
	ListFileVersions(context.Context, *ListFileVersionsRequest, *ListFileVersionsResponse) error
	// Returns a stream of recycle items for this storage provider.
	ListRecycleStream(context.Context, *ListRecycleStreamRequest, ProviderAPI_ListRecycleStreamStream) error
	// Returns a list of recycle items for this storage provider.
	// MUST return CODE_OK and MUST return an empty list if no recycle items are available.
	ListRecycle(context.Context, *ListRecycleRequest, *ListRecycleResponse) error
	// Moves a resource from one reference to another.
	// MUST return CODE_NOT_FOUND if any of the references do not exist.
	// MUST return CODE_PRECONDITION_FAILED if the source reference
	// cannot be moved to the destination reference.
	Move(context.Context, *MoveRequest, *MoveResponse) error
	// Removes a grant for the provided reference.
	// This is recursive and atomic for directories. Does not follow references.
	// MUST return CODE_NOT_FOUND if the reference does not exist.
	// MUST return CODE_NOT_FOUND if grant does not exist.
	RemoveGrant(context.Context, *RemoveGrantRequest, *RemoveGrantResponse) error
	// Permanently removes a recycle item from the recycle.
	// This operation is irrevocable.
	// MUST return CODE_NOT_FOUND if the recycle item id does not exist.
	PurgeRecycle(context.Context, *PurgeRecycleRequest, *PurgeRecycleResponse) error
	// Restores a file version for the provided reference.
	// MUST return CODE_NOT_FOUND if the reference does not exist.
	// MUST return CODE_NOT_FOUND if the version does not exist.
	RestoreFileVersion(context.Context, *RestoreFileVersionRequest, *RestoreFileVersionResponse) error
	// Restores a recycle item from the recycle.
	// MUST return CODE_NOT_FOUND if the recycle item id does not exist.
	// MUST return CODE_PRECONDITION_FAILED if the restore_path is non-empty
	// and the recycle item cannot be restored to the restore_path.
	RestoreRecycleItem(context.Context, *RestoreRecycleItemRequest, *RestoreRecycleItemResponse) error
	// Returns the resource information at the provided reference.
	// MUST return CODE_NOT_FOUND if the reference does not exist.
	Stat(context.Context, *StatRequest, *StatResponse) error
	// Updates an ACL for the provided reference.
	// MUST return CODE_NOT_FOUND if the reference does not exist.
	// MUST return CODE_PRECONDITION_FAILED if the acl does not exist.
	UpdateGrant(context.Context, *UpdateGrantRequest, *UpdateGrantResponse) error
	// Creates a reference to another resource in the same cluster or another domain (OCM shares).
	// The references resource can be accessed by the protocol specificied in the request message.
	CreateReference(context.Context, *CreateReferenceRequest, *CreateReferenceResponse) error
	// Sets arbitrary metadata into a storage resource.
	// Arbitrary metadata is returned in a cs3.storageprovider.v1beta1.ResourceInfo.
	SetArbitraryMetadata(context.Context, *SetArbitraryMetadataRequest, *SetArbitraryMetadataResponse) error
	// Unsets arbitrary metdata into a storage resource.
	// Arbitrary metadata is returned in a cs3.storageprovider.v1beta1.ResourceInfo.
	UnsetArbitraryMetadata(context.Context, *UnsetArbitraryMetadataRequest, *UnsetArbitraryMetadataResponse) error
	// Creates the home directory for a user.
	CreateHome(context.Context, *CreateHomeRequest, *CreateHomeResponse) error
	// Gets the home path for the user.
	GetHome(context.Context, *GetHomeRequest, *GetHomeResponse) error
}

func RegisterProviderAPIHandler(s server.Server, hdlr ProviderAPIHandler, opts ...server.HandlerOption) error {
	type providerAPI interface {
		AddGrant(ctx context.Context, in *AddGrantRequest, out *AddGrantResponse) error
		CreateContainer(ctx context.Context, in *CreateContainerRequest, out *CreateContainerResponse) error
		Delete(ctx context.Context, in *DeleteRequest, out *DeleteResponse) error
		GetPath(ctx context.Context, in *GetPathRequest, out *GetPathResponse) error
		GetQuota(ctx context.Context, in *GetQuotaRequest, out *GetQuotaResponse) error
		InitiateFileDownload(ctx context.Context, in *InitiateFileDownloadRequest, out *InitiateFileDownloadResponse) error
		InitiateFileUpload(ctx context.Context, in *InitiateFileUploadRequest, out *InitiateFileUploadResponse) error
		ListGrants(ctx context.Context, in *ListGrantsRequest, out *ListGrantsResponse) error
		ListContainerStream(ctx context.Context, stream server.Stream) error
		ListContainer(ctx context.Context, in *ListContainerRequest, out *ListContainerResponse) error
		ListFileVersions(ctx context.Context, in *ListFileVersionsRequest, out *ListFileVersionsResponse) error
		ListRecycleStream(ctx context.Context, stream server.Stream) error
		ListRecycle(ctx context.Context, in *ListRecycleRequest, out *ListRecycleResponse) error
		Move(ctx context.Context, in *MoveRequest, out *MoveResponse) error
		RemoveGrant(ctx context.Context, in *RemoveGrantRequest, out *RemoveGrantResponse) error
		PurgeRecycle(ctx context.Context, in *PurgeRecycleRequest, out *PurgeRecycleResponse) error
		RestoreFileVersion(ctx context.Context, in *RestoreFileVersionRequest, out *RestoreFileVersionResponse) error
		RestoreRecycleItem(ctx context.Context, in *RestoreRecycleItemRequest, out *RestoreRecycleItemResponse) error
		Stat(ctx context.Context, in *StatRequest, out *StatResponse) error
		UpdateGrant(ctx context.Context, in *UpdateGrantRequest, out *UpdateGrantResponse) error
		CreateReference(ctx context.Context, in *CreateReferenceRequest, out *CreateReferenceResponse) error
		SetArbitraryMetadata(ctx context.Context, in *SetArbitraryMetadataRequest, out *SetArbitraryMetadataResponse) error
		UnsetArbitraryMetadata(ctx context.Context, in *UnsetArbitraryMetadataRequest, out *UnsetArbitraryMetadataResponse) error
		CreateHome(ctx context.Context, in *CreateHomeRequest, out *CreateHomeResponse) error
		GetHome(ctx context.Context, in *GetHomeRequest, out *GetHomeResponse) error
	}
	type ProviderAPI struct {
		providerAPI
	}
	h := &providerAPIHandler{hdlr}
	return s.Handle(s.NewHandler(&ProviderAPI{h}, opts...))
}

type providerAPIHandler struct {
	ProviderAPIHandler
}

func (h *providerAPIHandler) AddGrant(ctx context.Context, in *AddGrantRequest, out *AddGrantResponse) error {
	return h.ProviderAPIHandler.AddGrant(ctx, in, out)
}

func (h *providerAPIHandler) CreateContainer(ctx context.Context, in *CreateContainerRequest, out *CreateContainerResponse) error {
	return h.ProviderAPIHandler.CreateContainer(ctx, in, out)
}

func (h *providerAPIHandler) Delete(ctx context.Context, in *DeleteRequest, out *DeleteResponse) error {
	return h.ProviderAPIHandler.Delete(ctx, in, out)
}

func (h *providerAPIHandler) GetPath(ctx context.Context, in *GetPathRequest, out *GetPathResponse) error {
	return h.ProviderAPIHandler.GetPath(ctx, in, out)
}

func (h *providerAPIHandler) GetQuota(ctx context.Context, in *GetQuotaRequest, out *GetQuotaResponse) error {
	return h.ProviderAPIHandler.GetQuota(ctx, in, out)
}

func (h *providerAPIHandler) InitiateFileDownload(ctx context.Context, in *InitiateFileDownloadRequest, out *InitiateFileDownloadResponse) error {
	return h.ProviderAPIHandler.InitiateFileDownload(ctx, in, out)
}

func (h *providerAPIHandler) InitiateFileUpload(ctx context.Context, in *InitiateFileUploadRequest, out *InitiateFileUploadResponse) error {
	return h.ProviderAPIHandler.InitiateFileUpload(ctx, in, out)
}

func (h *providerAPIHandler) ListGrants(ctx context.Context, in *ListGrantsRequest, out *ListGrantsResponse) error {
	return h.ProviderAPIHandler.ListGrants(ctx, in, out)
}

func (h *providerAPIHandler) ListContainerStream(ctx context.Context, stream server.Stream) error {
	m := new(ListContainerStreamRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.ProviderAPIHandler.ListContainerStream(ctx, m, &providerAPIListContainerStreamStream{stream})
}

type ProviderAPI_ListContainerStreamStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*ListContainerStreamResponse) error
}

type providerAPIListContainerStreamStream struct {
	stream server.Stream
}

func (x *providerAPIListContainerStreamStream) Close() error {
	return x.stream.Close()
}

func (x *providerAPIListContainerStreamStream) Context() context.Context {
	return x.stream.Context()
}

func (x *providerAPIListContainerStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *providerAPIListContainerStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *providerAPIListContainerStreamStream) Send(m *ListContainerStreamResponse) error {
	return x.stream.Send(m)
}

func (h *providerAPIHandler) ListContainer(ctx context.Context, in *ListContainerRequest, out *ListContainerResponse) error {
	return h.ProviderAPIHandler.ListContainer(ctx, in, out)
}

func (h *providerAPIHandler) ListFileVersions(ctx context.Context, in *ListFileVersionsRequest, out *ListFileVersionsResponse) error {
	return h.ProviderAPIHandler.ListFileVersions(ctx, in, out)
}

func (h *providerAPIHandler) ListRecycleStream(ctx context.Context, stream server.Stream) error {
	m := new(ListRecycleStreamRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.ProviderAPIHandler.ListRecycleStream(ctx, m, &providerAPIListRecycleStreamStream{stream})
}

type ProviderAPI_ListRecycleStreamStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*ListRecycleStreamResponse) error
}

type providerAPIListRecycleStreamStream struct {
	stream server.Stream
}

func (x *providerAPIListRecycleStreamStream) Close() error {
	return x.stream.Close()
}

func (x *providerAPIListRecycleStreamStream) Context() context.Context {
	return x.stream.Context()
}

func (x *providerAPIListRecycleStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *providerAPIListRecycleStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *providerAPIListRecycleStreamStream) Send(m *ListRecycleStreamResponse) error {
	return x.stream.Send(m)
}

func (h *providerAPIHandler) ListRecycle(ctx context.Context, in *ListRecycleRequest, out *ListRecycleResponse) error {
	return h.ProviderAPIHandler.ListRecycle(ctx, in, out)
}

func (h *providerAPIHandler) Move(ctx context.Context, in *MoveRequest, out *MoveResponse) error {
	return h.ProviderAPIHandler.Move(ctx, in, out)
}

func (h *providerAPIHandler) RemoveGrant(ctx context.Context, in *RemoveGrantRequest, out *RemoveGrantResponse) error {
	return h.ProviderAPIHandler.RemoveGrant(ctx, in, out)
}

func (h *providerAPIHandler) PurgeRecycle(ctx context.Context, in *PurgeRecycleRequest, out *PurgeRecycleResponse) error {
	return h.ProviderAPIHandler.PurgeRecycle(ctx, in, out)
}

func (h *providerAPIHandler) RestoreFileVersion(ctx context.Context, in *RestoreFileVersionRequest, out *RestoreFileVersionResponse) error {
	return h.ProviderAPIHandler.RestoreFileVersion(ctx, in, out)
}

func (h *providerAPIHandler) RestoreRecycleItem(ctx context.Context, in *RestoreRecycleItemRequest, out *RestoreRecycleItemResponse) error {
	return h.ProviderAPIHandler.RestoreRecycleItem(ctx, in, out)
}

func (h *providerAPIHandler) Stat(ctx context.Context, in *StatRequest, out *StatResponse) error {
	return h.ProviderAPIHandler.Stat(ctx, in, out)
}

func (h *providerAPIHandler) UpdateGrant(ctx context.Context, in *UpdateGrantRequest, out *UpdateGrantResponse) error {
	return h.ProviderAPIHandler.UpdateGrant(ctx, in, out)
}

func (h *providerAPIHandler) CreateReference(ctx context.Context, in *CreateReferenceRequest, out *CreateReferenceResponse) error {
	return h.ProviderAPIHandler.CreateReference(ctx, in, out)
}

func (h *providerAPIHandler) SetArbitraryMetadata(ctx context.Context, in *SetArbitraryMetadataRequest, out *SetArbitraryMetadataResponse) error {
	return h.ProviderAPIHandler.SetArbitraryMetadata(ctx, in, out)
}

func (h *providerAPIHandler) UnsetArbitraryMetadata(ctx context.Context, in *UnsetArbitraryMetadataRequest, out *UnsetArbitraryMetadataResponse) error {
	return h.ProviderAPIHandler.UnsetArbitraryMetadata(ctx, in, out)
}

func (h *providerAPIHandler) CreateHome(ctx context.Context, in *CreateHomeRequest, out *CreateHomeResponse) error {
	return h.ProviderAPIHandler.CreateHome(ctx, in, out)
}

func (h *providerAPIHandler) GetHome(ctx context.Context, in *GetHomeRequest, out *GetHomeResponse) error {
	return h.ProviderAPIHandler.GetHome(ctx, in, out)
}
