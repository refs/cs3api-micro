// Copyright 2018-2019 CERN
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// In applying this license, CERN does not waive the privileges and immunities
// granted to it by virtue of its status as an Intergovernmental Organization
// or submit itself to any jurisdiction.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.24.0
// 	protoc        v3.8.0
// source: cs3/storage/provider/v1beta1/resources.proto

package providerv1beta1

import (
	v1beta11 "github.com/cs3org/go-cs3apis/build/go-cs3apis/cs3/identity/user/v1beta1"
	v1beta1 "github.com/cs3org/go-cs3apis/build/go-cs3apis/cs3/types/v1beta1"
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// The available types of resources.
type ResourceType int32

const (
	ResourceType_RESOURCE_TYPE_INVALID ResourceType = 0
	// The file type represents a type
	// that holds arbitrary data.
	// Service implementors usually map this type
	// to files (local filesystem) or objects
	// (Amazon S3).
	ResourceType_RESOURCE_TYPE_FILE ResourceType = 1
	// The container type represents a type
	// that can contain another types.
	// Service implementors usually map this type
	// to folders (local filesystem) or buckets
	// (Amazon S3).
	ResourceType_RESOURCE_TYPE_CONTAINER ResourceType = 2
	// This represents a reference type which points
	// to another resource where client MAY be redirected.
	// Client SHOULD use the ResourceInfo.target
	// reference for a subsequent call.
	ResourceType_RESOURCE_TYPE_REFERENCE ResourceType = 3
	// This represents a symbolic link type if the underlying
	// storage system supports it.
	// Symlink target SHOULD NOT be interpreted by the clients.
	ResourceType_RESOURCE_TYPE_SYMLINK ResourceType = 4
	// Internal resource type for some specific resources inside
	// a storage implementation.
	// For example, this type could be used to represent
	// a device file on a Linux filesystem.
	// Another example could be to represent an ongoing upload,
	// where an hypothetically user interface could show a loading icon
	// on this type of resources until the upload operation is completed.
	// Internal resources SHOULD NOT be moved to a different storage
	// provider.
	ResourceType_RESOURCE_TYPE_INTERNAL ResourceType = 5
)

// Enum value maps for ResourceType.
var (
	ResourceType_name = map[int32]string{
		0: "RESOURCE_TYPE_INVALID",
		1: "RESOURCE_TYPE_FILE",
		2: "RESOURCE_TYPE_CONTAINER",
		3: "RESOURCE_TYPE_REFERENCE",
		4: "RESOURCE_TYPE_SYMLINK",
		5: "RESOURCE_TYPE_INTERNAL",
	}
	ResourceType_value = map[string]int32{
		"RESOURCE_TYPE_INVALID":   0,
		"RESOURCE_TYPE_FILE":      1,
		"RESOURCE_TYPE_CONTAINER": 2,
		"RESOURCE_TYPE_REFERENCE": 3,
		"RESOURCE_TYPE_SYMLINK":   4,
		"RESOURCE_TYPE_INTERNAL":  5,
	}
)

func (x ResourceType) Enum() *ResourceType {
	p := new(ResourceType)
	*p = x
	return p
}

func (x ResourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_cs3_storage_provider_v1beta1_resources_proto_enumTypes[0].Descriptor()
}

func (ResourceType) Type() protoreflect.EnumType {
	return &file_cs3_storage_provider_v1beta1_resources_proto_enumTypes[0]
}

func (x ResourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResourceType.Descriptor instead.
func (ResourceType) EnumDescriptor() ([]byte, []int) {
	return file_cs3_storage_provider_v1beta1_resources_proto_rawDescGZIP(), []int{0}
}

// The type of checksum to use.
type ResourceChecksumType int32

const (
	ResourceChecksumType_RESOURCE_CHECKSUM_TYPE_INVALID ResourceChecksumType = 0
	// unset means no checksum is set.
	ResourceChecksumType_RESOURCE_CHECKSUM_TYPE_UNSET ResourceChecksumType = 1
	// Use Adler32 checksum.
	ResourceChecksumType_RESOURCE_CHECKSUM_TYPE_ADLER32 ResourceChecksumType = 2
	// Use MD5 checksum.
	ResourceChecksumType_RESOURCE_CHECKSUM_TYPE_MD5 ResourceChecksumType = 3
	// Use SHA-1 checksum.
	ResourceChecksumType_RESOURCE_CHECKSUM_TYPE_SHA1 ResourceChecksumType = 4
)

// Enum value maps for ResourceChecksumType.
var (
	ResourceChecksumType_name = map[int32]string{
		0: "RESOURCE_CHECKSUM_TYPE_INVALID",
		1: "RESOURCE_CHECKSUM_TYPE_UNSET",
		2: "RESOURCE_CHECKSUM_TYPE_ADLER32",
		3: "RESOURCE_CHECKSUM_TYPE_MD5",
		4: "RESOURCE_CHECKSUM_TYPE_SHA1",
	}
	ResourceChecksumType_value = map[string]int32{
		"RESOURCE_CHECKSUM_TYPE_INVALID": 0,
		"RESOURCE_CHECKSUM_TYPE_UNSET":   1,
		"RESOURCE_CHECKSUM_TYPE_ADLER32": 2,
		"RESOURCE_CHECKSUM_TYPE_MD5":     3,
		"RESOURCE_CHECKSUM_TYPE_SHA1":    4,
	}
)

func (x ResourceChecksumType) Enum() *ResourceChecksumType {
	p := new(ResourceChecksumType)
	*p = x
	return p
}

func (x ResourceChecksumType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResourceChecksumType) Descriptor() protoreflect.EnumDescriptor {
	return file_cs3_storage_provider_v1beta1_resources_proto_enumTypes[1].Descriptor()
}

func (ResourceChecksumType) Type() protoreflect.EnumType {
	return &file_cs3_storage_provider_v1beta1_resources_proto_enumTypes[1]
}

func (x ResourceChecksumType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResourceChecksumType.Descriptor instead.
func (ResourceChecksumType) EnumDescriptor() ([]byte, []int) {
	return file_cs3_storage_provider_v1beta1_resources_proto_rawDescGZIP(), []int{1}
}

// The type of the grantee.
type GranteeType int32

const (
	GranteeType_GRANTEE_TYPE_INVALID GranteeType = 0
	// This type represents an individual.
	GranteeType_GRANTEE_TYPE_USER GranteeType = 1
	// This type represents a group of individuals.
	GranteeType_GRANTEE_TYPE_GROUP GranteeType = 2
)

// Enum value maps for GranteeType.
var (
	GranteeType_name = map[int32]string{
		0: "GRANTEE_TYPE_INVALID",
		1: "GRANTEE_TYPE_USER",
		2: "GRANTEE_TYPE_GROUP",
	}
	GranteeType_value = map[string]int32{
		"GRANTEE_TYPE_INVALID": 0,
		"GRANTEE_TYPE_USER":    1,
		"GRANTEE_TYPE_GROUP":   2,
	}
)

func (x GranteeType) Enum() *GranteeType {
	p := new(GranteeType)
	*p = x
	return p
}

func (x GranteeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GranteeType) Descriptor() protoreflect.EnumDescriptor {
	return file_cs3_storage_provider_v1beta1_resources_proto_enumTypes[2].Descriptor()
}

func (GranteeType) Type() protoreflect.EnumType {
	return &file_cs3_storage_provider_v1beta1_resources_proto_enumTypes[2]
}

func (x GranteeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GranteeType.Descriptor instead.
func (GranteeType) EnumDescriptor() ([]byte, []int) {
	return file_cs3_storage_provider_v1beta1_resources_proto_rawDescGZIP(), []int{2}
}

// Represents the information (metadata) about
// a storage resource organized in a hierarchical namespace (file, directory/container, reference, symlink, ...).
type ResourceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// OPTIONAL.
	// Opaque information.
	Opaque *v1beta1.Opaque `protobuf:"bytes,1,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// REQUIRED.
	// The type of the resource (container, file, ...)
	// See the enum ResourceType for all possible types.
	Type ResourceType `protobuf:"varint,2,opt,name=type,proto3,enum=cs3.storage.provider.v1beta1.ResourceType" json:"type,omitempty"`
	// REQUIRED.
	// Opaque unique identifier of the resource.
	Id *ResourceId `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	// REQUIRED.
	// The data checksum for the file resource.
	// For all other resources, the checksum is unset.
	Checksum *ResourceChecksum `protobuf:"bytes,4,opt,name=checksum,proto3" json:"checksum,omitempty"`
	// REQUIRED.
	// As decribed in https://tools.ietf.org/html/rfc7232#section-2.3
	// For file resources, the etag must change if data or metadata changes.
	// For container types, the etag must change if etag of any of the (indirectly) contained resources change.
	// For reference types, the etag must change if etag of the target changes and the target is on the same storage provider.
	// In all other cases the etag does not change.
	Etag string `protobuf:"bytes,5,opt,name=etag,proto3" json:"etag,omitempty"`
	// REQUIRED.
	// As described in [RFC 2015](https://tools.ietf.org/html/rfc2045#page-7)
	MimeType string `protobuf:"bytes,6,opt,name=mime_type,json=mimeType,proto3" json:"mime_type,omitempty"`
	// REQUIRED.
	// Last modification time (mtime) of file or directory contents.
	// For reference types this is NOT the mtime of the target.
	Mtime *v1beta1.Timestamp `protobuf:"bytes,7,opt,name=mtime,proto3" json:"mtime,omitempty"`
	// REQUIRED.
	// The path for the resource.
	// It MUST start with the slash character (/).
	Path string `protobuf:"bytes,8,opt,name=path,proto3" json:"path,omitempty"`
	// REQUIRED.
	// The set of permissions for the resource effective for the authenticated user.
	PermissionSet *ResourcePermissions `protobuf:"bytes,9,opt,name=permission_set,json=permissionSet,proto3" json:"permission_set,omitempty"`
	// REQUIRED.
	// The size of the resource in bytes (file size)
	// TODO(moscicki): This is undefined for container type.
	// Is the accounting recursive?, could it be set to 0 for directories if recursive not supported? use another field?
	// TODO(moscicki): This needs to be defined also for other types (such as a symlink to a directory or file)
	Size uint64 `protobuf:"varint,10,opt,name=size,proto3" json:"size,omitempty"`
	// REQUIRED:
	// Identifier of the owner of the resource.
	Owner *v1beta11.UserId `protobuf:"bytes,11,opt,name=owner,proto3" json:"owner,omitempty"`
	// REQUIRED if ResourceType is either RESOURCE_TYPE_SYMLINK or RESOURCE_TYPE_REFERENCE
	Target string `protobuf:"bytes,12,opt,name=target,proto3" json:"target,omitempty"`
	// OPTIONAL.
	// Additional metadata attached to the resource.
	// If resource type is RESOURCE_TYPE_REFERENCE it MUST
	// be specified.
	CanonicalMetadata *CanonicalMetadata `protobuf:"bytes,13,opt,name=canonical_metadata,json=canonicalMetadata,proto3" json:"canonical_metadata,omitempty"`
	// OPTIONAL.
	// Arbitrary metadata attached to a resource.
	ArbitraryMetadata *ArbitraryMetadata `protobuf:"bytes,14,opt,name=arbitrary_metadata,json=arbitraryMetadata,proto3" json:"arbitrary_metadata,omitempty"`
}

func (x *ResourceInfo) Reset() {
	*x = ResourceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cs3_storage_provider_v1beta1_resources_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceInfo) ProtoMessage() {}

func (x *ResourceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cs3_storage_provider_v1beta1_resources_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceInfo.ProtoReflect.Descriptor instead.
func (*ResourceInfo) Descriptor() ([]byte, []int) {
	return file_cs3_storage_provider_v1beta1_resources_proto_rawDescGZIP(), []int{0}
}

func (x *ResourceInfo) GetOpaque() *v1beta1.Opaque {
	if x != nil {
		return x.Opaque
	}
	return nil
}

func (x *ResourceInfo) GetType() ResourceType {
	if x != nil {
		return x.Type
	}
	return ResourceType_RESOURCE_TYPE_INVALID
}

func (x *ResourceInfo) GetId() *ResourceId {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ResourceInfo) GetChecksum() *ResourceChecksum {
	if x != nil {
		return x.Checksum
	}
	return nil
}

func (x *ResourceInfo) GetEtag() string {
	if x != nil {
		return x.Etag
	}
	return ""
}

func (x *ResourceInfo) GetMimeType() string {
	if x != nil {
		return x.MimeType
	}
	return ""
}

func (x *ResourceInfo) GetMtime() *v1beta1.Timestamp {
	if x != nil {
		return x.Mtime
	}
	return nil
}

func (x *ResourceInfo) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *ResourceInfo) GetPermissionSet() *ResourcePermissions {
	if x != nil {
		return x.PermissionSet
	}
	return nil
}

func (x *ResourceInfo) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *ResourceInfo) GetOwner() *v1beta11.UserId {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *ResourceInfo) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *ResourceInfo) GetCanonicalMetadata() *CanonicalMetadata {
	if x != nil {
		return x.CanonicalMetadata
	}
	return nil
}

func (x *ResourceInfo) GetArbitraryMetadata() *ArbitraryMetadata {
	if x != nil {
		return x.ArbitraryMetadata
	}
	return nil
}

// CanonicalMetadata contains extra metadata
// attached to a resource. This message and the Opaque
// message differ in that Opaque allows service implementors
// to include any extra metadata in any format and most clients
// will ignore it. However, the CanonicalMetadata message
// contains well defined fileds that clients MUST understand if
// they are specified.
type CanonicalMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// REQUIRED if resource type is RESOURCE_TYPE_REFERENCE.
	// The target reference the resource points to.
	Target *Reference `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
}

func (x *CanonicalMetadata) Reset() {
	*x = CanonicalMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cs3_storage_provider_v1beta1_resources_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CanonicalMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CanonicalMetadata) ProtoMessage() {}

func (x *CanonicalMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_cs3_storage_provider_v1beta1_resources_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CanonicalMetadata.ProtoReflect.Descriptor instead.
func (*CanonicalMetadata) Descriptor() ([]byte, []int) {
	return file_cs3_storage_provider_v1beta1_resources_proto_rawDescGZIP(), []int{1}
}

func (x *CanonicalMetadata) GetTarget() *Reference {
	if x != nil {
		return x.Target
	}
	return nil
}

// Arbitrary metadata than can be set to the resource.
type ArbitraryMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata map[string]string `protobuf:"bytes,1,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ArbitraryMetadata) Reset() {
	*x = ArbitraryMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cs3_storage_provider_v1beta1_resources_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArbitraryMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArbitraryMetadata) ProtoMessage() {}

func (x *ArbitraryMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_cs3_storage_provider_v1beta1_resources_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArbitraryMetadata.ProtoReflect.Descriptor instead.
func (*ArbitraryMetadata) Descriptor() ([]byte, []int) {
	return file_cs3_storage_provider_v1beta1_resources_proto_rawDescGZIP(), []int{2}
}

func (x *ArbitraryMetadata) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// The checksum to verify
// the integrity of a resource.
type ResourceChecksum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// REQUIRED.
	// The type of checksum to use.
	// If no checksum is provided,
	// type MUST be RESOURCE_CHECKSUM_TYPE_UNSET.
	Type ResourceChecksumType `protobuf:"varint,1,opt,name=type,proto3,enum=cs3.storage.provider.v1beta1.ResourceChecksumType" json:"type,omitempty"`
	// MUST be specified if type is not
	// RESOURCE_CHECKSUM_TYPE_UNSET or type is not
	// RESOURCE_CHECKSUM_TYPE_INVALID.
	// MUST be the hexadecimal representation of the cheksum.
	// The value is case-insensitive, so
	// "1E603A8", "1e603a8" or "1e603A8" are the same.
	Sum string `protobuf:"bytes,2,opt,name=sum,proto3" json:"sum,omitempty"`
}

func (x *ResourceChecksum) Reset() {
	*x = ResourceChecksum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cs3_storage_provider_v1beta1_resources_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceChecksum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceChecksum) ProtoMessage() {}

func (x *ResourceChecksum) ProtoReflect() protoreflect.Message {
	mi := &file_cs3_storage_provider_v1beta1_resources_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceChecksum.ProtoReflect.Descriptor instead.
func (*ResourceChecksum) Descriptor() ([]byte, []int) {
	return file_cs3_storage_provider_v1beta1_resources_proto_rawDescGZIP(), []int{3}
}

func (x *ResourceChecksum) GetType() ResourceChecksumType {
	if x != nil {
		return x.Type
	}
	return ResourceChecksumType_RESOURCE_CHECKSUM_TYPE_INVALID
}

func (x *ResourceChecksum) GetSum() string {
	if x != nil {
		return x.Sum
	}
	return ""
}

// When negotiating the user of checksum types
// between client and server, this structure
// defines the priority of the checksum.
// Priority 0 means highest priority.
type ResourceChecksumPriority struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     ResourceChecksumType `protobuf:"varint,1,opt,name=type,proto3,enum=cs3.storage.provider.v1beta1.ResourceChecksumType" json:"type,omitempty"`
	Priority uint32               `protobuf:"varint,2,opt,name=priority,proto3" json:"priority,omitempty"`
}

func (x *ResourceChecksumPriority) Reset() {
	*x = ResourceChecksumPriority{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cs3_storage_provider_v1beta1_resources_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceChecksumPriority) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceChecksumPriority) ProtoMessage() {}

func (x *ResourceChecksumPriority) ProtoReflect() protoreflect.Message {
	mi := &file_cs3_storage_provider_v1beta1_resources_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceChecksumPriority.ProtoReflect.Descriptor instead.
func (*ResourceChecksumPriority) Descriptor() ([]byte, []int) {
	return file_cs3_storage_provider_v1beta1_resources_proto_rawDescGZIP(), []int{4}
}

func (x *ResourceChecksumPriority) GetType() ResourceChecksumType {
	if x != nil {
		return x.Type
	}
	return ResourceChecksumType_RESOURCE_CHECKSUM_TYPE_INVALID
}

func (x *ResourceChecksumPriority) GetPriority() uint32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

// The mechanism to identify a resource
// in the storage provider namespace. Note that the path OR the resourceId must be specifed, not both.
type Reference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// REQUIRED.
	// One of the specifications MUST be specified.
	//
	// Types that are assignable to Spec:
	//	*Reference_Path
	//	*Reference_Id
	Spec isReference_Spec `protobuf_oneof:"spec"`
}

func (x *Reference) Reset() {
	*x = Reference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cs3_storage_provider_v1beta1_resources_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Reference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reference) ProtoMessage() {}

func (x *Reference) ProtoReflect() protoreflect.Message {
	mi := &file_cs3_storage_provider_v1beta1_resources_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reference.ProtoReflect.Descriptor instead.
func (*Reference) Descriptor() ([]byte, []int) {
	return file_cs3_storage_provider_v1beta1_resources_proto_rawDescGZIP(), []int{5}
}

func (m *Reference) GetSpec() isReference_Spec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (x *Reference) GetPath() string {
	if x, ok := x.GetSpec().(*Reference_Path); ok {
		return x.Path
	}
	return ""
}

func (x *Reference) GetId() *ResourceId {
	if x, ok := x.GetSpec().(*Reference_Id); ok {
		return x.Id
	}
	return nil
}

type isReference_Spec interface {
	isReference_Spec()
}

type Reference_Path struct {
	// The path to the resource.
	// MUST start with the slash character (/).
	Path string `protobuf:"bytes,1,opt,name=path,proto3,oneof"`
}

type Reference_Id struct {
	// The id for the resource.
	// MUST NOT start with the slash character (/).
	Id *ResourceId `protobuf:"bytes,2,opt,name=id,proto3,oneof"`
}

func (*Reference_Path) isReference_Spec() {}

func (*Reference_Id) isReference_Spec() {}

// A resource id identifies uniquely a
// resource in the storage provider namespace.
// A ResourceId MUST be unique in the storage provider.
type ResourceId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// REQUIRED.
	// The storage id of the storage provider.
	StorageId string `protobuf:"bytes,1,opt,name=storage_id,json=storageId,proto3" json:"storage_id,omitempty"`
	// REQUIRED.
	// The internal id used by service implementor to
	// uniquely identity the resource in the internal
	// implementation of the service.
	OpaqueId string `protobuf:"bytes,2,opt,name=opaque_id,json=opaqueId,proto3" json:"opaque_id,omitempty"`
}

func (x *ResourceId) Reset() {
	*x = ResourceId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cs3_storage_provider_v1beta1_resources_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceId) ProtoMessage() {}

func (x *ResourceId) ProtoReflect() protoreflect.Message {
	mi := &file_cs3_storage_provider_v1beta1_resources_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceId.ProtoReflect.Descriptor instead.
func (*ResourceId) Descriptor() ([]byte, []int) {
	return file_cs3_storage_provider_v1beta1_resources_proto_rawDescGZIP(), []int{6}
}

func (x *ResourceId) GetStorageId() string {
	if x != nil {
		return x.StorageId
	}
	return ""
}

func (x *ResourceId) GetOpaqueId() string {
	if x != nil {
		return x.OpaqueId
	}
	return ""
}

// The representation of permissions attached to a resource.
type ResourcePermissions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddGrant             bool `protobuf:"varint,1,opt,name=add_grant,json=addGrant,proto3" json:"add_grant,omitempty"`
	CreateContainer      bool `protobuf:"varint,2,opt,name=create_container,json=createContainer,proto3" json:"create_container,omitempty"`
	Delete               bool `protobuf:"varint,3,opt,name=delete,proto3" json:"delete,omitempty"`
	GetPath              bool `protobuf:"varint,5,opt,name=get_path,json=getPath,proto3" json:"get_path,omitempty"`
	GetQuota             bool `protobuf:"varint,6,opt,name=get_quota,json=getQuota,proto3" json:"get_quota,omitempty"`
	InitiateFileDownload bool `protobuf:"varint,7,opt,name=initiate_file_download,json=initiateFileDownload,proto3" json:"initiate_file_download,omitempty"`
	InitiateFileUpload   bool `protobuf:"varint,8,opt,name=initiate_file_upload,json=initiateFileUpload,proto3" json:"initiate_file_upload,omitempty"`
	ListGrants           bool `protobuf:"varint,9,opt,name=list_grants,json=listGrants,proto3" json:"list_grants,omitempty"`
	ListContainer        bool `protobuf:"varint,10,opt,name=list_container,json=listContainer,proto3" json:"list_container,omitempty"`
	ListFileVersions     bool `protobuf:"varint,11,opt,name=list_file_versions,json=listFileVersions,proto3" json:"list_file_versions,omitempty"`
	ListRecycle          bool `protobuf:"varint,12,opt,name=list_recycle,json=listRecycle,proto3" json:"list_recycle,omitempty"`
	Move                 bool `protobuf:"varint,13,opt,name=move,proto3" json:"move,omitempty"`
	RemoveGrant          bool `protobuf:"varint,14,opt,name=remove_grant,json=removeGrant,proto3" json:"remove_grant,omitempty"`
	PurgeRecycle         bool `protobuf:"varint,15,opt,name=purge_recycle,json=purgeRecycle,proto3" json:"purge_recycle,omitempty"`
	RestoreFileVersion   bool `protobuf:"varint,16,opt,name=restore_file_version,json=restoreFileVersion,proto3" json:"restore_file_version,omitempty"`
	RestoreRecycleItem   bool `protobuf:"varint,17,opt,name=restore_recycle_item,json=restoreRecycleItem,proto3" json:"restore_recycle_item,omitempty"`
	Stat                 bool `protobuf:"varint,18,opt,name=stat,proto3" json:"stat,omitempty"`
	UpdateGrant          bool `protobuf:"varint,19,opt,name=update_grant,json=updateGrant,proto3" json:"update_grant,omitempty"`
}

func (x *ResourcePermissions) Reset() {
	*x = ResourcePermissions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cs3_storage_provider_v1beta1_resources_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourcePermissions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourcePermissions) ProtoMessage() {}

func (x *ResourcePermissions) ProtoReflect() protoreflect.Message {
	mi := &file_cs3_storage_provider_v1beta1_resources_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourcePermissions.ProtoReflect.Descriptor instead.
func (*ResourcePermissions) Descriptor() ([]byte, []int) {
	return file_cs3_storage_provider_v1beta1_resources_proto_rawDescGZIP(), []int{7}
}

func (x *ResourcePermissions) GetAddGrant() bool {
	if x != nil {
		return x.AddGrant
	}
	return false
}

func (x *ResourcePermissions) GetCreateContainer() bool {
	if x != nil {
		return x.CreateContainer
	}
	return false
}

func (x *ResourcePermissions) GetDelete() bool {
	if x != nil {
		return x.Delete
	}
	return false
}

func (x *ResourcePermissions) GetGetPath() bool {
	if x != nil {
		return x.GetPath
	}
	return false
}

func (x *ResourcePermissions) GetGetQuota() bool {
	if x != nil {
		return x.GetQuota
	}
	return false
}

func (x *ResourcePermissions) GetInitiateFileDownload() bool {
	if x != nil {
		return x.InitiateFileDownload
	}
	return false
}

func (x *ResourcePermissions) GetInitiateFileUpload() bool {
	if x != nil {
		return x.InitiateFileUpload
	}
	return false
}

func (x *ResourcePermissions) GetListGrants() bool {
	if x != nil {
		return x.ListGrants
	}
	return false
}

func (x *ResourcePermissions) GetListContainer() bool {
	if x != nil {
		return x.ListContainer
	}
	return false
}

func (x *ResourcePermissions) GetListFileVersions() bool {
	if x != nil {
		return x.ListFileVersions
	}
	return false
}

func (x *ResourcePermissions) GetListRecycle() bool {
	if x != nil {
		return x.ListRecycle
	}
	return false
}

func (x *ResourcePermissions) GetMove() bool {
	if x != nil {
		return x.Move
	}
	return false
}

func (x *ResourcePermissions) GetRemoveGrant() bool {
	if x != nil {
		return x.RemoveGrant
	}
	return false
}

func (x *ResourcePermissions) GetPurgeRecycle() bool {
	if x != nil {
		return x.PurgeRecycle
	}
	return false
}

func (x *ResourcePermissions) GetRestoreFileVersion() bool {
	if x != nil {
		return x.RestoreFileVersion
	}
	return false
}

func (x *ResourcePermissions) GetRestoreRecycleItem() bool {
	if x != nil {
		return x.RestoreRecycleItem
	}
	return false
}

func (x *ResourcePermissions) GetStat() bool {
	if x != nil {
		return x.Stat
	}
	return false
}

func (x *ResourcePermissions) GetUpdateGrant() bool {
	if x != nil {
		return x.UpdateGrant
	}
	return false
}

// A grant grants permissions
// to a resource to a grantee.
type Grant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// REQUIRED.
	// The grantee of the grant.
	Grantee *Grantee `protobuf:"bytes,1,opt,name=grantee,proto3" json:"grantee,omitempty"`
	// REQUIRED.
	// The permissions for the grant.
	Permissions *ResourcePermissions `protobuf:"bytes,2,opt,name=permissions,proto3" json:"permissions,omitempty"`
}

func (x *Grant) Reset() {
	*x = Grant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cs3_storage_provider_v1beta1_resources_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Grant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Grant) ProtoMessage() {}

func (x *Grant) ProtoReflect() protoreflect.Message {
	mi := &file_cs3_storage_provider_v1beta1_resources_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Grant.ProtoReflect.Descriptor instead.
func (*Grant) Descriptor() ([]byte, []int) {
	return file_cs3_storage_provider_v1beta1_resources_proto_rawDescGZIP(), []int{8}
}

func (x *Grant) GetGrantee() *Grantee {
	if x != nil {
		return x.Grantee
	}
	return nil
}

func (x *Grant) GetPermissions() *ResourcePermissions {
	if x != nil {
		return x.Permissions
	}
	return nil
}

// A grantee is the receiver of a grant.
type Grantee struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// REQUIRED.
	// The type of the grantee.
	Type GranteeType `protobuf:"varint,1,opt,name=type,proto3,enum=cs3.storage.provider.v1beta1.GranteeType" json:"type,omitempty"`
	// The unique id for the grantee.
	// For example, a group name, user name or uuid.
	Id *v1beta11.UserId `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *Grantee) Reset() {
	*x = Grantee{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cs3_storage_provider_v1beta1_resources_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Grantee) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Grantee) ProtoMessage() {}

func (x *Grantee) ProtoReflect() protoreflect.Message {
	mi := &file_cs3_storage_provider_v1beta1_resources_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Grantee.ProtoReflect.Descriptor instead.
func (*Grantee) Descriptor() ([]byte, []int) {
	return file_cs3_storage_provider_v1beta1_resources_proto_rawDescGZIP(), []int{9}
}

func (x *Grantee) GetType() GranteeType {
	if x != nil {
		return x.Type
	}
	return GranteeType_GRANTEE_TYPE_INVALID
}

func (x *Grantee) GetId() *v1beta11.UserId {
	if x != nil {
		return x.Id
	}
	return nil
}

// The information for a file version.
// TODO(labkode): make size and mtime OPTIONAL?
type FileVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// OPTIONAL.
	// Opaque information.
	Opaque *v1beta1.Opaque `protobuf:"bytes,1,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// MUST the specified.
	// The key to identify the version.
	Key string `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	// REQUIRED.
	// The size in bytes of the file version.
	Size uint64 `protobuf:"varint,4,opt,name=size,proto3" json:"size,omitempty"`
	// REQUIRED.
	// The Unix Epoch timestamp in seconds.
	Mtime uint64 `protobuf:"varint,5,opt,name=mtime,proto3" json:"mtime,omitempty"`
}

func (x *FileVersion) Reset() {
	*x = FileVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cs3_storage_provider_v1beta1_resources_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileVersion) ProtoMessage() {}

func (x *FileVersion) ProtoReflect() protoreflect.Message {
	mi := &file_cs3_storage_provider_v1beta1_resources_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileVersion.ProtoReflect.Descriptor instead.
func (*FileVersion) Descriptor() ([]byte, []int) {
	return file_cs3_storage_provider_v1beta1_resources_proto_rawDescGZIP(), []int{10}
}

func (x *FileVersion) GetOpaque() *v1beta1.Opaque {
	if x != nil {
		return x.Opaque
	}
	return nil
}

func (x *FileVersion) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *FileVersion) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *FileVersion) GetMtime() uint64 {
	if x != nil {
		return x.Mtime
	}
	return 0
}

// A recycle item represents the information
// of a deleted resource.
type RecycleItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// OPTIONAL.
	// Opaque information.
	Opaque *v1beta1.Opaque `protobuf:"bytes,1,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// REQUIRED.
	// The type of the resource.
	Type ResourceType `protobuf:"varint,2,opt,name=type,proto3,enum=cs3.storage.provider.v1beta1.ResourceType" json:"type,omitempty"`
	// REQUIRED.
	// The key to identify the deleted resource.
	Key string `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	// REQUIRED.
	// The original path of the deleted resource.
	Path string `protobuf:"bytes,4,opt,name=path,proto3" json:"path,omitempty"`
	// OPTIONAL.
	// The size of the deleted resource.
	Size uint64 `protobuf:"varint,5,opt,name=size,proto3" json:"size,omitempty"`
	// REQUIRED.
	// The deletion time of the resource
	// in Unix Epoch timestamp in seconds.
	DeletionTime *v1beta1.Timestamp `protobuf:"bytes,6,opt,name=deletion_time,json=deletionTime,proto3" json:"deletion_time,omitempty"`
}

func (x *RecycleItem) Reset() {
	*x = RecycleItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cs3_storage_provider_v1beta1_resources_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecycleItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecycleItem) ProtoMessage() {}

func (x *RecycleItem) ProtoReflect() protoreflect.Message {
	mi := &file_cs3_storage_provider_v1beta1_resources_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecycleItem.ProtoReflect.Descriptor instead.
func (*RecycleItem) Descriptor() ([]byte, []int) {
	return file_cs3_storage_provider_v1beta1_resources_proto_rawDescGZIP(), []int{11}
}

func (x *RecycleItem) GetOpaque() *v1beta1.Opaque {
	if x != nil {
		return x.Opaque
	}
	return nil
}

func (x *RecycleItem) GetType() ResourceType {
	if x != nil {
		return x.Type
	}
	return ResourceType_RESOURCE_TYPE_INVALID
}

func (x *RecycleItem) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *RecycleItem) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *RecycleItem) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *RecycleItem) GetDeletionTime() *v1beta1.Timestamp {
	if x != nil {
		return x.DeletionTime
	}
	return nil
}

var File_cs3_storage_provider_v1beta1_resources_proto protoreflect.FileDescriptor

var file_cs3_storage_provider_v1beta1_resources_proto_rawDesc = []byte{
	0x0a, 0x2c, 0x63, 0x73, 0x33, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1c,
	0x63, 0x73, 0x33, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x1a, 0x29, 0x63, 0x73,
	0x33, 0x2f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x63, 0x73, 0x33, 0x2f, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xff, 0x05, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x31, 0x0a, 0x06, 0x6f, 0x70, 0x61, 0x71, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4f, 0x70, 0x61, 0x71,
	0x75, 0x65, 0x52, 0x06, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x12, 0x3e, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x4a, 0x0a, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x52, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d,
	0x12, 0x12, 0x0a, 0x04, 0x65, 0x74, 0x61, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x65, 0x74, 0x61, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x32, 0x0a, 0x05, 0x6d, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05,
	0x6d, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x58, 0x0a, 0x0e, 0x70, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x31, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0d, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x37, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x5e, 0x0a, 0x12, 0x63, 0x61, 0x6e, 0x6f,
	0x6e, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x43, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x11, 0x63, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x5e, 0x0a, 0x12, 0x61, 0x72, 0x62, 0x69,
	0x74, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x41, 0x72, 0x62, 0x69, 0x74, 0x72, 0x61, 0x72, 0x79, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x11, 0x61, 0x72, 0x62, 0x69, 0x74, 0x72, 0x61, 0x72, 0x79,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x54, 0x0a, 0x11, 0x43, 0x61, 0x6e, 0x6f,
	0x6e, 0x69, 0x63, 0x61, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3f, 0x0a,
	0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x63, 0x73, 0x33, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0xab,
	0x01, 0x0a, 0x11, 0x41, 0x72, 0x62, 0x69, 0x74, 0x72, 0x61, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x59, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x41, 0x72, 0x62, 0x69, 0x74, 0x72, 0x61, 0x72, 0x79, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a,
	0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x6c, 0x0a, 0x10,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d,
	0x12, 0x46, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32,
	0x2e, 0x63, 0x73, 0x33, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x75, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x75, 0x6d, 0x22, 0x7e, 0x0a, 0x18, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x50, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x46, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x73, 0x75, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x22, 0x65, 0x0a, 0x09, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x3a, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x73, 0x33, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x49, 0x64, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x42, 0x06, 0x0a, 0x04, 0x73, 0x70, 0x65,
	0x63, 0x22, 0x48, 0x0a, 0x0a, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x49, 0x64, 0x22, 0xa5, 0x05, 0x0a, 0x13,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x5f, 0x67, 0x72, 0x61, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61, 0x64, 0x64, 0x47, 0x72, 0x61, 0x6e, 0x74,
	0x12, 0x29, 0x0a, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x67, 0x65, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1b,
	0x0a, 0x09, 0x67, 0x65, 0x74, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x67, 0x65, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x34, 0x0a, 0x16, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x64, 0x6f, 0x77,
	0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x12, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x67, 0x72, 0x61, 0x6e,
	0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6c, 0x69, 0x73, 0x74, 0x47, 0x72,
	0x61, 0x6e, 0x74, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6c, 0x69,
	0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x6c,
	0x69, 0x73, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x6c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c,
	0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x69, 0x73,
	0x74, 0x5f, 0x72, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6d, 0x6f, 0x76, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6d, 0x6f, 0x76, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x67, 0x72, 0x61, 0x6e, 0x74,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x47, 0x72,
	0x61, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x75, 0x72, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x63,
	0x79, 0x63, 0x6c, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x70, 0x75, 0x72, 0x67,
	0x65, 0x52, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x46,
	0x69, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x5f, 0x69, 0x74,
	0x65, 0x6d, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x52, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x74, 0x61, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x73, 0x74, 0x61, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x67, 0x72, 0x61, 0x6e, 0x74,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72,
	0x61, 0x6e, 0x74, 0x22, 0x9d, 0x01, 0x0a, 0x05, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x12, 0x3f, 0x0a,
	0x07, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x63, 0x73, 0x33, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x47, 0x72,
	0x61, 0x6e, 0x74, 0x65, 0x65, 0x52, 0x07, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x12, 0x53,
	0x0a, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x22, 0x7b, 0x0a, 0x07, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x12, 0x3d,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x63,
	0x73, 0x33, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x47, 0x72, 0x61, 0x6e,
	0x74, 0x65, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x73, 0x33, 0x2e,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x7c, 0x0a, 0x0b, 0x46, 0x69, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x31, 0x0a, 0x06, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x52, 0x06, 0x6f, 0x70, 0x61, 0x71,
	0x75, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6d, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xfd,
	0x01, 0x0a, 0x0b, 0x52, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x31,
	0x0a, 0x06, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x63, 0x73, 0x33, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x52, 0x06, 0x6f, 0x70, 0x61, 0x71, 0x75,
	0x65, 0x12, 0x3e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2a, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x41, 0x0a, 0x0d, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0c, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x2a, 0xb2,
	0x01, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x19, 0x0a, 0x15, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x45,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x49, 0x4c, 0x45,
	0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x45, 0x52, 0x10, 0x02, 0x12,
	0x1b, 0x0a, 0x17, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15,
	0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x59,
	0x4d, 0x4c, 0x49, 0x4e, 0x4b, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x45, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41,
	0x4c, 0x10, 0x05, 0x2a, 0xc1, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x1e,
	0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x53, 0x55,
	0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00,
	0x12, 0x20, 0x0a, 0x1c, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x48, 0x45,
	0x43, 0x4b, 0x53, 0x55, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54,
	0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x43,
	0x48, 0x45, 0x43, 0x4b, 0x53, 0x55, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x44, 0x4c,
	0x45, 0x52, 0x33, 0x32, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x53, 0x55, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4d, 0x44, 0x35, 0x10, 0x03, 0x12, 0x1f, 0x0a, 0x1b, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x53, 0x55, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x53, 0x48, 0x41, 0x31, 0x10, 0x04, 0x2a, 0x56, 0x0a, 0x0b, 0x47, 0x72, 0x61, 0x6e, 0x74,
	0x65, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x47, 0x52, 0x41, 0x4e, 0x54, 0x45,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00,
	0x12, 0x15, 0x0a, 0x11, 0x47, 0x52, 0x41, 0x4e, 0x54, 0x45, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x47, 0x52, 0x41, 0x4e, 0x54,
	0x45, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x02, 0x42,
	0x89, 0x01, 0x0a, 0x20, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x42, 0x0e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x0f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0xa2, 0x02, 0x03, 0x43, 0x53, 0x50, 0xaa, 0x02, 0x1c,
	0x43, 0x73, 0x33, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x2e, 0x56, 0x31, 0x42, 0x65, 0x74, 0x61, 0x31, 0xca, 0x02, 0x1c, 0x43,
	0x73, 0x33, 0x5c, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5c, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x5c, 0x56, 0x31, 0x42, 0x65, 0x74, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_cs3_storage_provider_v1beta1_resources_proto_rawDescOnce sync.Once
	file_cs3_storage_provider_v1beta1_resources_proto_rawDescData = file_cs3_storage_provider_v1beta1_resources_proto_rawDesc
)

func file_cs3_storage_provider_v1beta1_resources_proto_rawDescGZIP() []byte {
	file_cs3_storage_provider_v1beta1_resources_proto_rawDescOnce.Do(func() {
		file_cs3_storage_provider_v1beta1_resources_proto_rawDescData = protoimpl.X.CompressGZIP(file_cs3_storage_provider_v1beta1_resources_proto_rawDescData)
	})
	return file_cs3_storage_provider_v1beta1_resources_proto_rawDescData
}

var file_cs3_storage_provider_v1beta1_resources_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_cs3_storage_provider_v1beta1_resources_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_cs3_storage_provider_v1beta1_resources_proto_goTypes = []interface{}{
	(ResourceType)(0),                // 0: cs3.storage.provider.v1beta1.ResourceType
	(ResourceChecksumType)(0),        // 1: cs3.storage.provider.v1beta1.ResourceChecksumType
	(GranteeType)(0),                 // 2: cs3.storage.provider.v1beta1.GranteeType
	(*ResourceInfo)(nil),             // 3: cs3.storage.provider.v1beta1.ResourceInfo
	(*CanonicalMetadata)(nil),        // 4: cs3.storage.provider.v1beta1.CanonicalMetadata
	(*ArbitraryMetadata)(nil),        // 5: cs3.storage.provider.v1beta1.ArbitraryMetadata
	(*ResourceChecksum)(nil),         // 6: cs3.storage.provider.v1beta1.ResourceChecksum
	(*ResourceChecksumPriority)(nil), // 7: cs3.storage.provider.v1beta1.ResourceChecksumPriority
	(*Reference)(nil),                // 8: cs3.storage.provider.v1beta1.Reference
	(*ResourceId)(nil),               // 9: cs3.storage.provider.v1beta1.ResourceId
	(*ResourcePermissions)(nil),      // 10: cs3.storage.provider.v1beta1.ResourcePermissions
	(*Grant)(nil),                    // 11: cs3.storage.provider.v1beta1.Grant
	(*Grantee)(nil),                  // 12: cs3.storage.provider.v1beta1.Grantee
	(*FileVersion)(nil),              // 13: cs3.storage.provider.v1beta1.FileVersion
	(*RecycleItem)(nil),              // 14: cs3.storage.provider.v1beta1.RecycleItem
	nil,                              // 15: cs3.storage.provider.v1beta1.ArbitraryMetadata.MetadataEntry
	(*v1beta1.Opaque)(nil),           // 16: cs3.types.v1beta1.Opaque
	(*v1beta1.Timestamp)(nil),        // 17: cs3.types.v1beta1.Timestamp
	(*v1beta11.UserId)(nil),          // 18: cs3.identity.user.v1beta1.UserId
}
var file_cs3_storage_provider_v1beta1_resources_proto_depIdxs = []int32{
	16, // 0: cs3.storage.provider.v1beta1.ResourceInfo.opaque:type_name -> cs3.types.v1beta1.Opaque
	0,  // 1: cs3.storage.provider.v1beta1.ResourceInfo.type:type_name -> cs3.storage.provider.v1beta1.ResourceType
	9,  // 2: cs3.storage.provider.v1beta1.ResourceInfo.id:type_name -> cs3.storage.provider.v1beta1.ResourceId
	6,  // 3: cs3.storage.provider.v1beta1.ResourceInfo.checksum:type_name -> cs3.storage.provider.v1beta1.ResourceChecksum
	17, // 4: cs3.storage.provider.v1beta1.ResourceInfo.mtime:type_name -> cs3.types.v1beta1.Timestamp
	10, // 5: cs3.storage.provider.v1beta1.ResourceInfo.permission_set:type_name -> cs3.storage.provider.v1beta1.ResourcePermissions
	18, // 6: cs3.storage.provider.v1beta1.ResourceInfo.owner:type_name -> cs3.identity.user.v1beta1.UserId
	4,  // 7: cs3.storage.provider.v1beta1.ResourceInfo.canonical_metadata:type_name -> cs3.storage.provider.v1beta1.CanonicalMetadata
	5,  // 8: cs3.storage.provider.v1beta1.ResourceInfo.arbitrary_metadata:type_name -> cs3.storage.provider.v1beta1.ArbitraryMetadata
	8,  // 9: cs3.storage.provider.v1beta1.CanonicalMetadata.target:type_name -> cs3.storage.provider.v1beta1.Reference
	15, // 10: cs3.storage.provider.v1beta1.ArbitraryMetadata.metadata:type_name -> cs3.storage.provider.v1beta1.ArbitraryMetadata.MetadataEntry
	1,  // 11: cs3.storage.provider.v1beta1.ResourceChecksum.type:type_name -> cs3.storage.provider.v1beta1.ResourceChecksumType
	1,  // 12: cs3.storage.provider.v1beta1.ResourceChecksumPriority.type:type_name -> cs3.storage.provider.v1beta1.ResourceChecksumType
	9,  // 13: cs3.storage.provider.v1beta1.Reference.id:type_name -> cs3.storage.provider.v1beta1.ResourceId
	12, // 14: cs3.storage.provider.v1beta1.Grant.grantee:type_name -> cs3.storage.provider.v1beta1.Grantee
	10, // 15: cs3.storage.provider.v1beta1.Grant.permissions:type_name -> cs3.storage.provider.v1beta1.ResourcePermissions
	2,  // 16: cs3.storage.provider.v1beta1.Grantee.type:type_name -> cs3.storage.provider.v1beta1.GranteeType
	18, // 17: cs3.storage.provider.v1beta1.Grantee.id:type_name -> cs3.identity.user.v1beta1.UserId
	16, // 18: cs3.storage.provider.v1beta1.FileVersion.opaque:type_name -> cs3.types.v1beta1.Opaque
	16, // 19: cs3.storage.provider.v1beta1.RecycleItem.opaque:type_name -> cs3.types.v1beta1.Opaque
	0,  // 20: cs3.storage.provider.v1beta1.RecycleItem.type:type_name -> cs3.storage.provider.v1beta1.ResourceType
	17, // 21: cs3.storage.provider.v1beta1.RecycleItem.deletion_time:type_name -> cs3.types.v1beta1.Timestamp
	22, // [22:22] is the sub-list for method output_type
	22, // [22:22] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_cs3_storage_provider_v1beta1_resources_proto_init() }
func file_cs3_storage_provider_v1beta1_resources_proto_init() {
	if File_cs3_storage_provider_v1beta1_resources_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cs3_storage_provider_v1beta1_resources_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cs3_storage_provider_v1beta1_resources_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CanonicalMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cs3_storage_provider_v1beta1_resources_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArbitraryMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cs3_storage_provider_v1beta1_resources_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceChecksum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cs3_storage_provider_v1beta1_resources_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceChecksumPriority); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cs3_storage_provider_v1beta1_resources_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Reference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cs3_storage_provider_v1beta1_resources_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cs3_storage_provider_v1beta1_resources_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourcePermissions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cs3_storage_provider_v1beta1_resources_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Grant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cs3_storage_provider_v1beta1_resources_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Grantee); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cs3_storage_provider_v1beta1_resources_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cs3_storage_provider_v1beta1_resources_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecycleItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_cs3_storage_provider_v1beta1_resources_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*Reference_Path)(nil),
		(*Reference_Id)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cs3_storage_provider_v1beta1_resources_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cs3_storage_provider_v1beta1_resources_proto_goTypes,
		DependencyIndexes: file_cs3_storage_provider_v1beta1_resources_proto_depIdxs,
		EnumInfos:         file_cs3_storage_provider_v1beta1_resources_proto_enumTypes,
		MessageInfos:      file_cs3_storage_provider_v1beta1_resources_proto_msgTypes,
	}.Build()
	File_cs3_storage_provider_v1beta1_resources_proto = out.File
	file_cs3_storage_provider_v1beta1_resources_proto_rawDesc = nil
	file_cs3_storage_provider_v1beta1_resources_proto_goTypes = nil
	file_cs3_storage_provider_v1beta1_resources_proto_depIdxs = nil
}
