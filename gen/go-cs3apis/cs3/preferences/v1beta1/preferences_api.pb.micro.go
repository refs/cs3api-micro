// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: cs3/preferences/v1beta1/preferences_api.proto

package preferencesv1beta1

import (
	fmt "fmt"
	_ "github.com/cs3org/go-cs3apis/build/go-cs3apis/cs3/rpc/v1beta1"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for PreferencesAPI service

type PreferencesAPIService interface {
	// Maps the key-value pair.
	SetKey(ctx context.Context, in *SetKeyRequest, opts ...client.CallOption) (*SetKeyResponse, error)
	// Returns the value associated with the
	// requested key.
	GetKey(ctx context.Context, in *GetKeyRequest, opts ...client.CallOption) (*GetKeyResponse, error)
}

type preferencesAPIService struct {
	c    client.Client
	name string
}

func NewPreferencesAPIService(name string, c client.Client) PreferencesAPIService {
	return &preferencesAPIService{
		c:    c,
		name: name,
	}
}

func (c *preferencesAPIService) SetKey(ctx context.Context, in *SetKeyRequest, opts ...client.CallOption) (*SetKeyResponse, error) {
	req := c.c.NewRequest(c.name, "PreferencesAPI.SetKey", in)
	out := new(SetKeyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *preferencesAPIService) GetKey(ctx context.Context, in *GetKeyRequest, opts ...client.CallOption) (*GetKeyResponse, error) {
	req := c.c.NewRequest(c.name, "PreferencesAPI.GetKey", in)
	out := new(GetKeyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PreferencesAPI service

type PreferencesAPIHandler interface {
	// Maps the key-value pair.
	SetKey(context.Context, *SetKeyRequest, *SetKeyResponse) error
	// Returns the value associated with the
	// requested key.
	GetKey(context.Context, *GetKeyRequest, *GetKeyResponse) error
}

func RegisterPreferencesAPIHandler(s server.Server, hdlr PreferencesAPIHandler, opts ...server.HandlerOption) error {
	type preferencesAPI interface {
		SetKey(ctx context.Context, in *SetKeyRequest, out *SetKeyResponse) error
		GetKey(ctx context.Context, in *GetKeyRequest, out *GetKeyResponse) error
	}
	type PreferencesAPI struct {
		preferencesAPI
	}
	h := &preferencesAPIHandler{hdlr}
	return s.Handle(s.NewHandler(&PreferencesAPI{h}, opts...))
}

type preferencesAPIHandler struct {
	PreferencesAPIHandler
}

func (h *preferencesAPIHandler) SetKey(ctx context.Context, in *SetKeyRequest, out *SetKeyResponse) error {
	return h.PreferencesAPIHandler.SetKey(ctx, in, out)
}

func (h *preferencesAPIHandler) GetKey(ctx context.Context, in *GetKeyRequest, out *GetKeyResponse) error {
	return h.PreferencesAPIHandler.GetKey(ctx, in, out)
}
