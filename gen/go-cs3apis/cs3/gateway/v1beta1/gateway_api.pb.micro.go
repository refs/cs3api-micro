// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: cs3/gateway/v1beta1/gateway_api.proto

package gatewayv1beta1

import (
	fmt "fmt"
	v1beta15 "github.com/cs3org/go-cs3apis/build/go-cs3apis/cs3/app/registry/v1beta1"
	v1beta17 "github.com/cs3org/go-cs3apis/build/go-cs3apis/cs3/auth/registry/v1beta1"
	v1beta16 "github.com/cs3org/go-cs3apis/build/go-cs3apis/cs3/identity/user/v1beta1"
	v1beta110 "github.com/cs3org/go-cs3apis/build/go-cs3apis/cs3/ocm/core/v1beta1"
	v1beta18 "github.com/cs3org/go-cs3apis/build/go-cs3apis/cs3/ocm/invite/v1beta1"
	v1beta19 "github.com/cs3org/go-cs3apis/build/go-cs3apis/cs3/ocm/provider/v1beta1"
	v1beta12 "github.com/cs3org/go-cs3apis/build/go-cs3apis/cs3/preferences/v1beta1"
	_ "github.com/cs3org/go-cs3apis/build/go-cs3apis/cs3/rpc/v1beta1"
	v1beta11 "github.com/cs3org/go-cs3apis/build/go-cs3apis/cs3/sharing/collaboration/v1beta1"
	v1beta13 "github.com/cs3org/go-cs3apis/build/go-cs3apis/cs3/sharing/link/v1beta1"
	v1beta14 "github.com/cs3org/go-cs3apis/build/go-cs3apis/cs3/sharing/ocm/v1beta1"
	v1beta1 "github.com/cs3org/go-cs3apis/build/go-cs3apis/cs3/storage/provider/v1beta1"
	_ "github.com/cs3org/go-cs3apis/build/go-cs3apis/cs3/types/v1beta1"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for GatewayAPI service

type GatewayAPIService interface {
	// Authenticates a user.
	Authenticate(ctx context.Context, in *AuthenticateRequest, opts ...client.CallOption) (*AuthenticateResponse, error)
	// WhoAmI returns the information for a user.
	WhoAmI(ctx context.Context, in *WhoAmIRequest, opts ...client.CallOption) (*WhoAmIResponse, error)
	// Creates a new resource of type container.
	// MUST return CODE_PRECONDITION_FAILED if the container
	// cannot be created at the specified reference.
	CreateContainer(ctx context.Context, in *v1beta1.CreateContainerRequest, opts ...client.CallOption) (*v1beta1.CreateContainerResponse, error)
	// Deletes a resource.
	// If a resource specifies the non-empty container (directory, ...),
	// then the entire directory is deleted recursively.
	// If a resource specifies a reference or symlink type, only the reference is removed (not the target).
	// MUST return CODE_NOT_FOUND if the reference does not exist.
	Delete(ctx context.Context, in *v1beta1.DeleteRequest, opts ...client.CallOption) (*v1beta1.DeleteResponse, error)
	// Returns the path reference for
	// the provided resource id reference.
	// MUST return CODE_NOT_FOUND if the reference does not exist
	GetPath(ctx context.Context, in *v1beta1.GetPathRequest, opts ...client.CallOption) (*v1beta1.GetPathResponse, error)
	// Returns the quota available under the provided
	// reference.
	// MUST return CODE_NOT_FOUND if the reference does not exist
	// MUST return CODE_RESOURCE_EXHAUSTED on exceeded quota limits.
	GetQuota(ctx context.Context, in *GetQuotaRequest, opts ...client.CallOption) (*v1beta1.GetQuotaResponse, error)
	// Initiates the download of a file using an
	// out-of-band data transfer mechanism.
	InitiateFileDownload(ctx context.Context, in *v1beta1.InitiateFileDownloadRequest, opts ...client.CallOption) (*InitiateFileDownloadResponse, error)
	// Initiates the upload of a file using an
	// out-of-band data transfer mechanism.
	InitiateFileUpload(ctx context.Context, in *v1beta1.InitiateFileUploadRequest, opts ...client.CallOption) (*InitiateFileUploadResponse, error)
	// Returns a stream of resource informations
	// for the provided reference.
	// MUST return CODE_NOT_FOUND if the reference does not exists.
	ListContainerStream(ctx context.Context, in *v1beta1.ListContainerStreamRequest, opts ...client.CallOption) (GatewayAPI_ListContainerStreamService, error)
	// Returns a list of resource information
	// for the provided reference.
	// MUST return CODE_NOT_FOUND if the reference does not exists.
	ListContainer(ctx context.Context, in *v1beta1.ListContainerRequest, opts ...client.CallOption) (*v1beta1.ListContainerResponse, error)
	// Returns a list of the versions for a resource of
	// type file at the provided reference.
	// MUST return CODE_NOT_FOUND if the reference does not exist.
	// MUST return CODE_OK and MUST return an empty list if no versions are available.
	// TODO: What code if resource not of type file?
	ListFileVersions(ctx context.Context, in *v1beta1.ListFileVersionsRequest, opts ...client.CallOption) (*v1beta1.ListFileVersionsResponse, error)
	// Returns a stream of recycle items for this storage provider.
	ListRecycleStream(ctx context.Context, in *ListRecycleStreamRequest, opts ...client.CallOption) (GatewayAPI_ListRecycleStreamService, error)
	// Returns a list of recycle items for this storage provider.
	// MUST return CODE_OK and MUST return an empty list if no recycle items are available.
	ListRecycle(ctx context.Context, in *ListRecycleRequest, opts ...client.CallOption) (*v1beta1.ListRecycleResponse, error)
	// Moves a resource from one reference to another.
	// MUST return CODE_NOT_FOUND if any of the references do not exist.
	// MUST return CODE_PRECONDITION_FAILED if the source reference
	// cannot be moved to the destination reference.
	Move(ctx context.Context, in *v1beta1.MoveRequest, opts ...client.CallOption) (*v1beta1.MoveResponse, error)
	// Permanently removes a recycle item from the recycle.
	// This operation is irrevocable.
	// MUST return CODE_NOT_FOUND if the recycle item id does not exist.
	PurgeRecycle(ctx context.Context, in *PurgeRecycleRequest, opts ...client.CallOption) (*v1beta1.PurgeRecycleResponse, error)
	// Restores a file version for the provided reference.
	// MUST return CODE_NOT_FOUND if the reference does not exist.
	// MUST return CODE_NOT_FOUND if the version does not exist.
	RestoreFileVersion(ctx context.Context, in *v1beta1.RestoreFileVersionRequest, opts ...client.CallOption) (*v1beta1.RestoreFileVersionResponse, error)
	// Restores a recycle item from the recycle.
	// MUST return CODE_NOT_FOUND if the recycle item id does not exist.
	// MUST return CODE_PRECONDITION_FAILED if the restore_path is non-empty
	// and the recycle item cannot be restored to the restore_path.
	RestoreRecycleItem(ctx context.Context, in *v1beta1.RestoreRecycleItemRequest, opts ...client.CallOption) (*v1beta1.RestoreRecycleItemResponse, error)
	// Returns the resource information at the provided reference.
	// MUST return CODE_NOT_FOUND if the reference does not exist.
	Stat(ctx context.Context, in *v1beta1.StatRequest, opts ...client.CallOption) (*v1beta1.StatResponse, error)
	// Sets arbitrary metadata into a storage resource.
	// Arbitrary metadata is returned in a cs3.storage.provider.v1beta1.ResourceInfo.
	SetArbitraryMetadata(ctx context.Context, in *v1beta1.SetArbitraryMetadataRequest, opts ...client.CallOption) (*v1beta1.SetArbitraryMetadataResponse, error)
	// Unsets arbitrary metdata into a storage resource.
	// Arbitrary metadata is returned in a cs3.storage.provider.v1beta1.ResourceInfo.
	UnsetArbitraryMetadata(ctx context.Context, in *v1beta1.UnsetArbitraryMetadataRequest, opts ...client.CallOption) (*v1beta1.UnsetArbitraryMetadataResponse, error)
	// Creates the home directory for a user.
	CreateHome(ctx context.Context, in *v1beta1.CreateHomeRequest, opts ...client.CallOption) (*v1beta1.CreateHomeResponse, error)
	// Creates a new share.
	// MUST return CODE_NOT_FOUND if the resource reference does not exist.
	// MUST return CODE_ALREADY_EXISTS if the share already exists for the 4-tuple consisting of
	// (owner, shared_resource, grantee).
	// New shares MUST be created in the state SHARE_STATE_PENDING.
	CreateShare(ctx context.Context, in *v1beta11.CreateShareRequest, opts ...client.CallOption) (*v1beta11.CreateShareResponse, error)
	// Removes a share.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	RemoveShare(ctx context.Context, in *v1beta11.RemoveShareRequest, opts ...client.CallOption) (*v1beta11.RemoveShareResponse, error)
	// Gets share information for a single share.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	GetShare(ctx context.Context, in *v1beta11.GetShareRequest, opts ...client.CallOption) (*v1beta11.GetShareResponse, error)
	// List the shares the authproviderenticated principal has created,
	// both as owner and creator. If a filter is specified, only
	// shares satisfying the filter MUST be returned.
	ListShares(ctx context.Context, in *v1beta11.ListSharesRequest, opts ...client.CallOption) (*v1beta11.ListSharesResponse, error)
	// Updates a share.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	UpdateShare(ctx context.Context, in *v1beta11.UpdateShareRequest, opts ...client.CallOption) (*v1beta11.UpdateShareResponse, error)
	// List all shares the authproviderenticated principal has received.
	ListReceivedShares(ctx context.Context, in *v1beta11.ListReceivedSharesRequest, opts ...client.CallOption) (*v1beta11.ListReceivedSharesResponse, error)
	// Update the received share to change the share state or the display name.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	UpdateReceivedShare(ctx context.Context, in *v1beta11.UpdateReceivedShareRequest, opts ...client.CallOption) (*v1beta11.UpdateReceivedShareResponse, error)
	// Get the information for the given received share reference.
	// MUST return CODE_NOT_FOUND if the received share reference does not exist.
	GetReceivedShare(ctx context.Context, in *v1beta11.GetReceivedShareRequest, opts ...client.CallOption) (*v1beta11.GetReceivedShareResponse, error)
	// Maps the key-value pair.
	SetKey(ctx context.Context, in *v1beta12.SetKeyRequest, opts ...client.CallOption) (*v1beta12.SetKeyResponse, error)
	// Returns the value associated with the
	// requested key.
	GetKey(ctx context.Context, in *v1beta12.GetKeyRequest, opts ...client.CallOption) (*v1beta12.GetKeyResponse, error)
	// Creates a new share.
	// MUST return CODE_NOT_FOUND if the resource reference does not exist.
	// MUST return CODE_ALREADY_EXISTS if the share already exists for the 4-tuple consisting of
	// (owner, shared_resource, grantee).
	// New shares MUST be created in the state SHARE_STATE_PENDING.
	CreatePublicShare(ctx context.Context, in *v1beta13.CreatePublicShareRequest, opts ...client.CallOption) (*v1beta13.CreatePublicShareResponse, error)
	// Removes a share.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	RemovePublicShare(ctx context.Context, in *v1beta13.RemovePublicShareRequest, opts ...client.CallOption) (*v1beta13.RemovePublicShareResponse, error)
	// Gets share information for a single share.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	GetPublicShare(ctx context.Context, in *v1beta13.GetPublicShareRequest, opts ...client.CallOption) (*v1beta13.GetPublicShareResponse, error)
	// Gets share information for a single share by its unlisted token.
	// MUST return CODE_NOT_FOUND if the share does not exist.
	GetPublicShareByToken(ctx context.Context, in *v1beta13.GetPublicShareByTokenRequest, opts ...client.CallOption) (*v1beta13.GetPublicShareByTokenResponse, error)
	// List the shares the authproviderenticated principal has created,
	// both as owner and creator. If a filter is specified, only
	// shares satisfying the filter MUST be returned.
	ListPublicShares(ctx context.Context, in *v1beta13.ListPublicSharesRequest, opts ...client.CallOption) (*v1beta13.ListPublicSharesResponse, error)
	// Updates a share.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	UpdatePublicShare(ctx context.Context, in *v1beta13.UpdatePublicShareRequest, opts ...client.CallOption) (*v1beta13.UpdatePublicShareResponse, error)
	// Creates a new ocm share.
	// MUST return CODE_NOT_FOUND if the resource reference does not exist.
	// MUST return CODE_ALREADY_EXISTS if the share already exists for the 4-tuple consisting of
	// (owner, shared_resource, grantee).
	// New shares MUST be created in the state SHARE_STATE_PENDING.
	CreateOCMShare(ctx context.Context, in *v1beta14.CreateOCMShareRequest, opts ...client.CallOption) (*v1beta14.CreateOCMShareResponse, error)
	// Removes a share.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	RemoveOCMShare(ctx context.Context, in *v1beta14.RemoveOCMShareRequest, opts ...client.CallOption) (*v1beta14.RemoveOCMShareResponse, error)
	// Gets share information for a single share.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	GetOCMShare(ctx context.Context, in *v1beta14.GetOCMShareRequest, opts ...client.CallOption) (*v1beta14.GetOCMShareResponse, error)
	// List the shares the authproviderenticated principal has created,
	// both as owner and creator. If a filter is specified, only
	// shares satisfying the filter MUST be returned.
	ListOCMShares(ctx context.Context, in *v1beta14.ListOCMSharesRequest, opts ...client.CallOption) (*v1beta14.ListOCMSharesResponse, error)
	// Updates a share.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	UpdateOCMShare(ctx context.Context, in *v1beta14.UpdateOCMShareRequest, opts ...client.CallOption) (*v1beta14.UpdateOCMShareResponse, error)
	// List all shares the authproviderenticated principal has received.
	ListReceivedOCMShares(ctx context.Context, in *v1beta14.ListReceivedOCMSharesRequest, opts ...client.CallOption) (*v1beta14.ListReceivedOCMSharesResponse, error)
	// Update the received share to change the share state or the display name.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	UpdateReceivedOCMShare(ctx context.Context, in *v1beta14.UpdateReceivedOCMShareRequest, opts ...client.CallOption) (*v1beta14.UpdateReceivedOCMShareResponse, error)
	// Get the information for the given received share reference.
	// MUST return CODE_NOT_FOUND if the received share reference does not exist.
	GetReceivedOCMShare(ctx context.Context, in *v1beta14.GetReceivedOCMShareRequest, opts ...client.CallOption) (*v1beta14.GetReceivedOCMShareResponse, error)
	// Returns the app providers that are capable of handling this resource info.
	// MUST return CODE_NOT_FOUND if no providers are available.
	GetAppProviders(ctx context.Context, in *v1beta15.GetAppProvidersRequest, opts ...client.CallOption) (*v1beta15.GetAppProvidersResponse, error)
	// Returns a list of the available app providers known by this registry.
	ListAppProviders(ctx context.Context, in *v1beta15.ListAppProvidersRequest, opts ...client.CallOption) (*v1beta15.ListAppProvidersResponse, error)
	// Gets the information about an user by its user id.
	GetUser(ctx context.Context, in *v1beta16.GetUserRequest, opts ...client.CallOption) (*v1beta16.GetUserResponse, error)
	// Gets the groups of a user.
	GetUserGroups(ctx context.Context, in *v1beta16.GetUserGroupsRequest, opts ...client.CallOption) (*v1beta16.GetUserGroupsResponse, error)
	// Tells if the user is in a certain group.
	IsInGroup(ctx context.Context, in *v1beta16.IsInGroupRequest, opts ...client.CallOption) (*v1beta16.IsInGroupResponse, error)
	// Finds users by any attribute of the user?
	// TODO(labkode): to define the filters that make more sense.
	FindUsers(ctx context.Context, in *v1beta16.FindUsersRequest, opts ...client.CallOption) (*v1beta16.FindUsersResponse, error)
	// Returns a list of the available auth providers known by this registry.
	ListAuthProviders(ctx context.Context, in *v1beta17.ListAuthProvidersRequest, opts ...client.CallOption) (*ListAuthProvidersResponse, error)
	// Returns the home path for the given authenticated user.
	// When a user has access to multiple storage providers, one of them is the home.
	GetHome(ctx context.Context, in *v1beta1.GetHomeRequest, opts ...client.CallOption) (*v1beta1.GetHomeResponse, error)
	// Generates a new token for the user with a validity of 24 hours.
	GenerateInviteToken(ctx context.Context, in *v1beta18.GenerateInviteTokenRequest, opts ...client.CallOption) (*v1beta18.GenerateInviteTokenResponse, error)
	// Forwards a received invite to the sync'n'share system provider.
	ForwardInvite(ctx context.Context, in *v1beta18.ForwardInviteRequest, opts ...client.CallOption) (*v1beta18.ForwardInviteResponse, error)
	// Completes an invitation acceptance.
	AcceptInvite(ctx context.Context, in *v1beta18.AcceptInviteRequest, opts ...client.CallOption) (*v1beta18.AcceptInviteResponse, error)
	// Retrieves details about a remote user who has accepted an invite to share.
	GetRemoteUser(ctx context.Context, in *v1beta18.GetRemoteUserRequest, opts ...client.CallOption) (*v1beta18.GetRemoteUserResponse, error)
	// Check if a given system provider is registered in the mesh or not.
	// MUST return CODE_UNAUTHENTICATED if the system is not registered
	IsProviderAllowed(ctx context.Context, in *v1beta19.IsProviderAllowedRequest, opts ...client.CallOption) (*v1beta19.IsProviderAllowedResponse, error)
	// Get the information of the provider identified by a specific domain.
	// MUST return CODE_NOT_FOUND if the sync'n'share system provider does not exist.
	GetInfoByDomain(ctx context.Context, in *v1beta19.GetInfoByDomainRequest, opts ...client.CallOption) (*v1beta19.GetInfoByDomainResponse, error)
	// Get the information of all the providers registered in the mesh.
	ListAllProviders(ctx context.Context, in *v1beta19.ListAllProvidersRequest, opts ...client.CallOption) (*v1beta19.ListAllProvidersResponse, error)
	// Creates a new ocm share.
	CreateOCMCoreShare(ctx context.Context, in *v1beta110.CreateOCMCoreShareRequest, opts ...client.CallOption) (*v1beta110.CreateOCMCoreShareResponse, error)
}

type gatewayAPIService struct {
	c    client.Client
	name string
}

func NewGatewayAPIService(name string, c client.Client) GatewayAPIService {
	return &gatewayAPIService{
		c:    c,
		name: name,
	}
}

func (c *gatewayAPIService) Authenticate(ctx context.Context, in *AuthenticateRequest, opts ...client.CallOption) (*AuthenticateResponse, error) {
	req := c.c.NewRequest(c.name, "GatewayAPI.Authenticate", in)
	out := new(AuthenticateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIService) WhoAmI(ctx context.Context, in *WhoAmIRequest, opts ...client.CallOption) (*WhoAmIResponse, error) {
	req := c.c.NewRequest(c.name, "GatewayAPI.WhoAmI", in)
	out := new(WhoAmIResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIService) CreateContainer(ctx context.Context, in *v1beta1.CreateContainerRequest, opts ...client.CallOption) (*v1beta1.CreateContainerResponse, error) {
	req := c.c.NewRequest(c.name, "GatewayAPI.CreateContainer", in)
	out := new(v1beta1.CreateContainerResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIService) Delete(ctx context.Context, in *v1beta1.DeleteRequest, opts ...client.CallOption) (*v1beta1.DeleteResponse, error) {
	req := c.c.NewRequest(c.name, "GatewayAPI.Delete", in)
	out := new(v1beta1.DeleteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIService) GetPath(ctx context.Context, in *v1beta1.GetPathRequest, opts ...client.CallOption) (*v1beta1.GetPathResponse, error) {
	req := c.c.NewRequest(c.name, "GatewayAPI.GetPath", in)
	out := new(v1beta1.GetPathResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIService) GetQuota(ctx context.Context, in *GetQuotaRequest, opts ...client.CallOption) (*v1beta1.GetQuotaResponse, error) {
	req := c.c.NewRequest(c.name, "GatewayAPI.GetQuota", in)
	out := new(v1beta1.GetQuotaResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIService) InitiateFileDownload(ctx context.Context, in *v1beta1.InitiateFileDownloadRequest, opts ...client.CallOption) (*InitiateFileDownloadResponse, error) {
	req := c.c.NewRequest(c.name, "GatewayAPI.InitiateFileDownload", in)
	out := new(InitiateFileDownloadResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIService) InitiateFileUpload(ctx context.Context, in *v1beta1.InitiateFileUploadRequest, opts ...client.CallOption) (*InitiateFileUploadResponse, error) {
	req := c.c.NewRequest(c.name, "GatewayAPI.InitiateFileUpload", in)
	out := new(InitiateFileUploadResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIService) ListContainerStream(ctx context.Context, in *v1beta1.ListContainerStreamRequest, opts ...client.CallOption) (GatewayAPI_ListContainerStreamService, error) {
	req := c.c.NewRequest(c.name, "GatewayAPI.ListContainerStream", &v1beta1.ListContainerStreamRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &gatewayAPIServiceListContainerStream{stream}, nil
}

type GatewayAPI_ListContainerStreamService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*v1beta1.ListContainerStreamResponse, error)
}

type gatewayAPIServiceListContainerStream struct {
	stream client.Stream
}

func (x *gatewayAPIServiceListContainerStream) Close() error {
	return x.stream.Close()
}

func (x *gatewayAPIServiceListContainerStream) Context() context.Context {
	return x.stream.Context()
}

func (x *gatewayAPIServiceListContainerStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *gatewayAPIServiceListContainerStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *gatewayAPIServiceListContainerStream) Recv() (*v1beta1.ListContainerStreamResponse, error) {
	m := new(v1beta1.ListContainerStreamResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gatewayAPIService) ListContainer(ctx context.Context, in *v1beta1.ListContainerRequest, opts ...client.CallOption) (*v1beta1.ListContainerResponse, error) {
	req := c.c.NewRequest(c.name, "GatewayAPI.ListContainer", in)
	out := new(v1beta1.ListContainerResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIService) ListFileVersions(ctx context.Context, in *v1beta1.ListFileVersionsRequest, opts ...client.CallOption) (*v1beta1.ListFileVersionsResponse, error) {
	req := c.c.NewRequest(c.name, "GatewayAPI.ListFileVersions", in)
	out := new(v1beta1.ListFileVersionsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIService) ListRecycleStream(ctx context.Context, in *ListRecycleStreamRequest, opts ...client.CallOption) (GatewayAPI_ListRecycleStreamService, error) {
	req := c.c.NewRequest(c.name, "GatewayAPI.ListRecycleStream", &ListRecycleStreamRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &gatewayAPIServiceListRecycleStream{stream}, nil
}

type GatewayAPI_ListRecycleStreamService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*v1beta1.ListRecycleStreamResponse, error)
}

type gatewayAPIServiceListRecycleStream struct {
	stream client.Stream
}

func (x *gatewayAPIServiceListRecycleStream) Close() error {
	return x.stream.Close()
}

func (x *gatewayAPIServiceListRecycleStream) Context() context.Context {
	return x.stream.Context()
}

func (x *gatewayAPIServiceListRecycleStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *gatewayAPIServiceListRecycleStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *gatewayAPIServiceListRecycleStream) Recv() (*v1beta1.ListRecycleStreamResponse, error) {
	m := new(v1beta1.ListRecycleStreamResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gatewayAPIService) ListRecycle(ctx context.Context, in *ListRecycleRequest, opts ...client.CallOption) (*v1beta1.ListRecycleResponse, error) {
	req := c.c.NewRequest(c.name, "GatewayAPI.ListRecycle", in)
	out := new(v1beta1.ListRecycleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIService) Move(ctx context.Context, in *v1beta1.MoveRequest, opts ...client.CallOption) (*v1beta1.MoveResponse, error) {
	req := c.c.NewRequest(c.name, "GatewayAPI.Move", in)
	out := new(v1beta1.MoveResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIService) PurgeRecycle(ctx context.Context, in *PurgeRecycleRequest, opts ...client.CallOption) (*v1beta1.PurgeRecycleResponse, error) {
	req := c.c.NewRequest(c.name, "GatewayAPI.PurgeRecycle", in)
	out := new(v1beta1.PurgeRecycleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIService) RestoreFileVersion(ctx context.Context, in *v1beta1.RestoreFileVersionRequest, opts ...client.CallOption) (*v1beta1.RestoreFileVersionResponse, error) {
	req := c.c.NewRequest(c.name, "GatewayAPI.RestoreFileVersion", in)
	out := new(v1beta1.RestoreFileVersionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIService) RestoreRecycleItem(ctx context.Context, in *v1beta1.RestoreRecycleItemRequest, opts ...client.CallOption) (*v1beta1.RestoreRecycleItemResponse, error) {
	req := c.c.NewRequest(c.name, "GatewayAPI.RestoreRecycleItem", in)
	out := new(v1beta1.RestoreRecycleItemResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIService) Stat(ctx context.Context, in *v1beta1.StatRequest, opts ...client.CallOption) (*v1beta1.StatResponse, error) {
	req := c.c.NewRequest(c.name, "GatewayAPI.Stat", in)
	out := new(v1beta1.StatResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIService) SetArbitraryMetadata(ctx context.Context, in *v1beta1.SetArbitraryMetadataRequest, opts ...client.CallOption) (*v1beta1.SetArbitraryMetadataResponse, error) {
	req := c.c.NewRequest(c.name, "GatewayAPI.SetArbitraryMetadata", in)
	out := new(v1beta1.SetArbitraryMetadataResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIService) UnsetArbitraryMetadata(ctx context.Context, in *v1beta1.UnsetArbitraryMetadataRequest, opts ...client.CallOption) (*v1beta1.UnsetArbitraryMetadataResponse, error) {
	req := c.c.NewRequest(c.name, "GatewayAPI.UnsetArbitraryMetadata", in)
	out := new(v1beta1.UnsetArbitraryMetadataResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIService) CreateHome(ctx context.Context, in *v1beta1.CreateHomeRequest, opts ...client.CallOption) (*v1beta1.CreateHomeResponse, error) {
	req := c.c.NewRequest(c.name, "GatewayAPI.CreateHome", in)
	out := new(v1beta1.CreateHomeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIService) CreateShare(ctx context.Context, in *v1beta11.CreateShareRequest, opts ...client.CallOption) (*v1beta11.CreateShareResponse, error) {
	req := c.c.NewRequest(c.name, "GatewayAPI.CreateShare", in)
	out := new(v1beta11.CreateShareResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIService) RemoveShare(ctx context.Context, in *v1beta11.RemoveShareRequest, opts ...client.CallOption) (*v1beta11.RemoveShareResponse, error) {
	req := c.c.NewRequest(c.name, "GatewayAPI.RemoveShare", in)
	out := new(v1beta11.RemoveShareResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIService) GetShare(ctx context.Context, in *v1beta11.GetShareRequest, opts ...client.CallOption) (*v1beta11.GetShareResponse, error) {
	req := c.c.NewRequest(c.name, "GatewayAPI.GetShare", in)
	out := new(v1beta11.GetShareResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIService) ListShares(ctx context.Context, in *v1beta11.ListSharesRequest, opts ...client.CallOption) (*v1beta11.ListSharesResponse, error) {
	req := c.c.NewRequest(c.name, "GatewayAPI.ListShares", in)
	out := new(v1beta11.ListSharesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIService) UpdateShare(ctx context.Context, in *v1beta11.UpdateShareRequest, opts ...client.CallOption) (*v1beta11.UpdateShareResponse, error) {
	req := c.c.NewRequest(c.name, "GatewayAPI.UpdateShare", in)
	out := new(v1beta11.UpdateShareResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIService) ListReceivedShares(ctx context.Context, in *v1beta11.ListReceivedSharesRequest, opts ...client.CallOption) (*v1beta11.ListReceivedSharesResponse, error) {
	req := c.c.NewRequest(c.name, "GatewayAPI.ListReceivedShares", in)
	out := new(v1beta11.ListReceivedSharesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIService) UpdateReceivedShare(ctx context.Context, in *v1beta11.UpdateReceivedShareRequest, opts ...client.CallOption) (*v1beta11.UpdateReceivedShareResponse, error) {
	req := c.c.NewRequest(c.name, "GatewayAPI.UpdateReceivedShare", in)
	out := new(v1beta11.UpdateReceivedShareResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIService) GetReceivedShare(ctx context.Context, in *v1beta11.GetReceivedShareRequest, opts ...client.CallOption) (*v1beta11.GetReceivedShareResponse, error) {
	req := c.c.NewRequest(c.name, "GatewayAPI.GetReceivedShare", in)
	out := new(v1beta11.GetReceivedShareResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIService) SetKey(ctx context.Context, in *v1beta12.SetKeyRequest, opts ...client.CallOption) (*v1beta12.SetKeyResponse, error) {
	req := c.c.NewRequest(c.name, "GatewayAPI.SetKey", in)
	out := new(v1beta12.SetKeyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIService) GetKey(ctx context.Context, in *v1beta12.GetKeyRequest, opts ...client.CallOption) (*v1beta12.GetKeyResponse, error) {
	req := c.c.NewRequest(c.name, "GatewayAPI.GetKey", in)
	out := new(v1beta12.GetKeyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIService) CreatePublicShare(ctx context.Context, in *v1beta13.CreatePublicShareRequest, opts ...client.CallOption) (*v1beta13.CreatePublicShareResponse, error) {
	req := c.c.NewRequest(c.name, "GatewayAPI.CreatePublicShare", in)
	out := new(v1beta13.CreatePublicShareResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIService) RemovePublicShare(ctx context.Context, in *v1beta13.RemovePublicShareRequest, opts ...client.CallOption) (*v1beta13.RemovePublicShareResponse, error) {
	req := c.c.NewRequest(c.name, "GatewayAPI.RemovePublicShare", in)
	out := new(v1beta13.RemovePublicShareResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIService) GetPublicShare(ctx context.Context, in *v1beta13.GetPublicShareRequest, opts ...client.CallOption) (*v1beta13.GetPublicShareResponse, error) {
	req := c.c.NewRequest(c.name, "GatewayAPI.GetPublicShare", in)
	out := new(v1beta13.GetPublicShareResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIService) GetPublicShareByToken(ctx context.Context, in *v1beta13.GetPublicShareByTokenRequest, opts ...client.CallOption) (*v1beta13.GetPublicShareByTokenResponse, error) {
	req := c.c.NewRequest(c.name, "GatewayAPI.GetPublicShareByToken", in)
	out := new(v1beta13.GetPublicShareByTokenResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIService) ListPublicShares(ctx context.Context, in *v1beta13.ListPublicSharesRequest, opts ...client.CallOption) (*v1beta13.ListPublicSharesResponse, error) {
	req := c.c.NewRequest(c.name, "GatewayAPI.ListPublicShares", in)
	out := new(v1beta13.ListPublicSharesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIService) UpdatePublicShare(ctx context.Context, in *v1beta13.UpdatePublicShareRequest, opts ...client.CallOption) (*v1beta13.UpdatePublicShareResponse, error) {
	req := c.c.NewRequest(c.name, "GatewayAPI.UpdatePublicShare", in)
	out := new(v1beta13.UpdatePublicShareResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIService) CreateOCMShare(ctx context.Context, in *v1beta14.CreateOCMShareRequest, opts ...client.CallOption) (*v1beta14.CreateOCMShareResponse, error) {
	req := c.c.NewRequest(c.name, "GatewayAPI.CreateOCMShare", in)
	out := new(v1beta14.CreateOCMShareResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIService) RemoveOCMShare(ctx context.Context, in *v1beta14.RemoveOCMShareRequest, opts ...client.CallOption) (*v1beta14.RemoveOCMShareResponse, error) {
	req := c.c.NewRequest(c.name, "GatewayAPI.RemoveOCMShare", in)
	out := new(v1beta14.RemoveOCMShareResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIService) GetOCMShare(ctx context.Context, in *v1beta14.GetOCMShareRequest, opts ...client.CallOption) (*v1beta14.GetOCMShareResponse, error) {
	req := c.c.NewRequest(c.name, "GatewayAPI.GetOCMShare", in)
	out := new(v1beta14.GetOCMShareResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIService) ListOCMShares(ctx context.Context, in *v1beta14.ListOCMSharesRequest, opts ...client.CallOption) (*v1beta14.ListOCMSharesResponse, error) {
	req := c.c.NewRequest(c.name, "GatewayAPI.ListOCMShares", in)
	out := new(v1beta14.ListOCMSharesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIService) UpdateOCMShare(ctx context.Context, in *v1beta14.UpdateOCMShareRequest, opts ...client.CallOption) (*v1beta14.UpdateOCMShareResponse, error) {
	req := c.c.NewRequest(c.name, "GatewayAPI.UpdateOCMShare", in)
	out := new(v1beta14.UpdateOCMShareResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIService) ListReceivedOCMShares(ctx context.Context, in *v1beta14.ListReceivedOCMSharesRequest, opts ...client.CallOption) (*v1beta14.ListReceivedOCMSharesResponse, error) {
	req := c.c.NewRequest(c.name, "GatewayAPI.ListReceivedOCMShares", in)
	out := new(v1beta14.ListReceivedOCMSharesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIService) UpdateReceivedOCMShare(ctx context.Context, in *v1beta14.UpdateReceivedOCMShareRequest, opts ...client.CallOption) (*v1beta14.UpdateReceivedOCMShareResponse, error) {
	req := c.c.NewRequest(c.name, "GatewayAPI.UpdateReceivedOCMShare", in)
	out := new(v1beta14.UpdateReceivedOCMShareResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIService) GetReceivedOCMShare(ctx context.Context, in *v1beta14.GetReceivedOCMShareRequest, opts ...client.CallOption) (*v1beta14.GetReceivedOCMShareResponse, error) {
	req := c.c.NewRequest(c.name, "GatewayAPI.GetReceivedOCMShare", in)
	out := new(v1beta14.GetReceivedOCMShareResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIService) GetAppProviders(ctx context.Context, in *v1beta15.GetAppProvidersRequest, opts ...client.CallOption) (*v1beta15.GetAppProvidersResponse, error) {
	req := c.c.NewRequest(c.name, "GatewayAPI.GetAppProviders", in)
	out := new(v1beta15.GetAppProvidersResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIService) ListAppProviders(ctx context.Context, in *v1beta15.ListAppProvidersRequest, opts ...client.CallOption) (*v1beta15.ListAppProvidersResponse, error) {
	req := c.c.NewRequest(c.name, "GatewayAPI.ListAppProviders", in)
	out := new(v1beta15.ListAppProvidersResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIService) GetUser(ctx context.Context, in *v1beta16.GetUserRequest, opts ...client.CallOption) (*v1beta16.GetUserResponse, error) {
	req := c.c.NewRequest(c.name, "GatewayAPI.GetUser", in)
	out := new(v1beta16.GetUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIService) GetUserGroups(ctx context.Context, in *v1beta16.GetUserGroupsRequest, opts ...client.CallOption) (*v1beta16.GetUserGroupsResponse, error) {
	req := c.c.NewRequest(c.name, "GatewayAPI.GetUserGroups", in)
	out := new(v1beta16.GetUserGroupsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIService) IsInGroup(ctx context.Context, in *v1beta16.IsInGroupRequest, opts ...client.CallOption) (*v1beta16.IsInGroupResponse, error) {
	req := c.c.NewRequest(c.name, "GatewayAPI.IsInGroup", in)
	out := new(v1beta16.IsInGroupResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIService) FindUsers(ctx context.Context, in *v1beta16.FindUsersRequest, opts ...client.CallOption) (*v1beta16.FindUsersResponse, error) {
	req := c.c.NewRequest(c.name, "GatewayAPI.FindUsers", in)
	out := new(v1beta16.FindUsersResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIService) ListAuthProviders(ctx context.Context, in *v1beta17.ListAuthProvidersRequest, opts ...client.CallOption) (*ListAuthProvidersResponse, error) {
	req := c.c.NewRequest(c.name, "GatewayAPI.ListAuthProviders", in)
	out := new(ListAuthProvidersResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIService) GetHome(ctx context.Context, in *v1beta1.GetHomeRequest, opts ...client.CallOption) (*v1beta1.GetHomeResponse, error) {
	req := c.c.NewRequest(c.name, "GatewayAPI.GetHome", in)
	out := new(v1beta1.GetHomeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIService) GenerateInviteToken(ctx context.Context, in *v1beta18.GenerateInviteTokenRequest, opts ...client.CallOption) (*v1beta18.GenerateInviteTokenResponse, error) {
	req := c.c.NewRequest(c.name, "GatewayAPI.GenerateInviteToken", in)
	out := new(v1beta18.GenerateInviteTokenResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIService) ForwardInvite(ctx context.Context, in *v1beta18.ForwardInviteRequest, opts ...client.CallOption) (*v1beta18.ForwardInviteResponse, error) {
	req := c.c.NewRequest(c.name, "GatewayAPI.ForwardInvite", in)
	out := new(v1beta18.ForwardInviteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIService) AcceptInvite(ctx context.Context, in *v1beta18.AcceptInviteRequest, opts ...client.CallOption) (*v1beta18.AcceptInviteResponse, error) {
	req := c.c.NewRequest(c.name, "GatewayAPI.AcceptInvite", in)
	out := new(v1beta18.AcceptInviteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIService) GetRemoteUser(ctx context.Context, in *v1beta18.GetRemoteUserRequest, opts ...client.CallOption) (*v1beta18.GetRemoteUserResponse, error) {
	req := c.c.NewRequest(c.name, "GatewayAPI.GetRemoteUser", in)
	out := new(v1beta18.GetRemoteUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIService) IsProviderAllowed(ctx context.Context, in *v1beta19.IsProviderAllowedRequest, opts ...client.CallOption) (*v1beta19.IsProviderAllowedResponse, error) {
	req := c.c.NewRequest(c.name, "GatewayAPI.IsProviderAllowed", in)
	out := new(v1beta19.IsProviderAllowedResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIService) GetInfoByDomain(ctx context.Context, in *v1beta19.GetInfoByDomainRequest, opts ...client.CallOption) (*v1beta19.GetInfoByDomainResponse, error) {
	req := c.c.NewRequest(c.name, "GatewayAPI.GetInfoByDomain", in)
	out := new(v1beta19.GetInfoByDomainResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIService) ListAllProviders(ctx context.Context, in *v1beta19.ListAllProvidersRequest, opts ...client.CallOption) (*v1beta19.ListAllProvidersResponse, error) {
	req := c.c.NewRequest(c.name, "GatewayAPI.ListAllProviders", in)
	out := new(v1beta19.ListAllProvidersResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIService) CreateOCMCoreShare(ctx context.Context, in *v1beta110.CreateOCMCoreShareRequest, opts ...client.CallOption) (*v1beta110.CreateOCMCoreShareResponse, error) {
	req := c.c.NewRequest(c.name, "GatewayAPI.CreateOCMCoreShare", in)
	out := new(v1beta110.CreateOCMCoreShareResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GatewayAPI service

type GatewayAPIHandler interface {
	// Authenticates a user.
	Authenticate(context.Context, *AuthenticateRequest, *AuthenticateResponse) error
	// WhoAmI returns the information for a user.
	WhoAmI(context.Context, *WhoAmIRequest, *WhoAmIResponse) error
	// Creates a new resource of type container.
	// MUST return CODE_PRECONDITION_FAILED if the container
	// cannot be created at the specified reference.
	CreateContainer(context.Context, *v1beta1.CreateContainerRequest, *v1beta1.CreateContainerResponse) error
	// Deletes a resource.
	// If a resource specifies the non-empty container (directory, ...),
	// then the entire directory is deleted recursively.
	// If a resource specifies a reference or symlink type, only the reference is removed (not the target).
	// MUST return CODE_NOT_FOUND if the reference does not exist.
	Delete(context.Context, *v1beta1.DeleteRequest, *v1beta1.DeleteResponse) error
	// Returns the path reference for
	// the provided resource id reference.
	// MUST return CODE_NOT_FOUND if the reference does not exist
	GetPath(context.Context, *v1beta1.GetPathRequest, *v1beta1.GetPathResponse) error
	// Returns the quota available under the provided
	// reference.
	// MUST return CODE_NOT_FOUND if the reference does not exist
	// MUST return CODE_RESOURCE_EXHAUSTED on exceeded quota limits.
	GetQuota(context.Context, *GetQuotaRequest, *v1beta1.GetQuotaResponse) error
	// Initiates the download of a file using an
	// out-of-band data transfer mechanism.
	InitiateFileDownload(context.Context, *v1beta1.InitiateFileDownloadRequest, *InitiateFileDownloadResponse) error
	// Initiates the upload of a file using an
	// out-of-band data transfer mechanism.
	InitiateFileUpload(context.Context, *v1beta1.InitiateFileUploadRequest, *InitiateFileUploadResponse) error
	// Returns a stream of resource informations
	// for the provided reference.
	// MUST return CODE_NOT_FOUND if the reference does not exists.
	ListContainerStream(context.Context, *v1beta1.ListContainerStreamRequest, GatewayAPI_ListContainerStreamStream) error
	// Returns a list of resource information
	// for the provided reference.
	// MUST return CODE_NOT_FOUND if the reference does not exists.
	ListContainer(context.Context, *v1beta1.ListContainerRequest, *v1beta1.ListContainerResponse) error
	// Returns a list of the versions for a resource of
	// type file at the provided reference.
	// MUST return CODE_NOT_FOUND if the reference does not exist.
	// MUST return CODE_OK and MUST return an empty list if no versions are available.
	// TODO: What code if resource not of type file?
	ListFileVersions(context.Context, *v1beta1.ListFileVersionsRequest, *v1beta1.ListFileVersionsResponse) error
	// Returns a stream of recycle items for this storage provider.
	ListRecycleStream(context.Context, *ListRecycleStreamRequest, GatewayAPI_ListRecycleStreamStream) error
	// Returns a list of recycle items for this storage provider.
	// MUST return CODE_OK and MUST return an empty list if no recycle items are available.
	ListRecycle(context.Context, *ListRecycleRequest, *v1beta1.ListRecycleResponse) error
	// Moves a resource from one reference to another.
	// MUST return CODE_NOT_FOUND if any of the references do not exist.
	// MUST return CODE_PRECONDITION_FAILED if the source reference
	// cannot be moved to the destination reference.
	Move(context.Context, *v1beta1.MoveRequest, *v1beta1.MoveResponse) error
	// Permanently removes a recycle item from the recycle.
	// This operation is irrevocable.
	// MUST return CODE_NOT_FOUND if the recycle item id does not exist.
	PurgeRecycle(context.Context, *PurgeRecycleRequest, *v1beta1.PurgeRecycleResponse) error
	// Restores a file version for the provided reference.
	// MUST return CODE_NOT_FOUND if the reference does not exist.
	// MUST return CODE_NOT_FOUND if the version does not exist.
	RestoreFileVersion(context.Context, *v1beta1.RestoreFileVersionRequest, *v1beta1.RestoreFileVersionResponse) error
	// Restores a recycle item from the recycle.
	// MUST return CODE_NOT_FOUND if the recycle item id does not exist.
	// MUST return CODE_PRECONDITION_FAILED if the restore_path is non-empty
	// and the recycle item cannot be restored to the restore_path.
	RestoreRecycleItem(context.Context, *v1beta1.RestoreRecycleItemRequest, *v1beta1.RestoreRecycleItemResponse) error
	// Returns the resource information at the provided reference.
	// MUST return CODE_NOT_FOUND if the reference does not exist.
	Stat(context.Context, *v1beta1.StatRequest, *v1beta1.StatResponse) error
	// Sets arbitrary metadata into a storage resource.
	// Arbitrary metadata is returned in a cs3.storage.provider.v1beta1.ResourceInfo.
	SetArbitraryMetadata(context.Context, *v1beta1.SetArbitraryMetadataRequest, *v1beta1.SetArbitraryMetadataResponse) error
	// Unsets arbitrary metdata into a storage resource.
	// Arbitrary metadata is returned in a cs3.storage.provider.v1beta1.ResourceInfo.
	UnsetArbitraryMetadata(context.Context, *v1beta1.UnsetArbitraryMetadataRequest, *v1beta1.UnsetArbitraryMetadataResponse) error
	// Creates the home directory for a user.
	CreateHome(context.Context, *v1beta1.CreateHomeRequest, *v1beta1.CreateHomeResponse) error
	// Creates a new share.
	// MUST return CODE_NOT_FOUND if the resource reference does not exist.
	// MUST return CODE_ALREADY_EXISTS if the share already exists for the 4-tuple consisting of
	// (owner, shared_resource, grantee).
	// New shares MUST be created in the state SHARE_STATE_PENDING.
	CreateShare(context.Context, *v1beta11.CreateShareRequest, *v1beta11.CreateShareResponse) error
	// Removes a share.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	RemoveShare(context.Context, *v1beta11.RemoveShareRequest, *v1beta11.RemoveShareResponse) error
	// Gets share information for a single share.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	GetShare(context.Context, *v1beta11.GetShareRequest, *v1beta11.GetShareResponse) error
	// List the shares the authproviderenticated principal has created,
	// both as owner and creator. If a filter is specified, only
	// shares satisfying the filter MUST be returned.
	ListShares(context.Context, *v1beta11.ListSharesRequest, *v1beta11.ListSharesResponse) error
	// Updates a share.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	UpdateShare(context.Context, *v1beta11.UpdateShareRequest, *v1beta11.UpdateShareResponse) error
	// List all shares the authproviderenticated principal has received.
	ListReceivedShares(context.Context, *v1beta11.ListReceivedSharesRequest, *v1beta11.ListReceivedSharesResponse) error
	// Update the received share to change the share state or the display name.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	UpdateReceivedShare(context.Context, *v1beta11.UpdateReceivedShareRequest, *v1beta11.UpdateReceivedShareResponse) error
	// Get the information for the given received share reference.
	// MUST return CODE_NOT_FOUND if the received share reference does not exist.
	GetReceivedShare(context.Context, *v1beta11.GetReceivedShareRequest, *v1beta11.GetReceivedShareResponse) error
	// Maps the key-value pair.
	SetKey(context.Context, *v1beta12.SetKeyRequest, *v1beta12.SetKeyResponse) error
	// Returns the value associated with the
	// requested key.
	GetKey(context.Context, *v1beta12.GetKeyRequest, *v1beta12.GetKeyResponse) error
	// Creates a new share.
	// MUST return CODE_NOT_FOUND if the resource reference does not exist.
	// MUST return CODE_ALREADY_EXISTS if the share already exists for the 4-tuple consisting of
	// (owner, shared_resource, grantee).
	// New shares MUST be created in the state SHARE_STATE_PENDING.
	CreatePublicShare(context.Context, *v1beta13.CreatePublicShareRequest, *v1beta13.CreatePublicShareResponse) error
	// Removes a share.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	RemovePublicShare(context.Context, *v1beta13.RemovePublicShareRequest, *v1beta13.RemovePublicShareResponse) error
	// Gets share information for a single share.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	GetPublicShare(context.Context, *v1beta13.GetPublicShareRequest, *v1beta13.GetPublicShareResponse) error
	// Gets share information for a single share by its unlisted token.
	// MUST return CODE_NOT_FOUND if the share does not exist.
	GetPublicShareByToken(context.Context, *v1beta13.GetPublicShareByTokenRequest, *v1beta13.GetPublicShareByTokenResponse) error
	// List the shares the authproviderenticated principal has created,
	// both as owner and creator. If a filter is specified, only
	// shares satisfying the filter MUST be returned.
	ListPublicShares(context.Context, *v1beta13.ListPublicSharesRequest, *v1beta13.ListPublicSharesResponse) error
	// Updates a share.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	UpdatePublicShare(context.Context, *v1beta13.UpdatePublicShareRequest, *v1beta13.UpdatePublicShareResponse) error
	// Creates a new ocm share.
	// MUST return CODE_NOT_FOUND if the resource reference does not exist.
	// MUST return CODE_ALREADY_EXISTS if the share already exists for the 4-tuple consisting of
	// (owner, shared_resource, grantee).
	// New shares MUST be created in the state SHARE_STATE_PENDING.
	CreateOCMShare(context.Context, *v1beta14.CreateOCMShareRequest, *v1beta14.CreateOCMShareResponse) error
	// Removes a share.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	RemoveOCMShare(context.Context, *v1beta14.RemoveOCMShareRequest, *v1beta14.RemoveOCMShareResponse) error
	// Gets share information for a single share.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	GetOCMShare(context.Context, *v1beta14.GetOCMShareRequest, *v1beta14.GetOCMShareResponse) error
	// List the shares the authproviderenticated principal has created,
	// both as owner and creator. If a filter is specified, only
	// shares satisfying the filter MUST be returned.
	ListOCMShares(context.Context, *v1beta14.ListOCMSharesRequest, *v1beta14.ListOCMSharesResponse) error
	// Updates a share.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	UpdateOCMShare(context.Context, *v1beta14.UpdateOCMShareRequest, *v1beta14.UpdateOCMShareResponse) error
	// List all shares the authproviderenticated principal has received.
	ListReceivedOCMShares(context.Context, *v1beta14.ListReceivedOCMSharesRequest, *v1beta14.ListReceivedOCMSharesResponse) error
	// Update the received share to change the share state or the display name.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	UpdateReceivedOCMShare(context.Context, *v1beta14.UpdateReceivedOCMShareRequest, *v1beta14.UpdateReceivedOCMShareResponse) error
	// Get the information for the given received share reference.
	// MUST return CODE_NOT_FOUND if the received share reference does not exist.
	GetReceivedOCMShare(context.Context, *v1beta14.GetReceivedOCMShareRequest, *v1beta14.GetReceivedOCMShareResponse) error
	// Returns the app providers that are capable of handling this resource info.
	// MUST return CODE_NOT_FOUND if no providers are available.
	GetAppProviders(context.Context, *v1beta15.GetAppProvidersRequest, *v1beta15.GetAppProvidersResponse) error
	// Returns a list of the available app providers known by this registry.
	ListAppProviders(context.Context, *v1beta15.ListAppProvidersRequest, *v1beta15.ListAppProvidersResponse) error
	// Gets the information about an user by its user id.
	GetUser(context.Context, *v1beta16.GetUserRequest, *v1beta16.GetUserResponse) error
	// Gets the groups of a user.
	GetUserGroups(context.Context, *v1beta16.GetUserGroupsRequest, *v1beta16.GetUserGroupsResponse) error
	// Tells if the user is in a certain group.
	IsInGroup(context.Context, *v1beta16.IsInGroupRequest, *v1beta16.IsInGroupResponse) error
	// Finds users by any attribute of the user?
	// TODO(labkode): to define the filters that make more sense.
	FindUsers(context.Context, *v1beta16.FindUsersRequest, *v1beta16.FindUsersResponse) error
	// Returns a list of the available auth providers known by this registry.
	ListAuthProviders(context.Context, *v1beta17.ListAuthProvidersRequest, *ListAuthProvidersResponse) error
	// Returns the home path for the given authenticated user.
	// When a user has access to multiple storage providers, one of them is the home.
	GetHome(context.Context, *v1beta1.GetHomeRequest, *v1beta1.GetHomeResponse) error
	// Generates a new token for the user with a validity of 24 hours.
	GenerateInviteToken(context.Context, *v1beta18.GenerateInviteTokenRequest, *v1beta18.GenerateInviteTokenResponse) error
	// Forwards a received invite to the sync'n'share system provider.
	ForwardInvite(context.Context, *v1beta18.ForwardInviteRequest, *v1beta18.ForwardInviteResponse) error
	// Completes an invitation acceptance.
	AcceptInvite(context.Context, *v1beta18.AcceptInviteRequest, *v1beta18.AcceptInviteResponse) error
	// Retrieves details about a remote user who has accepted an invite to share.
	GetRemoteUser(context.Context, *v1beta18.GetRemoteUserRequest, *v1beta18.GetRemoteUserResponse) error
	// Check if a given system provider is registered in the mesh or not.
	// MUST return CODE_UNAUTHENTICATED if the system is not registered
	IsProviderAllowed(context.Context, *v1beta19.IsProviderAllowedRequest, *v1beta19.IsProviderAllowedResponse) error
	// Get the information of the provider identified by a specific domain.
	// MUST return CODE_NOT_FOUND if the sync'n'share system provider does not exist.
	GetInfoByDomain(context.Context, *v1beta19.GetInfoByDomainRequest, *v1beta19.GetInfoByDomainResponse) error
	// Get the information of all the providers registered in the mesh.
	ListAllProviders(context.Context, *v1beta19.ListAllProvidersRequest, *v1beta19.ListAllProvidersResponse) error
	// Creates a new ocm share.
	CreateOCMCoreShare(context.Context, *v1beta110.CreateOCMCoreShareRequest, *v1beta110.CreateOCMCoreShareResponse) error
}

func RegisterGatewayAPIHandler(s server.Server, hdlr GatewayAPIHandler, opts ...server.HandlerOption) error {
	type gatewayAPI interface {
		Authenticate(ctx context.Context, in *AuthenticateRequest, out *AuthenticateResponse) error
		WhoAmI(ctx context.Context, in *WhoAmIRequest, out *WhoAmIResponse) error
		CreateContainer(ctx context.Context, in *v1beta1.CreateContainerRequest, out *v1beta1.CreateContainerResponse) error
		Delete(ctx context.Context, in *v1beta1.DeleteRequest, out *v1beta1.DeleteResponse) error
		GetPath(ctx context.Context, in *v1beta1.GetPathRequest, out *v1beta1.GetPathResponse) error
		GetQuota(ctx context.Context, in *GetQuotaRequest, out *v1beta1.GetQuotaResponse) error
		InitiateFileDownload(ctx context.Context, in *v1beta1.InitiateFileDownloadRequest, out *InitiateFileDownloadResponse) error
		InitiateFileUpload(ctx context.Context, in *v1beta1.InitiateFileUploadRequest, out *InitiateFileUploadResponse) error
		ListContainerStream(ctx context.Context, stream server.Stream) error
		ListContainer(ctx context.Context, in *v1beta1.ListContainerRequest, out *v1beta1.ListContainerResponse) error
		ListFileVersions(ctx context.Context, in *v1beta1.ListFileVersionsRequest, out *v1beta1.ListFileVersionsResponse) error
		ListRecycleStream(ctx context.Context, stream server.Stream) error
		ListRecycle(ctx context.Context, in *ListRecycleRequest, out *v1beta1.ListRecycleResponse) error
		Move(ctx context.Context, in *v1beta1.MoveRequest, out *v1beta1.MoveResponse) error
		PurgeRecycle(ctx context.Context, in *PurgeRecycleRequest, out *v1beta1.PurgeRecycleResponse) error
		RestoreFileVersion(ctx context.Context, in *v1beta1.RestoreFileVersionRequest, out *v1beta1.RestoreFileVersionResponse) error
		RestoreRecycleItem(ctx context.Context, in *v1beta1.RestoreRecycleItemRequest, out *v1beta1.RestoreRecycleItemResponse) error
		Stat(ctx context.Context, in *v1beta1.StatRequest, out *v1beta1.StatResponse) error
		SetArbitraryMetadata(ctx context.Context, in *v1beta1.SetArbitraryMetadataRequest, out *v1beta1.SetArbitraryMetadataResponse) error
		UnsetArbitraryMetadata(ctx context.Context, in *v1beta1.UnsetArbitraryMetadataRequest, out *v1beta1.UnsetArbitraryMetadataResponse) error
		CreateHome(ctx context.Context, in *v1beta1.CreateHomeRequest, out *v1beta1.CreateHomeResponse) error
		CreateShare(ctx context.Context, in *v1beta11.CreateShareRequest, out *v1beta11.CreateShareResponse) error
		RemoveShare(ctx context.Context, in *v1beta11.RemoveShareRequest, out *v1beta11.RemoveShareResponse) error
		GetShare(ctx context.Context, in *v1beta11.GetShareRequest, out *v1beta11.GetShareResponse) error
		ListShares(ctx context.Context, in *v1beta11.ListSharesRequest, out *v1beta11.ListSharesResponse) error
		UpdateShare(ctx context.Context, in *v1beta11.UpdateShareRequest, out *v1beta11.UpdateShareResponse) error
		ListReceivedShares(ctx context.Context, in *v1beta11.ListReceivedSharesRequest, out *v1beta11.ListReceivedSharesResponse) error
		UpdateReceivedShare(ctx context.Context, in *v1beta11.UpdateReceivedShareRequest, out *v1beta11.UpdateReceivedShareResponse) error
		GetReceivedShare(ctx context.Context, in *v1beta11.GetReceivedShareRequest, out *v1beta11.GetReceivedShareResponse) error
		SetKey(ctx context.Context, in *v1beta12.SetKeyRequest, out *v1beta12.SetKeyResponse) error
		GetKey(ctx context.Context, in *v1beta12.GetKeyRequest, out *v1beta12.GetKeyResponse) error
		CreatePublicShare(ctx context.Context, in *v1beta13.CreatePublicShareRequest, out *v1beta13.CreatePublicShareResponse) error
		RemovePublicShare(ctx context.Context, in *v1beta13.RemovePublicShareRequest, out *v1beta13.RemovePublicShareResponse) error
		GetPublicShare(ctx context.Context, in *v1beta13.GetPublicShareRequest, out *v1beta13.GetPublicShareResponse) error
		GetPublicShareByToken(ctx context.Context, in *v1beta13.GetPublicShareByTokenRequest, out *v1beta13.GetPublicShareByTokenResponse) error
		ListPublicShares(ctx context.Context, in *v1beta13.ListPublicSharesRequest, out *v1beta13.ListPublicSharesResponse) error
		UpdatePublicShare(ctx context.Context, in *v1beta13.UpdatePublicShareRequest, out *v1beta13.UpdatePublicShareResponse) error
		CreateOCMShare(ctx context.Context, in *v1beta14.CreateOCMShareRequest, out *v1beta14.CreateOCMShareResponse) error
		RemoveOCMShare(ctx context.Context, in *v1beta14.RemoveOCMShareRequest, out *v1beta14.RemoveOCMShareResponse) error
		GetOCMShare(ctx context.Context, in *v1beta14.GetOCMShareRequest, out *v1beta14.GetOCMShareResponse) error
		ListOCMShares(ctx context.Context, in *v1beta14.ListOCMSharesRequest, out *v1beta14.ListOCMSharesResponse) error
		UpdateOCMShare(ctx context.Context, in *v1beta14.UpdateOCMShareRequest, out *v1beta14.UpdateOCMShareResponse) error
		ListReceivedOCMShares(ctx context.Context, in *v1beta14.ListReceivedOCMSharesRequest, out *v1beta14.ListReceivedOCMSharesResponse) error
		UpdateReceivedOCMShare(ctx context.Context, in *v1beta14.UpdateReceivedOCMShareRequest, out *v1beta14.UpdateReceivedOCMShareResponse) error
		GetReceivedOCMShare(ctx context.Context, in *v1beta14.GetReceivedOCMShareRequest, out *v1beta14.GetReceivedOCMShareResponse) error
		GetAppProviders(ctx context.Context, in *v1beta15.GetAppProvidersRequest, out *v1beta15.GetAppProvidersResponse) error
		ListAppProviders(ctx context.Context, in *v1beta15.ListAppProvidersRequest, out *v1beta15.ListAppProvidersResponse) error
		GetUser(ctx context.Context, in *v1beta16.GetUserRequest, out *v1beta16.GetUserResponse) error
		GetUserGroups(ctx context.Context, in *v1beta16.GetUserGroupsRequest, out *v1beta16.GetUserGroupsResponse) error
		IsInGroup(ctx context.Context, in *v1beta16.IsInGroupRequest, out *v1beta16.IsInGroupResponse) error
		FindUsers(ctx context.Context, in *v1beta16.FindUsersRequest, out *v1beta16.FindUsersResponse) error
		ListAuthProviders(ctx context.Context, in *v1beta17.ListAuthProvidersRequest, out *ListAuthProvidersResponse) error
		GetHome(ctx context.Context, in *v1beta1.GetHomeRequest, out *v1beta1.GetHomeResponse) error
		GenerateInviteToken(ctx context.Context, in *v1beta18.GenerateInviteTokenRequest, out *v1beta18.GenerateInviteTokenResponse) error
		ForwardInvite(ctx context.Context, in *v1beta18.ForwardInviteRequest, out *v1beta18.ForwardInviteResponse) error
		AcceptInvite(ctx context.Context, in *v1beta18.AcceptInviteRequest, out *v1beta18.AcceptInviteResponse) error
		GetRemoteUser(ctx context.Context, in *v1beta18.GetRemoteUserRequest, out *v1beta18.GetRemoteUserResponse) error
		IsProviderAllowed(ctx context.Context, in *v1beta19.IsProviderAllowedRequest, out *v1beta19.IsProviderAllowedResponse) error
		GetInfoByDomain(ctx context.Context, in *v1beta19.GetInfoByDomainRequest, out *v1beta19.GetInfoByDomainResponse) error
		ListAllProviders(ctx context.Context, in *v1beta19.ListAllProvidersRequest, out *v1beta19.ListAllProvidersResponse) error
		CreateOCMCoreShare(ctx context.Context, in *v1beta110.CreateOCMCoreShareRequest, out *v1beta110.CreateOCMCoreShareResponse) error
	}
	type GatewayAPI struct {
		gatewayAPI
	}
	h := &gatewayAPIHandler{hdlr}
	return s.Handle(s.NewHandler(&GatewayAPI{h}, opts...))
}

type gatewayAPIHandler struct {
	GatewayAPIHandler
}

func (h *gatewayAPIHandler) Authenticate(ctx context.Context, in *AuthenticateRequest, out *AuthenticateResponse) error {
	return h.GatewayAPIHandler.Authenticate(ctx, in, out)
}

func (h *gatewayAPIHandler) WhoAmI(ctx context.Context, in *WhoAmIRequest, out *WhoAmIResponse) error {
	return h.GatewayAPIHandler.WhoAmI(ctx, in, out)
}

func (h *gatewayAPIHandler) CreateContainer(ctx context.Context, in *v1beta1.CreateContainerRequest, out *v1beta1.CreateContainerResponse) error {
	return h.GatewayAPIHandler.CreateContainer(ctx, in, out)
}

func (h *gatewayAPIHandler) Delete(ctx context.Context, in *v1beta1.DeleteRequest, out *v1beta1.DeleteResponse) error {
	return h.GatewayAPIHandler.Delete(ctx, in, out)
}

func (h *gatewayAPIHandler) GetPath(ctx context.Context, in *v1beta1.GetPathRequest, out *v1beta1.GetPathResponse) error {
	return h.GatewayAPIHandler.GetPath(ctx, in, out)
}

func (h *gatewayAPIHandler) GetQuota(ctx context.Context, in *GetQuotaRequest, out *v1beta1.GetQuotaResponse) error {
	return h.GatewayAPIHandler.GetQuota(ctx, in, out)
}

func (h *gatewayAPIHandler) InitiateFileDownload(ctx context.Context, in *v1beta1.InitiateFileDownloadRequest, out *InitiateFileDownloadResponse) error {
	return h.GatewayAPIHandler.InitiateFileDownload(ctx, in, out)
}

func (h *gatewayAPIHandler) InitiateFileUpload(ctx context.Context, in *v1beta1.InitiateFileUploadRequest, out *InitiateFileUploadResponse) error {
	return h.GatewayAPIHandler.InitiateFileUpload(ctx, in, out)
}

func (h *gatewayAPIHandler) ListContainerStream(ctx context.Context, stream server.Stream) error {
	m := new(v1beta1.ListContainerStreamRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.GatewayAPIHandler.ListContainerStream(ctx, m, &gatewayAPIListContainerStreamStream{stream})
}

type GatewayAPI_ListContainerStreamStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*v1beta1.ListContainerStreamResponse) error
}

type gatewayAPIListContainerStreamStream struct {
	stream server.Stream
}

func (x *gatewayAPIListContainerStreamStream) Close() error {
	return x.stream.Close()
}

func (x *gatewayAPIListContainerStreamStream) Context() context.Context {
	return x.stream.Context()
}

func (x *gatewayAPIListContainerStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *gatewayAPIListContainerStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *gatewayAPIListContainerStreamStream) Send(m *v1beta1.ListContainerStreamResponse) error {
	return x.stream.Send(m)
}

func (h *gatewayAPIHandler) ListContainer(ctx context.Context, in *v1beta1.ListContainerRequest, out *v1beta1.ListContainerResponse) error {
	return h.GatewayAPIHandler.ListContainer(ctx, in, out)
}

func (h *gatewayAPIHandler) ListFileVersions(ctx context.Context, in *v1beta1.ListFileVersionsRequest, out *v1beta1.ListFileVersionsResponse) error {
	return h.GatewayAPIHandler.ListFileVersions(ctx, in, out)
}

func (h *gatewayAPIHandler) ListRecycleStream(ctx context.Context, stream server.Stream) error {
	m := new(ListRecycleStreamRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.GatewayAPIHandler.ListRecycleStream(ctx, m, &gatewayAPIListRecycleStreamStream{stream})
}

type GatewayAPI_ListRecycleStreamStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*v1beta1.ListRecycleStreamResponse) error
}

type gatewayAPIListRecycleStreamStream struct {
	stream server.Stream
}

func (x *gatewayAPIListRecycleStreamStream) Close() error {
	return x.stream.Close()
}

func (x *gatewayAPIListRecycleStreamStream) Context() context.Context {
	return x.stream.Context()
}

func (x *gatewayAPIListRecycleStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *gatewayAPIListRecycleStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *gatewayAPIListRecycleStreamStream) Send(m *v1beta1.ListRecycleStreamResponse) error {
	return x.stream.Send(m)
}

func (h *gatewayAPIHandler) ListRecycle(ctx context.Context, in *ListRecycleRequest, out *v1beta1.ListRecycleResponse) error {
	return h.GatewayAPIHandler.ListRecycle(ctx, in, out)
}

func (h *gatewayAPIHandler) Move(ctx context.Context, in *v1beta1.MoveRequest, out *v1beta1.MoveResponse) error {
	return h.GatewayAPIHandler.Move(ctx, in, out)
}

func (h *gatewayAPIHandler) PurgeRecycle(ctx context.Context, in *PurgeRecycleRequest, out *v1beta1.PurgeRecycleResponse) error {
	return h.GatewayAPIHandler.PurgeRecycle(ctx, in, out)
}

func (h *gatewayAPIHandler) RestoreFileVersion(ctx context.Context, in *v1beta1.RestoreFileVersionRequest, out *v1beta1.RestoreFileVersionResponse) error {
	return h.GatewayAPIHandler.RestoreFileVersion(ctx, in, out)
}

func (h *gatewayAPIHandler) RestoreRecycleItem(ctx context.Context, in *v1beta1.RestoreRecycleItemRequest, out *v1beta1.RestoreRecycleItemResponse) error {
	return h.GatewayAPIHandler.RestoreRecycleItem(ctx, in, out)
}

func (h *gatewayAPIHandler) Stat(ctx context.Context, in *v1beta1.StatRequest, out *v1beta1.StatResponse) error {
	return h.GatewayAPIHandler.Stat(ctx, in, out)
}

func (h *gatewayAPIHandler) SetArbitraryMetadata(ctx context.Context, in *v1beta1.SetArbitraryMetadataRequest, out *v1beta1.SetArbitraryMetadataResponse) error {
	return h.GatewayAPIHandler.SetArbitraryMetadata(ctx, in, out)
}

func (h *gatewayAPIHandler) UnsetArbitraryMetadata(ctx context.Context, in *v1beta1.UnsetArbitraryMetadataRequest, out *v1beta1.UnsetArbitraryMetadataResponse) error {
	return h.GatewayAPIHandler.UnsetArbitraryMetadata(ctx, in, out)
}

func (h *gatewayAPIHandler) CreateHome(ctx context.Context, in *v1beta1.CreateHomeRequest, out *v1beta1.CreateHomeResponse) error {
	return h.GatewayAPIHandler.CreateHome(ctx, in, out)
}

func (h *gatewayAPIHandler) CreateShare(ctx context.Context, in *v1beta11.CreateShareRequest, out *v1beta11.CreateShareResponse) error {
	return h.GatewayAPIHandler.CreateShare(ctx, in, out)
}

func (h *gatewayAPIHandler) RemoveShare(ctx context.Context, in *v1beta11.RemoveShareRequest, out *v1beta11.RemoveShareResponse) error {
	return h.GatewayAPIHandler.RemoveShare(ctx, in, out)
}

func (h *gatewayAPIHandler) GetShare(ctx context.Context, in *v1beta11.GetShareRequest, out *v1beta11.GetShareResponse) error {
	return h.GatewayAPIHandler.GetShare(ctx, in, out)
}

func (h *gatewayAPIHandler) ListShares(ctx context.Context, in *v1beta11.ListSharesRequest, out *v1beta11.ListSharesResponse) error {
	return h.GatewayAPIHandler.ListShares(ctx, in, out)
}

func (h *gatewayAPIHandler) UpdateShare(ctx context.Context, in *v1beta11.UpdateShareRequest, out *v1beta11.UpdateShareResponse) error {
	return h.GatewayAPIHandler.UpdateShare(ctx, in, out)
}

func (h *gatewayAPIHandler) ListReceivedShares(ctx context.Context, in *v1beta11.ListReceivedSharesRequest, out *v1beta11.ListReceivedSharesResponse) error {
	return h.GatewayAPIHandler.ListReceivedShares(ctx, in, out)
}

func (h *gatewayAPIHandler) UpdateReceivedShare(ctx context.Context, in *v1beta11.UpdateReceivedShareRequest, out *v1beta11.UpdateReceivedShareResponse) error {
	return h.GatewayAPIHandler.UpdateReceivedShare(ctx, in, out)
}

func (h *gatewayAPIHandler) GetReceivedShare(ctx context.Context, in *v1beta11.GetReceivedShareRequest, out *v1beta11.GetReceivedShareResponse) error {
	return h.GatewayAPIHandler.GetReceivedShare(ctx, in, out)
}

func (h *gatewayAPIHandler) SetKey(ctx context.Context, in *v1beta12.SetKeyRequest, out *v1beta12.SetKeyResponse) error {
	return h.GatewayAPIHandler.SetKey(ctx, in, out)
}

func (h *gatewayAPIHandler) GetKey(ctx context.Context, in *v1beta12.GetKeyRequest, out *v1beta12.GetKeyResponse) error {
	return h.GatewayAPIHandler.GetKey(ctx, in, out)
}

func (h *gatewayAPIHandler) CreatePublicShare(ctx context.Context, in *v1beta13.CreatePublicShareRequest, out *v1beta13.CreatePublicShareResponse) error {
	return h.GatewayAPIHandler.CreatePublicShare(ctx, in, out)
}

func (h *gatewayAPIHandler) RemovePublicShare(ctx context.Context, in *v1beta13.RemovePublicShareRequest, out *v1beta13.RemovePublicShareResponse) error {
	return h.GatewayAPIHandler.RemovePublicShare(ctx, in, out)
}

func (h *gatewayAPIHandler) GetPublicShare(ctx context.Context, in *v1beta13.GetPublicShareRequest, out *v1beta13.GetPublicShareResponse) error {
	return h.GatewayAPIHandler.GetPublicShare(ctx, in, out)
}

func (h *gatewayAPIHandler) GetPublicShareByToken(ctx context.Context, in *v1beta13.GetPublicShareByTokenRequest, out *v1beta13.GetPublicShareByTokenResponse) error {
	return h.GatewayAPIHandler.GetPublicShareByToken(ctx, in, out)
}

func (h *gatewayAPIHandler) ListPublicShares(ctx context.Context, in *v1beta13.ListPublicSharesRequest, out *v1beta13.ListPublicSharesResponse) error {
	return h.GatewayAPIHandler.ListPublicShares(ctx, in, out)
}

func (h *gatewayAPIHandler) UpdatePublicShare(ctx context.Context, in *v1beta13.UpdatePublicShareRequest, out *v1beta13.UpdatePublicShareResponse) error {
	return h.GatewayAPIHandler.UpdatePublicShare(ctx, in, out)
}

func (h *gatewayAPIHandler) CreateOCMShare(ctx context.Context, in *v1beta14.CreateOCMShareRequest, out *v1beta14.CreateOCMShareResponse) error {
	return h.GatewayAPIHandler.CreateOCMShare(ctx, in, out)
}

func (h *gatewayAPIHandler) RemoveOCMShare(ctx context.Context, in *v1beta14.RemoveOCMShareRequest, out *v1beta14.RemoveOCMShareResponse) error {
	return h.GatewayAPIHandler.RemoveOCMShare(ctx, in, out)
}

func (h *gatewayAPIHandler) GetOCMShare(ctx context.Context, in *v1beta14.GetOCMShareRequest, out *v1beta14.GetOCMShareResponse) error {
	return h.GatewayAPIHandler.GetOCMShare(ctx, in, out)
}

func (h *gatewayAPIHandler) ListOCMShares(ctx context.Context, in *v1beta14.ListOCMSharesRequest, out *v1beta14.ListOCMSharesResponse) error {
	return h.GatewayAPIHandler.ListOCMShares(ctx, in, out)
}

func (h *gatewayAPIHandler) UpdateOCMShare(ctx context.Context, in *v1beta14.UpdateOCMShareRequest, out *v1beta14.UpdateOCMShareResponse) error {
	return h.GatewayAPIHandler.UpdateOCMShare(ctx, in, out)
}

func (h *gatewayAPIHandler) ListReceivedOCMShares(ctx context.Context, in *v1beta14.ListReceivedOCMSharesRequest, out *v1beta14.ListReceivedOCMSharesResponse) error {
	return h.GatewayAPIHandler.ListReceivedOCMShares(ctx, in, out)
}

func (h *gatewayAPIHandler) UpdateReceivedOCMShare(ctx context.Context, in *v1beta14.UpdateReceivedOCMShareRequest, out *v1beta14.UpdateReceivedOCMShareResponse) error {
	return h.GatewayAPIHandler.UpdateReceivedOCMShare(ctx, in, out)
}

func (h *gatewayAPIHandler) GetReceivedOCMShare(ctx context.Context, in *v1beta14.GetReceivedOCMShareRequest, out *v1beta14.GetReceivedOCMShareResponse) error {
	return h.GatewayAPIHandler.GetReceivedOCMShare(ctx, in, out)
}

func (h *gatewayAPIHandler) GetAppProviders(ctx context.Context, in *v1beta15.GetAppProvidersRequest, out *v1beta15.GetAppProvidersResponse) error {
	return h.GatewayAPIHandler.GetAppProviders(ctx, in, out)
}

func (h *gatewayAPIHandler) ListAppProviders(ctx context.Context, in *v1beta15.ListAppProvidersRequest, out *v1beta15.ListAppProvidersResponse) error {
	return h.GatewayAPIHandler.ListAppProviders(ctx, in, out)
}

func (h *gatewayAPIHandler) GetUser(ctx context.Context, in *v1beta16.GetUserRequest, out *v1beta16.GetUserResponse) error {
	return h.GatewayAPIHandler.GetUser(ctx, in, out)
}

func (h *gatewayAPIHandler) GetUserGroups(ctx context.Context, in *v1beta16.GetUserGroupsRequest, out *v1beta16.GetUserGroupsResponse) error {
	return h.GatewayAPIHandler.GetUserGroups(ctx, in, out)
}

func (h *gatewayAPIHandler) IsInGroup(ctx context.Context, in *v1beta16.IsInGroupRequest, out *v1beta16.IsInGroupResponse) error {
	return h.GatewayAPIHandler.IsInGroup(ctx, in, out)
}

func (h *gatewayAPIHandler) FindUsers(ctx context.Context, in *v1beta16.FindUsersRequest, out *v1beta16.FindUsersResponse) error {
	return h.GatewayAPIHandler.FindUsers(ctx, in, out)
}

func (h *gatewayAPIHandler) ListAuthProviders(ctx context.Context, in *v1beta17.ListAuthProvidersRequest, out *ListAuthProvidersResponse) error {
	return h.GatewayAPIHandler.ListAuthProviders(ctx, in, out)
}

func (h *gatewayAPIHandler) GetHome(ctx context.Context, in *v1beta1.GetHomeRequest, out *v1beta1.GetHomeResponse) error {
	return h.GatewayAPIHandler.GetHome(ctx, in, out)
}

func (h *gatewayAPIHandler) GenerateInviteToken(ctx context.Context, in *v1beta18.GenerateInviteTokenRequest, out *v1beta18.GenerateInviteTokenResponse) error {
	return h.GatewayAPIHandler.GenerateInviteToken(ctx, in, out)
}

func (h *gatewayAPIHandler) ForwardInvite(ctx context.Context, in *v1beta18.ForwardInviteRequest, out *v1beta18.ForwardInviteResponse) error {
	return h.GatewayAPIHandler.ForwardInvite(ctx, in, out)
}

func (h *gatewayAPIHandler) AcceptInvite(ctx context.Context, in *v1beta18.AcceptInviteRequest, out *v1beta18.AcceptInviteResponse) error {
	return h.GatewayAPIHandler.AcceptInvite(ctx, in, out)
}

func (h *gatewayAPIHandler) GetRemoteUser(ctx context.Context, in *v1beta18.GetRemoteUserRequest, out *v1beta18.GetRemoteUserResponse) error {
	return h.GatewayAPIHandler.GetRemoteUser(ctx, in, out)
}

func (h *gatewayAPIHandler) IsProviderAllowed(ctx context.Context, in *v1beta19.IsProviderAllowedRequest, out *v1beta19.IsProviderAllowedResponse) error {
	return h.GatewayAPIHandler.IsProviderAllowed(ctx, in, out)
}

func (h *gatewayAPIHandler) GetInfoByDomain(ctx context.Context, in *v1beta19.GetInfoByDomainRequest, out *v1beta19.GetInfoByDomainResponse) error {
	return h.GatewayAPIHandler.GetInfoByDomain(ctx, in, out)
}

func (h *gatewayAPIHandler) ListAllProviders(ctx context.Context, in *v1beta19.ListAllProvidersRequest, out *v1beta19.ListAllProvidersResponse) error {
	return h.GatewayAPIHandler.ListAllProviders(ctx, in, out)
}

func (h *gatewayAPIHandler) CreateOCMCoreShare(ctx context.Context, in *v1beta110.CreateOCMCoreShareRequest, out *v1beta110.CreateOCMCoreShareResponse) error {
	return h.GatewayAPIHandler.CreateOCMCoreShare(ctx, in, out)
}
