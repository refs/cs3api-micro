// Copyright 2018-2019 CERN
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// In applying this license, CERN does not waive the privileges and immunities
// granted to it by virtue of its status as an Intergovernmental Organization
// or submit itself to any jurisdiction.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.24.0
// 	protoc        v3.8.0
// source: cs3/sharing/collaboration/v1beta1/collaboration_api.proto

package collaborationv1beta1

import (
	context "context"
	v1beta13 "github.com/cs3org/go-cs3apis/build/go-cs3apis/cs3/identity/user/v1beta1"
	v1beta12 "github.com/cs3org/go-cs3apis/build/go-cs3apis/cs3/rpc/v1beta1"
	v1beta11 "github.com/cs3org/go-cs3apis/build/go-cs3apis/cs3/storage/provider/v1beta1"
	v1beta1 "github.com/cs3org/go-cs3apis/build/go-cs3apis/cs3/types/v1beta1"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// The filter to apply.
type ListSharesRequest_Filter_Type int32

const (
	ListSharesRequest_Filter_TYPE_INVALID     ListSharesRequest_Filter_Type = 0
	ListSharesRequest_Filter_TYPE_NO          ListSharesRequest_Filter_Type = 1
	ListSharesRequest_Filter_TYPE_RESOURCE_ID ListSharesRequest_Filter_Type = 2
	ListSharesRequest_Filter_TYPE_OWNER       ListSharesRequest_Filter_Type = 3
	ListSharesRequest_Filter_TYPE_CREATOR     ListSharesRequest_Filter_Type = 4
)

// Enum value maps for ListSharesRequest_Filter_Type.
var (
	ListSharesRequest_Filter_Type_name = map[int32]string{
		0: "TYPE_INVALID",
		1: "TYPE_NO",
		2: "TYPE_RESOURCE_ID",
		3: "TYPE_OWNER",
		4: "TYPE_CREATOR",
	}
	ListSharesRequest_Filter_Type_value = map[string]int32{
		"TYPE_INVALID":     0,
		"TYPE_NO":          1,
		"TYPE_RESOURCE_ID": 2,
		"TYPE_OWNER":       3,
		"TYPE_CREATOR":     4,
	}
)

func (x ListSharesRequest_Filter_Type) Enum() *ListSharesRequest_Filter_Type {
	p := new(ListSharesRequest_Filter_Type)
	*p = x
	return p
}

func (x ListSharesRequest_Filter_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListSharesRequest_Filter_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_cs3_sharing_collaboration_v1beta1_collaboration_api_proto_enumTypes[0].Descriptor()
}

func (ListSharesRequest_Filter_Type) Type() protoreflect.EnumType {
	return &file_cs3_sharing_collaboration_v1beta1_collaboration_api_proto_enumTypes[0]
}

func (x ListSharesRequest_Filter_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListSharesRequest_Filter_Type.Descriptor instead.
func (ListSharesRequest_Filter_Type) EnumDescriptor() ([]byte, []int) {
	return file_cs3_sharing_collaboration_v1beta1_collaboration_api_proto_rawDescGZIP(), []int{4, 0, 0}
}

type CreateShareRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// OPTIONAL.
	// Opaque information.
	Opaque *v1beta1.Opaque `protobuf:"bytes,1,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// REQUIRED.
	// The information of the resource to be shared.
	ResourceInfo *v1beta11.ResourceInfo `protobuf:"bytes,2,opt,name=resource_info,json=resourceInfo,proto3" json:"resource_info,omitempty"`
	// REQUIRED.
	// The share grant for the share.
	Grant *ShareGrant `protobuf:"bytes,3,opt,name=grant,proto3" json:"grant,omitempty"`
}

func (x *CreateShareRequest) Reset() {
	*x = CreateShareRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cs3_sharing_collaboration_v1beta1_collaboration_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateShareRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateShareRequest) ProtoMessage() {}

func (x *CreateShareRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cs3_sharing_collaboration_v1beta1_collaboration_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateShareRequest.ProtoReflect.Descriptor instead.
func (*CreateShareRequest) Descriptor() ([]byte, []int) {
	return file_cs3_sharing_collaboration_v1beta1_collaboration_api_proto_rawDescGZIP(), []int{0}
}

func (x *CreateShareRequest) GetOpaque() *v1beta1.Opaque {
	if x != nil {
		return x.Opaque
	}
	return nil
}

func (x *CreateShareRequest) GetResourceInfo() *v1beta11.ResourceInfo {
	if x != nil {
		return x.ResourceInfo
	}
	return nil
}

func (x *CreateShareRequest) GetGrant() *ShareGrant {
	if x != nil {
		return x.Grant
	}
	return nil
}

type CreateShareResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// REQUIRED.
	// The response status.
	Status *v1beta12.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// OPTIONAL.
	// Opaque information.
	Opaque *v1beta1.Opaque `protobuf:"bytes,2,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// REQUIRED.
	// The created share.
	Share *Share `protobuf:"bytes,3,opt,name=share,proto3" json:"share,omitempty"`
}

func (x *CreateShareResponse) Reset() {
	*x = CreateShareResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cs3_sharing_collaboration_v1beta1_collaboration_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateShareResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateShareResponse) ProtoMessage() {}

func (x *CreateShareResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cs3_sharing_collaboration_v1beta1_collaboration_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateShareResponse.ProtoReflect.Descriptor instead.
func (*CreateShareResponse) Descriptor() ([]byte, []int) {
	return file_cs3_sharing_collaboration_v1beta1_collaboration_api_proto_rawDescGZIP(), []int{1}
}

func (x *CreateShareResponse) GetStatus() *v1beta12.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *CreateShareResponse) GetOpaque() *v1beta1.Opaque {
	if x != nil {
		return x.Opaque
	}
	return nil
}

func (x *CreateShareResponse) GetShare() *Share {
	if x != nil {
		return x.Share
	}
	return nil
}

type UpdateShareRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// OPTIONAL.
	// Opaque information.
	Opaque *v1beta1.Opaque `protobuf:"bytes,1,opt,name=opaque,proto3" json:"opaque,omitempty"` // REQUIRED.
	Ref    *ShareReference `protobuf:"bytes,2,opt,name=ref,proto3" json:"ref,omitempty"`
	// REQUIRED.
	Field *UpdateShareRequest_UpdateField `protobuf:"bytes,3,opt,name=field,proto3" json:"field,omitempty"`
}

func (x *UpdateShareRequest) Reset() {
	*x = UpdateShareRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cs3_sharing_collaboration_v1beta1_collaboration_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateShareRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateShareRequest) ProtoMessage() {}

func (x *UpdateShareRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cs3_sharing_collaboration_v1beta1_collaboration_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateShareRequest.ProtoReflect.Descriptor instead.
func (*UpdateShareRequest) Descriptor() ([]byte, []int) {
	return file_cs3_sharing_collaboration_v1beta1_collaboration_api_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateShareRequest) GetOpaque() *v1beta1.Opaque {
	if x != nil {
		return x.Opaque
	}
	return nil
}

func (x *UpdateShareRequest) GetRef() *ShareReference {
	if x != nil {
		return x.Ref
	}
	return nil
}

func (x *UpdateShareRequest) GetField() *UpdateShareRequest_UpdateField {
	if x != nil {
		return x.Field
	}
	return nil
}

type UpdateShareResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// REQUIRED.
	// The response status.
	Status *v1beta12.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// OPTIONAL.
	// Opaque information.
	Opaque *v1beta1.Opaque `protobuf:"bytes,2,opt,name=opaque,proto3" json:"opaque,omitempty"`
}

func (x *UpdateShareResponse) Reset() {
	*x = UpdateShareResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cs3_sharing_collaboration_v1beta1_collaboration_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateShareResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateShareResponse) ProtoMessage() {}

func (x *UpdateShareResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cs3_sharing_collaboration_v1beta1_collaboration_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateShareResponse.ProtoReflect.Descriptor instead.
func (*UpdateShareResponse) Descriptor() ([]byte, []int) {
	return file_cs3_sharing_collaboration_v1beta1_collaboration_api_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateShareResponse) GetStatus() *v1beta12.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *UpdateShareResponse) GetOpaque() *v1beta1.Opaque {
	if x != nil {
		return x.Opaque
	}
	return nil
}

type ListSharesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// OPTIONAL.
	// Opaque information.
	Opaque *v1beta1.Opaque `protobuf:"bytes,1,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// OPTIONAL.
	// The list of filters to apply if any.
	Filters []*ListSharesRequest_Filter `protobuf:"bytes,2,rep,name=filters,proto3" json:"filters,omitempty"`
}

func (x *ListSharesRequest) Reset() {
	*x = ListSharesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cs3_sharing_collaboration_v1beta1_collaboration_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSharesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSharesRequest) ProtoMessage() {}

func (x *ListSharesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cs3_sharing_collaboration_v1beta1_collaboration_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSharesRequest.ProtoReflect.Descriptor instead.
func (*ListSharesRequest) Descriptor() ([]byte, []int) {
	return file_cs3_sharing_collaboration_v1beta1_collaboration_api_proto_rawDescGZIP(), []int{4}
}

func (x *ListSharesRequest) GetOpaque() *v1beta1.Opaque {
	if x != nil {
		return x.Opaque
	}
	return nil
}

func (x *ListSharesRequest) GetFilters() []*ListSharesRequest_Filter {
	if x != nil {
		return x.Filters
	}
	return nil
}

type ListSharesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// REQUIRED.
	// The response status.
	Status *v1beta12.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// OPTIONAL.
	// Opaque information.
	Opaque *v1beta1.Opaque `protobuf:"bytes,2,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// REQUIRED.
	// The list of shares.
	Shares []*Share `protobuf:"bytes,3,rep,name=shares,proto3" json:"shares,omitempty"`
}

func (x *ListSharesResponse) Reset() {
	*x = ListSharesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cs3_sharing_collaboration_v1beta1_collaboration_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSharesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSharesResponse) ProtoMessage() {}

func (x *ListSharesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cs3_sharing_collaboration_v1beta1_collaboration_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSharesResponse.ProtoReflect.Descriptor instead.
func (*ListSharesResponse) Descriptor() ([]byte, []int) {
	return file_cs3_sharing_collaboration_v1beta1_collaboration_api_proto_rawDescGZIP(), []int{5}
}

func (x *ListSharesResponse) GetStatus() *v1beta12.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ListSharesResponse) GetOpaque() *v1beta1.Opaque {
	if x != nil {
		return x.Opaque
	}
	return nil
}

func (x *ListSharesResponse) GetShares() []*Share {
	if x != nil {
		return x.Shares
	}
	return nil
}

type RemoveShareRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// OPTIONAL.
	// Opaque information.
	Opaque *v1beta1.Opaque `protobuf:"bytes,1,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// REQUIRED.
	// The reference to which the action should be performed.
	Ref *ShareReference `protobuf:"bytes,2,opt,name=ref,proto3" json:"ref,omitempty"`
}

func (x *RemoveShareRequest) Reset() {
	*x = RemoveShareRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cs3_sharing_collaboration_v1beta1_collaboration_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveShareRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveShareRequest) ProtoMessage() {}

func (x *RemoveShareRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cs3_sharing_collaboration_v1beta1_collaboration_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveShareRequest.ProtoReflect.Descriptor instead.
func (*RemoveShareRequest) Descriptor() ([]byte, []int) {
	return file_cs3_sharing_collaboration_v1beta1_collaboration_api_proto_rawDescGZIP(), []int{6}
}

func (x *RemoveShareRequest) GetOpaque() *v1beta1.Opaque {
	if x != nil {
		return x.Opaque
	}
	return nil
}

func (x *RemoveShareRequest) GetRef() *ShareReference {
	if x != nil {
		return x.Ref
	}
	return nil
}

type RemoveShareResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// REQUIRED.
	// The response status.
	Status *v1beta12.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// OPTIONAL.
	// Opaque information.
	Opaque *v1beta1.Opaque `protobuf:"bytes,2,opt,name=opaque,proto3" json:"opaque,omitempty"`
}

func (x *RemoveShareResponse) Reset() {
	*x = RemoveShareResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cs3_sharing_collaboration_v1beta1_collaboration_api_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveShareResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveShareResponse) ProtoMessage() {}

func (x *RemoveShareResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cs3_sharing_collaboration_v1beta1_collaboration_api_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveShareResponse.ProtoReflect.Descriptor instead.
func (*RemoveShareResponse) Descriptor() ([]byte, []int) {
	return file_cs3_sharing_collaboration_v1beta1_collaboration_api_proto_rawDescGZIP(), []int{7}
}

func (x *RemoveShareResponse) GetStatus() *v1beta12.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *RemoveShareResponse) GetOpaque() *v1beta1.Opaque {
	if x != nil {
		return x.Opaque
	}
	return nil
}

type GetShareRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// OPTIONAL.
	// Opaque information.
	Opaque *v1beta1.Opaque `protobuf:"bytes,1,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// REQUIRED.
	// The reference to which the action should be performed.
	Ref *ShareReference `protobuf:"bytes,2,opt,name=ref,proto3" json:"ref,omitempty"`
}

func (x *GetShareRequest) Reset() {
	*x = GetShareRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cs3_sharing_collaboration_v1beta1_collaboration_api_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetShareRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShareRequest) ProtoMessage() {}

func (x *GetShareRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cs3_sharing_collaboration_v1beta1_collaboration_api_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShareRequest.ProtoReflect.Descriptor instead.
func (*GetShareRequest) Descriptor() ([]byte, []int) {
	return file_cs3_sharing_collaboration_v1beta1_collaboration_api_proto_rawDescGZIP(), []int{8}
}

func (x *GetShareRequest) GetOpaque() *v1beta1.Opaque {
	if x != nil {
		return x.Opaque
	}
	return nil
}

func (x *GetShareRequest) GetRef() *ShareReference {
	if x != nil {
		return x.Ref
	}
	return nil
}

type GetShareResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// REQUIRED.
	// The response status.
	Status *v1beta12.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// OPTIONAL.
	// Opaque information.
	Opaque *v1beta1.Opaque `protobuf:"bytes,2,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// REQUIRED.
	// The share.
	Share *Share `protobuf:"bytes,3,opt,name=share,proto3" json:"share,omitempty"`
}

func (x *GetShareResponse) Reset() {
	*x = GetShareResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cs3_sharing_collaboration_v1beta1_collaboration_api_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetShareResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShareResponse) ProtoMessage() {}

func (x *GetShareResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cs3_sharing_collaboration_v1beta1_collaboration_api_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShareResponse.ProtoReflect.Descriptor instead.
func (*GetShareResponse) Descriptor() ([]byte, []int) {
	return file_cs3_sharing_collaboration_v1beta1_collaboration_api_proto_rawDescGZIP(), []int{9}
}

func (x *GetShareResponse) GetStatus() *v1beta12.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetShareResponse) GetOpaque() *v1beta1.Opaque {
	if x != nil {
		return x.Opaque
	}
	return nil
}

func (x *GetShareResponse) GetShare() *Share {
	if x != nil {
		return x.Share
	}
	return nil
}

type ListReceivedSharesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// OPTIONAL.
	// Opaque information.
	Opaque *v1beta1.Opaque `protobuf:"bytes,1,opt,name=opaque,proto3" json:"opaque,omitempty"`
}

func (x *ListReceivedSharesRequest) Reset() {
	*x = ListReceivedSharesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cs3_sharing_collaboration_v1beta1_collaboration_api_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListReceivedSharesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListReceivedSharesRequest) ProtoMessage() {}

func (x *ListReceivedSharesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cs3_sharing_collaboration_v1beta1_collaboration_api_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListReceivedSharesRequest.ProtoReflect.Descriptor instead.
func (*ListReceivedSharesRequest) Descriptor() ([]byte, []int) {
	return file_cs3_sharing_collaboration_v1beta1_collaboration_api_proto_rawDescGZIP(), []int{10}
}

func (x *ListReceivedSharesRequest) GetOpaque() *v1beta1.Opaque {
	if x != nil {
		return x.Opaque
	}
	return nil
}

type ListReceivedSharesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// REQUIRED.
	// The response status.
	Status *v1beta12.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// OPTIONAL.
	// Opaque information.
	Opaque *v1beta1.Opaque `protobuf:"bytes,2,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// REQUIRED.
	// The list of received shares.
	Shares []*ReceivedShare `protobuf:"bytes,3,rep,name=shares,proto3" json:"shares,omitempty"`
}

func (x *ListReceivedSharesResponse) Reset() {
	*x = ListReceivedSharesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cs3_sharing_collaboration_v1beta1_collaboration_api_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListReceivedSharesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListReceivedSharesResponse) ProtoMessage() {}

func (x *ListReceivedSharesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cs3_sharing_collaboration_v1beta1_collaboration_api_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListReceivedSharesResponse.ProtoReflect.Descriptor instead.
func (*ListReceivedSharesResponse) Descriptor() ([]byte, []int) {
	return file_cs3_sharing_collaboration_v1beta1_collaboration_api_proto_rawDescGZIP(), []int{11}
}

func (x *ListReceivedSharesResponse) GetStatus() *v1beta12.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ListReceivedSharesResponse) GetOpaque() *v1beta1.Opaque {
	if x != nil {
		return x.Opaque
	}
	return nil
}

func (x *ListReceivedSharesResponse) GetShares() []*ReceivedShare {
	if x != nil {
		return x.Shares
	}
	return nil
}

// TODO(labkode): clean up display_name ? we'll use storage links for that.
type UpdateReceivedShareRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// OPTIONAL.
	// Opaque information.
	Opaque *v1beta1.Opaque `protobuf:"bytes,1,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// REQUIRED.
	Ref   *ShareReference                         `protobuf:"bytes,2,opt,name=ref,proto3" json:"ref,omitempty"`
	Field *UpdateReceivedShareRequest_UpdateField `protobuf:"bytes,3,opt,name=field,proto3" json:"field,omitempty"`
}

func (x *UpdateReceivedShareRequest) Reset() {
	*x = UpdateReceivedShareRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cs3_sharing_collaboration_v1beta1_collaboration_api_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateReceivedShareRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateReceivedShareRequest) ProtoMessage() {}

func (x *UpdateReceivedShareRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cs3_sharing_collaboration_v1beta1_collaboration_api_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateReceivedShareRequest.ProtoReflect.Descriptor instead.
func (*UpdateReceivedShareRequest) Descriptor() ([]byte, []int) {
	return file_cs3_sharing_collaboration_v1beta1_collaboration_api_proto_rawDescGZIP(), []int{12}
}

func (x *UpdateReceivedShareRequest) GetOpaque() *v1beta1.Opaque {
	if x != nil {
		return x.Opaque
	}
	return nil
}

func (x *UpdateReceivedShareRequest) GetRef() *ShareReference {
	if x != nil {
		return x.Ref
	}
	return nil
}

func (x *UpdateReceivedShareRequest) GetField() *UpdateReceivedShareRequest_UpdateField {
	if x != nil {
		return x.Field
	}
	return nil
}

type UpdateReceivedShareResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// REQUIRED.
	// The response status.
	Status *v1beta12.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// OPTIONAL.
	// Opaque information.
	Opaque *v1beta1.Opaque `protobuf:"bytes,2,opt,name=opaque,proto3" json:"opaque,omitempty"`
}

func (x *UpdateReceivedShareResponse) Reset() {
	*x = UpdateReceivedShareResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cs3_sharing_collaboration_v1beta1_collaboration_api_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateReceivedShareResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateReceivedShareResponse) ProtoMessage() {}

func (x *UpdateReceivedShareResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cs3_sharing_collaboration_v1beta1_collaboration_api_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateReceivedShareResponse.ProtoReflect.Descriptor instead.
func (*UpdateReceivedShareResponse) Descriptor() ([]byte, []int) {
	return file_cs3_sharing_collaboration_v1beta1_collaboration_api_proto_rawDescGZIP(), []int{13}
}

func (x *UpdateReceivedShareResponse) GetStatus() *v1beta12.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *UpdateReceivedShareResponse) GetOpaque() *v1beta1.Opaque {
	if x != nil {
		return x.Opaque
	}
	return nil
}

type GetReceivedShareRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// OPTIONAL.
	// Opaque information.
	Opaque *v1beta1.Opaque `protobuf:"bytes,1,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// REQUIRED.
	// The reference of the received share.
	Ref *ShareReference `protobuf:"bytes,2,opt,name=ref,proto3" json:"ref,omitempty"`
}

func (x *GetReceivedShareRequest) Reset() {
	*x = GetReceivedShareRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cs3_sharing_collaboration_v1beta1_collaboration_api_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReceivedShareRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReceivedShareRequest) ProtoMessage() {}

func (x *GetReceivedShareRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cs3_sharing_collaboration_v1beta1_collaboration_api_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReceivedShareRequest.ProtoReflect.Descriptor instead.
func (*GetReceivedShareRequest) Descriptor() ([]byte, []int) {
	return file_cs3_sharing_collaboration_v1beta1_collaboration_api_proto_rawDescGZIP(), []int{14}
}

func (x *GetReceivedShareRequest) GetOpaque() *v1beta1.Opaque {
	if x != nil {
		return x.Opaque
	}
	return nil
}

func (x *GetReceivedShareRequest) GetRef() *ShareReference {
	if x != nil {
		return x.Ref
	}
	return nil
}

type GetReceivedShareResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// REQUIRED.
	// The response status.
	Status *v1beta12.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// OPTIONAL.
	// Opaque information.
	Opaque *v1beta1.Opaque `protobuf:"bytes,2,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// REQUIRED.
	// The share.
	Share *ReceivedShare `protobuf:"bytes,3,opt,name=share,proto3" json:"share,omitempty"`
}

func (x *GetReceivedShareResponse) Reset() {
	*x = GetReceivedShareResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cs3_sharing_collaboration_v1beta1_collaboration_api_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReceivedShareResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReceivedShareResponse) ProtoMessage() {}

func (x *GetReceivedShareResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cs3_sharing_collaboration_v1beta1_collaboration_api_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReceivedShareResponse.ProtoReflect.Descriptor instead.
func (*GetReceivedShareResponse) Descriptor() ([]byte, []int) {
	return file_cs3_sharing_collaboration_v1beta1_collaboration_api_proto_rawDescGZIP(), []int{15}
}

func (x *GetReceivedShareResponse) GetStatus() *v1beta12.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetReceivedShareResponse) GetOpaque() *v1beta1.Opaque {
	if x != nil {
		return x.Opaque
	}
	return nil
}

func (x *GetReceivedShareResponse) GetShare() *ReceivedShare {
	if x != nil {
		return x.Share
	}
	return nil
}

// REQUIRED.
type UpdateShareRequest_UpdateField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// One of the update fields MUST be specified.
	//
	// Types that are assignable to Field:
	//	*UpdateShareRequest_UpdateField_Permissions
	//	*UpdateShareRequest_UpdateField_DisplayName
	Field isUpdateShareRequest_UpdateField_Field `protobuf_oneof:"field"`
}

func (x *UpdateShareRequest_UpdateField) Reset() {
	*x = UpdateShareRequest_UpdateField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cs3_sharing_collaboration_v1beta1_collaboration_api_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateShareRequest_UpdateField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateShareRequest_UpdateField) ProtoMessage() {}

func (x *UpdateShareRequest_UpdateField) ProtoReflect() protoreflect.Message {
	mi := &file_cs3_sharing_collaboration_v1beta1_collaboration_api_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateShareRequest_UpdateField.ProtoReflect.Descriptor instead.
func (*UpdateShareRequest_UpdateField) Descriptor() ([]byte, []int) {
	return file_cs3_sharing_collaboration_v1beta1_collaboration_api_proto_rawDescGZIP(), []int{2, 0}
}

func (m *UpdateShareRequest_UpdateField) GetField() isUpdateShareRequest_UpdateField_Field {
	if m != nil {
		return m.Field
	}
	return nil
}

func (x *UpdateShareRequest_UpdateField) GetPermissions() *SharePermissions {
	if x, ok := x.GetField().(*UpdateShareRequest_UpdateField_Permissions); ok {
		return x.Permissions
	}
	return nil
}

func (x *UpdateShareRequest_UpdateField) GetDisplayName() string {
	if x, ok := x.GetField().(*UpdateShareRequest_UpdateField_DisplayName); ok {
		return x.DisplayName
	}
	return ""
}

type isUpdateShareRequest_UpdateField_Field interface {
	isUpdateShareRequest_UpdateField_Field()
}

type UpdateShareRequest_UpdateField_Permissions struct {
	// Update the permissions.
	Permissions *SharePermissions `protobuf:"bytes,2,opt,name=permissions,proto3,oneof"`
}

type UpdateShareRequest_UpdateField_DisplayName struct {
	// Update the display name.
	DisplayName string `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3,oneof"`
}

func (*UpdateShareRequest_UpdateField_Permissions) isUpdateShareRequest_UpdateField_Field() {}

func (*UpdateShareRequest_UpdateField_DisplayName) isUpdateShareRequest_UpdateField_Field() {}

// REQUIRED.
// represents a filter to apply to the request.
type ListSharesRequest_Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// REQUIRED.
	Type ListSharesRequest_Filter_Type `protobuf:"varint,2,opt,name=type,proto3,enum=cs3.sharing.collaboration.v1beta1.ListSharesRequest_Filter_Type" json:"type,omitempty"`
	// Types that are assignable to Term:
	//	*ListSharesRequest_Filter_ResourceId
	//	*ListSharesRequest_Filter_Owner
	//	*ListSharesRequest_Filter_Creator
	Term isListSharesRequest_Filter_Term `protobuf_oneof:"term"`
}

func (x *ListSharesRequest_Filter) Reset() {
	*x = ListSharesRequest_Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cs3_sharing_collaboration_v1beta1_collaboration_api_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSharesRequest_Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSharesRequest_Filter) ProtoMessage() {}

func (x *ListSharesRequest_Filter) ProtoReflect() protoreflect.Message {
	mi := &file_cs3_sharing_collaboration_v1beta1_collaboration_api_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSharesRequest_Filter.ProtoReflect.Descriptor instead.
func (*ListSharesRequest_Filter) Descriptor() ([]byte, []int) {
	return file_cs3_sharing_collaboration_v1beta1_collaboration_api_proto_rawDescGZIP(), []int{4, 0}
}

func (x *ListSharesRequest_Filter) GetType() ListSharesRequest_Filter_Type {
	if x != nil {
		return x.Type
	}
	return ListSharesRequest_Filter_TYPE_INVALID
}

func (m *ListSharesRequest_Filter) GetTerm() isListSharesRequest_Filter_Term {
	if m != nil {
		return m.Term
	}
	return nil
}

func (x *ListSharesRequest_Filter) GetResourceId() *v1beta11.ResourceId {
	if x, ok := x.GetTerm().(*ListSharesRequest_Filter_ResourceId); ok {
		return x.ResourceId
	}
	return nil
}

func (x *ListSharesRequest_Filter) GetOwner() *v1beta13.UserId {
	if x, ok := x.GetTerm().(*ListSharesRequest_Filter_Owner); ok {
		return x.Owner
	}
	return nil
}

func (x *ListSharesRequest_Filter) GetCreator() *v1beta13.UserId {
	if x, ok := x.GetTerm().(*ListSharesRequest_Filter_Creator); ok {
		return x.Creator
	}
	return nil
}

type isListSharesRequest_Filter_Term interface {
	isListSharesRequest_Filter_Term()
}

type ListSharesRequest_Filter_ResourceId struct {
	ResourceId *v1beta11.ResourceId `protobuf:"bytes,3,opt,name=resource_id,json=resourceId,proto3,oneof"`
}

type ListSharesRequest_Filter_Owner struct {
	Owner *v1beta13.UserId `protobuf:"bytes,4,opt,name=owner,proto3,oneof"`
}

type ListSharesRequest_Filter_Creator struct {
	Creator *v1beta13.UserId `protobuf:"bytes,5,opt,name=creator,proto3,oneof"`
}

func (*ListSharesRequest_Filter_ResourceId) isListSharesRequest_Filter_Term() {}

func (*ListSharesRequest_Filter_Owner) isListSharesRequest_Filter_Term() {}

func (*ListSharesRequest_Filter_Creator) isListSharesRequest_Filter_Term() {}

// REQUIRED.
// The field to update.
type UpdateReceivedShareRequest_UpdateField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// One of the update fields MUST be specified.
	//
	// Types that are assignable to Field:
	//	*UpdateReceivedShareRequest_UpdateField_DisplayName
	//	*UpdateReceivedShareRequest_UpdateField_State
	Field isUpdateReceivedShareRequest_UpdateField_Field `protobuf_oneof:"field"`
}

func (x *UpdateReceivedShareRequest_UpdateField) Reset() {
	*x = UpdateReceivedShareRequest_UpdateField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cs3_sharing_collaboration_v1beta1_collaboration_api_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateReceivedShareRequest_UpdateField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateReceivedShareRequest_UpdateField) ProtoMessage() {}

func (x *UpdateReceivedShareRequest_UpdateField) ProtoReflect() protoreflect.Message {
	mi := &file_cs3_sharing_collaboration_v1beta1_collaboration_api_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateReceivedShareRequest_UpdateField.ProtoReflect.Descriptor instead.
func (*UpdateReceivedShareRequest_UpdateField) Descriptor() ([]byte, []int) {
	return file_cs3_sharing_collaboration_v1beta1_collaboration_api_proto_rawDescGZIP(), []int{12, 0}
}

func (m *UpdateReceivedShareRequest_UpdateField) GetField() isUpdateReceivedShareRequest_UpdateField_Field {
	if m != nil {
		return m.Field
	}
	return nil
}

func (x *UpdateReceivedShareRequest_UpdateField) GetDisplayName() string {
	if x, ok := x.GetField().(*UpdateReceivedShareRequest_UpdateField_DisplayName); ok {
		return x.DisplayName
	}
	return ""
}

func (x *UpdateReceivedShareRequest_UpdateField) GetState() ShareState {
	if x, ok := x.GetField().(*UpdateReceivedShareRequest_UpdateField_State); ok {
		return x.State
	}
	return ShareState_SHARE_STATE_INVALID
}

type isUpdateReceivedShareRequest_UpdateField_Field interface {
	isUpdateReceivedShareRequest_UpdateField_Field()
}

type UpdateReceivedShareRequest_UpdateField_DisplayName struct {
	// Update the display name.
	DisplayName string `protobuf:"bytes,1,opt,name=display_name,json=displayName,proto3,oneof"`
}

type UpdateReceivedShareRequest_UpdateField_State struct {
	// Update the share state
	State ShareState `protobuf:"varint,2,opt,name=state,proto3,enum=cs3.sharing.collaboration.v1beta1.ShareState,oneof"`
}

func (*UpdateReceivedShareRequest_UpdateField_DisplayName) isUpdateReceivedShareRequest_UpdateField_Field() {
}

func (*UpdateReceivedShareRequest_UpdateField_State) isUpdateReceivedShareRequest_UpdateField_Field() {
}

var File_cs3_sharing_collaboration_v1beta1_collaboration_api_proto protoreflect.FileDescriptor

var file_cs3_sharing_collaboration_v1beta1_collaboration_api_proto_rawDesc = []byte{
	0x0a, 0x39, 0x63, 0x73, 0x33, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x63, 0x6f,
	0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x21, 0x63, 0x73, 0x33,
	0x2e, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x1a, 0x29,
	0x63, 0x73, 0x33, 0x2f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2f, 0x75, 0x73, 0x65,
	0x72, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x63, 0x73, 0x33, 0x2f, 0x72,
	0x70, 0x63, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x31, 0x63, 0x73, 0x33, 0x2f, 0x73, 0x68, 0x61,
	0x72, 0x69, 0x6e, 0x67, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x63, 0x73, 0x33, 0x2f,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x63, 0x73, 0x33, 0x2f, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xdd, 0x01, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31,
	0x0a, 0x06, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x63, 0x73, 0x33, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x52, 0x06, 0x6f, 0x70, 0x61, 0x71, 0x75,
	0x65, 0x12, 0x4f, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x43, 0x0a, 0x05, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e,
	0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x47, 0x72, 0x61, 0x6e, 0x74,
	0x52, 0x05, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x22, 0xb9, 0x01, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x31, 0x0a, 0x06, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x52, 0x06, 0x6f, 0x70, 0x61,
	0x71, 0x75, 0x65, 0x12, 0x3e, 0x0a, 0x05, 0x73, 0x68, 0x61, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67,
	0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x05, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x22, 0xfc, 0x02, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x6f, 0x70,
	0x61, 0x71, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x73, 0x33,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4f,
	0x70, 0x61, 0x71, 0x75, 0x65, 0x52, 0x06, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x12, 0x43, 0x0a,
	0x03, 0x72, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x73, 0x33,
	0x2e, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x03, 0x72,
	0x65, 0x66, 0x12, 0x57, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x41, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e,
	0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x1a, 0x94, 0x01, 0x0a, 0x0b,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x57, 0x0a, 0x0b, 0x70,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x63,
	0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x23, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x22, 0x79, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x73, 0x33, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x06, 0x6f, 0x70,
	0x61, 0x71, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x73, 0x33,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4f,
	0x70, 0x61, 0x71, 0x75, 0x65, 0x52, 0x06, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x22, 0xac, 0x04,
	0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x52, 0x06,
	0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x12, 0x55, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x73, 0x68,
	0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x8c, 0x03,
	0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x54, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x40, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x73, 0x68, 0x61,
	0x72, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x4b,
	0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x48, 0x00, 0x52,
	0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x05, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x73, 0x33,
	0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x48, 0x00, 0x52,
	0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x48, 0x00, 0x52, 0x07, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x5d, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a,
	0x0c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12,
	0x0b, 0x0a, 0x07, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x49, 0x44,
	0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x57, 0x4e, 0x45, 0x52,
	0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54,
	0x4f, 0x52, 0x10, 0x04, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x22, 0xba, 0x01, 0x0a,
	0x12, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x06, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x52,
	0x06, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x12, 0x40, 0x0a, 0x06, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x73, 0x68,
	0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x52, 0x06, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x22, 0x8c, 0x01, 0x0a, 0x12, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x31, 0x0a, 0x06, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x52, 0x06, 0x6f, 0x70, 0x61,
	0x71, 0x75, 0x65, 0x12, 0x43, 0x0a, 0x03, 0x72, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x31, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x63,
	0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x03, 0x72, 0x65, 0x66, 0x22, 0x79, 0x0a, 0x13, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x31, 0x0a, 0x06, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x52, 0x06, 0x6f, 0x70, 0x61,
	0x71, 0x75, 0x65, 0x22, 0x89, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x6f, 0x70, 0x61, 0x71, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4f, 0x70, 0x61, 0x71,
	0x75, 0x65, 0x52, 0x06, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x12, 0x43, 0x0a, 0x03, 0x72, 0x65,
	0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x73, 0x68,
	0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x03, 0x72, 0x65, 0x66, 0x22,
	0xb6, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x06, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65,
	0x52, 0x06, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x12, 0x3e, 0x0a, 0x05, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x73, 0x68,
	0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x52, 0x05, 0x73, 0x68, 0x61, 0x72, 0x65, 0x22, 0x4e, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65,
	0x52, 0x06, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x22, 0xca, 0x01, 0x0a, 0x1a, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x06, 0x6f, 0x70, 0x61, 0x71,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4f, 0x70, 0x61,
	0x71, 0x75, 0x65, 0x52, 0x06, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x12, 0x48, 0x0a, 0x06, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x73,
	0x33, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62,
	0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x06, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x73, 0x22, 0xfa, 0x02, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x52,
	0x06, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x12, 0x43, 0x0a, 0x03, 0x72, 0x65, 0x66, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x69,
	0x6e, 0x67, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x03, 0x72, 0x65, 0x66, 0x12, 0x5f, 0x0a, 0x05,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x63, 0x73,
	0x33, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62,
	0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x1a, 0x82, 0x01,
	0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x23, 0x0a,
	0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x45, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2d, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e,
	0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x22, 0x81, 0x01, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x06, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x52, 0x06,
	0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x22, 0x91, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x52, 0x06, 0x6f,
	0x70, 0x61, 0x71, 0x75, 0x65, 0x12, 0x43, 0x0a, 0x03, 0x72, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67,
	0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x03, 0x72, 0x65, 0x66, 0x22, 0xc6, 0x01, 0x0a, 0x18, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x06, 0x6f, 0x70, 0x61, 0x71,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4f, 0x70, 0x61,
	0x71, 0x75, 0x65, 0x52, 0x06, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x12, 0x46, 0x0a, 0x05, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x73, 0x33,
	0x2e, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x05, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x32, 0xb5, 0x08, 0x0a, 0x10, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x50, 0x49, 0x12, 0x7c, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x12, 0x35, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x73, 0x68,
	0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36,
	0x2e, 0x63, 0x73, 0x33, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6f, 0x6c,
	0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7c, 0x0a, 0x0b, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x12, 0x35, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x73, 0x68, 0x61, 0x72,
	0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x63,
	0x73, 0x33, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x61,
	0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x73, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x12, 0x32, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x63,
	0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x69,
	0x6e, 0x67, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x79, 0x0a, 0x0a, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x12, 0x34, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x73, 0x68,
	0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e,
	0x63, 0x73, 0x33, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6f, 0x6c, 0x6c,
	0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7c, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x12, 0x35, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e,
	0x67, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x63, 0x73, 0x33,
	0x2e, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x91, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x12, 0x3c, 0x2e, 0x63, 0x73, 0x33, 0x2e,
	0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x73, 0x68,
	0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x94, 0x01, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x53, 0x68, 0x61, 0x72, 0x65, 0x12, 0x3d,
	0x2e, 0x63, 0x73, 0x33, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6f, 0x6c,
	0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e,
	0x63, 0x73, 0x33, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6f, 0x6c, 0x6c,
	0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8b, 0x01,
	0x0a, 0x10, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x12, 0x3a, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67,
	0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b,
	0x2e, 0x63, 0x73, 0x33, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6f, 0x6c,
	0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0xa4, 0x01, 0x0a, 0x25,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e,
	0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x42, 0x15, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x14,
	0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0xa2, 0x02, 0x03, 0x43, 0x53, 0x43, 0xaa, 0x02, 0x21, 0x43, 0x73, 0x33,
	0x2e, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x56, 0x31, 0x42, 0x65, 0x74, 0x61, 0x31, 0xca, 0x02,
	0x21, 0x43, 0x73, 0x33, 0x5c, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x5c, 0x43, 0x6f, 0x6c,
	0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5c, 0x56, 0x31, 0x42, 0x65, 0x74,
	0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cs3_sharing_collaboration_v1beta1_collaboration_api_proto_rawDescOnce sync.Once
	file_cs3_sharing_collaboration_v1beta1_collaboration_api_proto_rawDescData = file_cs3_sharing_collaboration_v1beta1_collaboration_api_proto_rawDesc
)

func file_cs3_sharing_collaboration_v1beta1_collaboration_api_proto_rawDescGZIP() []byte {
	file_cs3_sharing_collaboration_v1beta1_collaboration_api_proto_rawDescOnce.Do(func() {
		file_cs3_sharing_collaboration_v1beta1_collaboration_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_cs3_sharing_collaboration_v1beta1_collaboration_api_proto_rawDescData)
	})
	return file_cs3_sharing_collaboration_v1beta1_collaboration_api_proto_rawDescData
}

var file_cs3_sharing_collaboration_v1beta1_collaboration_api_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_cs3_sharing_collaboration_v1beta1_collaboration_api_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_cs3_sharing_collaboration_v1beta1_collaboration_api_proto_goTypes = []interface{}{
	(ListSharesRequest_Filter_Type)(0),             // 0: cs3.sharing.collaboration.v1beta1.ListSharesRequest.Filter.Type
	(*CreateShareRequest)(nil),                     // 1: cs3.sharing.collaboration.v1beta1.CreateShareRequest
	(*CreateShareResponse)(nil),                    // 2: cs3.sharing.collaboration.v1beta1.CreateShareResponse
	(*UpdateShareRequest)(nil),                     // 3: cs3.sharing.collaboration.v1beta1.UpdateShareRequest
	(*UpdateShareResponse)(nil),                    // 4: cs3.sharing.collaboration.v1beta1.UpdateShareResponse
	(*ListSharesRequest)(nil),                      // 5: cs3.sharing.collaboration.v1beta1.ListSharesRequest
	(*ListSharesResponse)(nil),                     // 6: cs3.sharing.collaboration.v1beta1.ListSharesResponse
	(*RemoveShareRequest)(nil),                     // 7: cs3.sharing.collaboration.v1beta1.RemoveShareRequest
	(*RemoveShareResponse)(nil),                    // 8: cs3.sharing.collaboration.v1beta1.RemoveShareResponse
	(*GetShareRequest)(nil),                        // 9: cs3.sharing.collaboration.v1beta1.GetShareRequest
	(*GetShareResponse)(nil),                       // 10: cs3.sharing.collaboration.v1beta1.GetShareResponse
	(*ListReceivedSharesRequest)(nil),              // 11: cs3.sharing.collaboration.v1beta1.ListReceivedSharesRequest
	(*ListReceivedSharesResponse)(nil),             // 12: cs3.sharing.collaboration.v1beta1.ListReceivedSharesResponse
	(*UpdateReceivedShareRequest)(nil),             // 13: cs3.sharing.collaboration.v1beta1.UpdateReceivedShareRequest
	(*UpdateReceivedShareResponse)(nil),            // 14: cs3.sharing.collaboration.v1beta1.UpdateReceivedShareResponse
	(*GetReceivedShareRequest)(nil),                // 15: cs3.sharing.collaboration.v1beta1.GetReceivedShareRequest
	(*GetReceivedShareResponse)(nil),               // 16: cs3.sharing.collaboration.v1beta1.GetReceivedShareResponse
	(*UpdateShareRequest_UpdateField)(nil),         // 17: cs3.sharing.collaboration.v1beta1.UpdateShareRequest.UpdateField
	(*ListSharesRequest_Filter)(nil),               // 18: cs3.sharing.collaboration.v1beta1.ListSharesRequest.Filter
	(*UpdateReceivedShareRequest_UpdateField)(nil), // 19: cs3.sharing.collaboration.v1beta1.UpdateReceivedShareRequest.UpdateField
	(*v1beta1.Opaque)(nil),                         // 20: cs3.types.v1beta1.Opaque
	(*v1beta11.ResourceInfo)(nil),                  // 21: cs3.storage.provider.v1beta1.ResourceInfo
	(*ShareGrant)(nil),                             // 22: cs3.sharing.collaboration.v1beta1.ShareGrant
	(*v1beta12.Status)(nil),                        // 23: cs3.rpc.v1beta1.Status
	(*Share)(nil),                                  // 24: cs3.sharing.collaboration.v1beta1.Share
	(*ShareReference)(nil),                         // 25: cs3.sharing.collaboration.v1beta1.ShareReference
	(*ReceivedShare)(nil),                          // 26: cs3.sharing.collaboration.v1beta1.ReceivedShare
	(*SharePermissions)(nil),                       // 27: cs3.sharing.collaboration.v1beta1.SharePermissions
	(*v1beta11.ResourceId)(nil),                    // 28: cs3.storage.provider.v1beta1.ResourceId
	(*v1beta13.UserId)(nil),                        // 29: cs3.identity.user.v1beta1.UserId
	(ShareState)(0),                                // 30: cs3.sharing.collaboration.v1beta1.ShareState
}
var file_cs3_sharing_collaboration_v1beta1_collaboration_api_proto_depIdxs = []int32{
	20, // 0: cs3.sharing.collaboration.v1beta1.CreateShareRequest.opaque:type_name -> cs3.types.v1beta1.Opaque
	21, // 1: cs3.sharing.collaboration.v1beta1.CreateShareRequest.resource_info:type_name -> cs3.storage.provider.v1beta1.ResourceInfo
	22, // 2: cs3.sharing.collaboration.v1beta1.CreateShareRequest.grant:type_name -> cs3.sharing.collaboration.v1beta1.ShareGrant
	23, // 3: cs3.sharing.collaboration.v1beta1.CreateShareResponse.status:type_name -> cs3.rpc.v1beta1.Status
	20, // 4: cs3.sharing.collaboration.v1beta1.CreateShareResponse.opaque:type_name -> cs3.types.v1beta1.Opaque
	24, // 5: cs3.sharing.collaboration.v1beta1.CreateShareResponse.share:type_name -> cs3.sharing.collaboration.v1beta1.Share
	20, // 6: cs3.sharing.collaboration.v1beta1.UpdateShareRequest.opaque:type_name -> cs3.types.v1beta1.Opaque
	25, // 7: cs3.sharing.collaboration.v1beta1.UpdateShareRequest.ref:type_name -> cs3.sharing.collaboration.v1beta1.ShareReference
	17, // 8: cs3.sharing.collaboration.v1beta1.UpdateShareRequest.field:type_name -> cs3.sharing.collaboration.v1beta1.UpdateShareRequest.UpdateField
	23, // 9: cs3.sharing.collaboration.v1beta1.UpdateShareResponse.status:type_name -> cs3.rpc.v1beta1.Status
	20, // 10: cs3.sharing.collaboration.v1beta1.UpdateShareResponse.opaque:type_name -> cs3.types.v1beta1.Opaque
	20, // 11: cs3.sharing.collaboration.v1beta1.ListSharesRequest.opaque:type_name -> cs3.types.v1beta1.Opaque
	18, // 12: cs3.sharing.collaboration.v1beta1.ListSharesRequest.filters:type_name -> cs3.sharing.collaboration.v1beta1.ListSharesRequest.Filter
	23, // 13: cs3.sharing.collaboration.v1beta1.ListSharesResponse.status:type_name -> cs3.rpc.v1beta1.Status
	20, // 14: cs3.sharing.collaboration.v1beta1.ListSharesResponse.opaque:type_name -> cs3.types.v1beta1.Opaque
	24, // 15: cs3.sharing.collaboration.v1beta1.ListSharesResponse.shares:type_name -> cs3.sharing.collaboration.v1beta1.Share
	20, // 16: cs3.sharing.collaboration.v1beta1.RemoveShareRequest.opaque:type_name -> cs3.types.v1beta1.Opaque
	25, // 17: cs3.sharing.collaboration.v1beta1.RemoveShareRequest.ref:type_name -> cs3.sharing.collaboration.v1beta1.ShareReference
	23, // 18: cs3.sharing.collaboration.v1beta1.RemoveShareResponse.status:type_name -> cs3.rpc.v1beta1.Status
	20, // 19: cs3.sharing.collaboration.v1beta1.RemoveShareResponse.opaque:type_name -> cs3.types.v1beta1.Opaque
	20, // 20: cs3.sharing.collaboration.v1beta1.GetShareRequest.opaque:type_name -> cs3.types.v1beta1.Opaque
	25, // 21: cs3.sharing.collaboration.v1beta1.GetShareRequest.ref:type_name -> cs3.sharing.collaboration.v1beta1.ShareReference
	23, // 22: cs3.sharing.collaboration.v1beta1.GetShareResponse.status:type_name -> cs3.rpc.v1beta1.Status
	20, // 23: cs3.sharing.collaboration.v1beta1.GetShareResponse.opaque:type_name -> cs3.types.v1beta1.Opaque
	24, // 24: cs3.sharing.collaboration.v1beta1.GetShareResponse.share:type_name -> cs3.sharing.collaboration.v1beta1.Share
	20, // 25: cs3.sharing.collaboration.v1beta1.ListReceivedSharesRequest.opaque:type_name -> cs3.types.v1beta1.Opaque
	23, // 26: cs3.sharing.collaboration.v1beta1.ListReceivedSharesResponse.status:type_name -> cs3.rpc.v1beta1.Status
	20, // 27: cs3.sharing.collaboration.v1beta1.ListReceivedSharesResponse.opaque:type_name -> cs3.types.v1beta1.Opaque
	26, // 28: cs3.sharing.collaboration.v1beta1.ListReceivedSharesResponse.shares:type_name -> cs3.sharing.collaboration.v1beta1.ReceivedShare
	20, // 29: cs3.sharing.collaboration.v1beta1.UpdateReceivedShareRequest.opaque:type_name -> cs3.types.v1beta1.Opaque
	25, // 30: cs3.sharing.collaboration.v1beta1.UpdateReceivedShareRequest.ref:type_name -> cs3.sharing.collaboration.v1beta1.ShareReference
	19, // 31: cs3.sharing.collaboration.v1beta1.UpdateReceivedShareRequest.field:type_name -> cs3.sharing.collaboration.v1beta1.UpdateReceivedShareRequest.UpdateField
	23, // 32: cs3.sharing.collaboration.v1beta1.UpdateReceivedShareResponse.status:type_name -> cs3.rpc.v1beta1.Status
	20, // 33: cs3.sharing.collaboration.v1beta1.UpdateReceivedShareResponse.opaque:type_name -> cs3.types.v1beta1.Opaque
	20, // 34: cs3.sharing.collaboration.v1beta1.GetReceivedShareRequest.opaque:type_name -> cs3.types.v1beta1.Opaque
	25, // 35: cs3.sharing.collaboration.v1beta1.GetReceivedShareRequest.ref:type_name -> cs3.sharing.collaboration.v1beta1.ShareReference
	23, // 36: cs3.sharing.collaboration.v1beta1.GetReceivedShareResponse.status:type_name -> cs3.rpc.v1beta1.Status
	20, // 37: cs3.sharing.collaboration.v1beta1.GetReceivedShareResponse.opaque:type_name -> cs3.types.v1beta1.Opaque
	26, // 38: cs3.sharing.collaboration.v1beta1.GetReceivedShareResponse.share:type_name -> cs3.sharing.collaboration.v1beta1.ReceivedShare
	27, // 39: cs3.sharing.collaboration.v1beta1.UpdateShareRequest.UpdateField.permissions:type_name -> cs3.sharing.collaboration.v1beta1.SharePermissions
	0,  // 40: cs3.sharing.collaboration.v1beta1.ListSharesRequest.Filter.type:type_name -> cs3.sharing.collaboration.v1beta1.ListSharesRequest.Filter.Type
	28, // 41: cs3.sharing.collaboration.v1beta1.ListSharesRequest.Filter.resource_id:type_name -> cs3.storage.provider.v1beta1.ResourceId
	29, // 42: cs3.sharing.collaboration.v1beta1.ListSharesRequest.Filter.owner:type_name -> cs3.identity.user.v1beta1.UserId
	29, // 43: cs3.sharing.collaboration.v1beta1.ListSharesRequest.Filter.creator:type_name -> cs3.identity.user.v1beta1.UserId
	30, // 44: cs3.sharing.collaboration.v1beta1.UpdateReceivedShareRequest.UpdateField.state:type_name -> cs3.sharing.collaboration.v1beta1.ShareState
	1,  // 45: cs3.sharing.collaboration.v1beta1.CollaborationAPI.CreateShare:input_type -> cs3.sharing.collaboration.v1beta1.CreateShareRequest
	7,  // 46: cs3.sharing.collaboration.v1beta1.CollaborationAPI.RemoveShare:input_type -> cs3.sharing.collaboration.v1beta1.RemoveShareRequest
	9,  // 47: cs3.sharing.collaboration.v1beta1.CollaborationAPI.GetShare:input_type -> cs3.sharing.collaboration.v1beta1.GetShareRequest
	5,  // 48: cs3.sharing.collaboration.v1beta1.CollaborationAPI.ListShares:input_type -> cs3.sharing.collaboration.v1beta1.ListSharesRequest
	3,  // 49: cs3.sharing.collaboration.v1beta1.CollaborationAPI.UpdateShare:input_type -> cs3.sharing.collaboration.v1beta1.UpdateShareRequest
	11, // 50: cs3.sharing.collaboration.v1beta1.CollaborationAPI.ListReceivedShares:input_type -> cs3.sharing.collaboration.v1beta1.ListReceivedSharesRequest
	13, // 51: cs3.sharing.collaboration.v1beta1.CollaborationAPI.UpdateReceivedShare:input_type -> cs3.sharing.collaboration.v1beta1.UpdateReceivedShareRequest
	15, // 52: cs3.sharing.collaboration.v1beta1.CollaborationAPI.GetReceivedShare:input_type -> cs3.sharing.collaboration.v1beta1.GetReceivedShareRequest
	2,  // 53: cs3.sharing.collaboration.v1beta1.CollaborationAPI.CreateShare:output_type -> cs3.sharing.collaboration.v1beta1.CreateShareResponse
	8,  // 54: cs3.sharing.collaboration.v1beta1.CollaborationAPI.RemoveShare:output_type -> cs3.sharing.collaboration.v1beta1.RemoveShareResponse
	10, // 55: cs3.sharing.collaboration.v1beta1.CollaborationAPI.GetShare:output_type -> cs3.sharing.collaboration.v1beta1.GetShareResponse
	6,  // 56: cs3.sharing.collaboration.v1beta1.CollaborationAPI.ListShares:output_type -> cs3.sharing.collaboration.v1beta1.ListSharesResponse
	4,  // 57: cs3.sharing.collaboration.v1beta1.CollaborationAPI.UpdateShare:output_type -> cs3.sharing.collaboration.v1beta1.UpdateShareResponse
	12, // 58: cs3.sharing.collaboration.v1beta1.CollaborationAPI.ListReceivedShares:output_type -> cs3.sharing.collaboration.v1beta1.ListReceivedSharesResponse
	14, // 59: cs3.sharing.collaboration.v1beta1.CollaborationAPI.UpdateReceivedShare:output_type -> cs3.sharing.collaboration.v1beta1.UpdateReceivedShareResponse
	16, // 60: cs3.sharing.collaboration.v1beta1.CollaborationAPI.GetReceivedShare:output_type -> cs3.sharing.collaboration.v1beta1.GetReceivedShareResponse
	53, // [53:61] is the sub-list for method output_type
	45, // [45:53] is the sub-list for method input_type
	45, // [45:45] is the sub-list for extension type_name
	45, // [45:45] is the sub-list for extension extendee
	0,  // [0:45] is the sub-list for field type_name
}

func init() { file_cs3_sharing_collaboration_v1beta1_collaboration_api_proto_init() }
func file_cs3_sharing_collaboration_v1beta1_collaboration_api_proto_init() {
	if File_cs3_sharing_collaboration_v1beta1_collaboration_api_proto != nil {
		return
	}
	file_cs3_sharing_collaboration_v1beta1_resources_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_cs3_sharing_collaboration_v1beta1_collaboration_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateShareRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cs3_sharing_collaboration_v1beta1_collaboration_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateShareResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cs3_sharing_collaboration_v1beta1_collaboration_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateShareRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cs3_sharing_collaboration_v1beta1_collaboration_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateShareResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cs3_sharing_collaboration_v1beta1_collaboration_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSharesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cs3_sharing_collaboration_v1beta1_collaboration_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSharesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cs3_sharing_collaboration_v1beta1_collaboration_api_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveShareRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cs3_sharing_collaboration_v1beta1_collaboration_api_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveShareResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cs3_sharing_collaboration_v1beta1_collaboration_api_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetShareRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cs3_sharing_collaboration_v1beta1_collaboration_api_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetShareResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cs3_sharing_collaboration_v1beta1_collaboration_api_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListReceivedSharesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cs3_sharing_collaboration_v1beta1_collaboration_api_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListReceivedSharesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cs3_sharing_collaboration_v1beta1_collaboration_api_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateReceivedShareRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cs3_sharing_collaboration_v1beta1_collaboration_api_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateReceivedShareResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cs3_sharing_collaboration_v1beta1_collaboration_api_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReceivedShareRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cs3_sharing_collaboration_v1beta1_collaboration_api_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReceivedShareResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cs3_sharing_collaboration_v1beta1_collaboration_api_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateShareRequest_UpdateField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cs3_sharing_collaboration_v1beta1_collaboration_api_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSharesRequest_Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cs3_sharing_collaboration_v1beta1_collaboration_api_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateReceivedShareRequest_UpdateField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_cs3_sharing_collaboration_v1beta1_collaboration_api_proto_msgTypes[16].OneofWrappers = []interface{}{
		(*UpdateShareRequest_UpdateField_Permissions)(nil),
		(*UpdateShareRequest_UpdateField_DisplayName)(nil),
	}
	file_cs3_sharing_collaboration_v1beta1_collaboration_api_proto_msgTypes[17].OneofWrappers = []interface{}{
		(*ListSharesRequest_Filter_ResourceId)(nil),
		(*ListSharesRequest_Filter_Owner)(nil),
		(*ListSharesRequest_Filter_Creator)(nil),
	}
	file_cs3_sharing_collaboration_v1beta1_collaboration_api_proto_msgTypes[18].OneofWrappers = []interface{}{
		(*UpdateReceivedShareRequest_UpdateField_DisplayName)(nil),
		(*UpdateReceivedShareRequest_UpdateField_State)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cs3_sharing_collaboration_v1beta1_collaboration_api_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_cs3_sharing_collaboration_v1beta1_collaboration_api_proto_goTypes,
		DependencyIndexes: file_cs3_sharing_collaboration_v1beta1_collaboration_api_proto_depIdxs,
		EnumInfos:         file_cs3_sharing_collaboration_v1beta1_collaboration_api_proto_enumTypes,
		MessageInfos:      file_cs3_sharing_collaboration_v1beta1_collaboration_api_proto_msgTypes,
	}.Build()
	File_cs3_sharing_collaboration_v1beta1_collaboration_api_proto = out.File
	file_cs3_sharing_collaboration_v1beta1_collaboration_api_proto_rawDesc = nil
	file_cs3_sharing_collaboration_v1beta1_collaboration_api_proto_goTypes = nil
	file_cs3_sharing_collaboration_v1beta1_collaboration_api_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CollaborationAPIClient is the client API for CollaborationAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CollaborationAPIClient interface {
	// Creates a new share.
	// MUST return CODE_NOT_FOUND if the resource reference does not exist.
	// MUST return CODE_ALREADY_EXISTS if the share already exists for the 4-tuple consisting of
	// (owner, shared_resource, grantee).
	// New shares MUST be created in the state SHARE_STATE_PENDING.
	CreateShare(ctx context.Context, in *CreateShareRequest, opts ...grpc.CallOption) (*CreateShareResponse, error)
	// Removes a share.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	RemoveShare(ctx context.Context, in *RemoveShareRequest, opts ...grpc.CallOption) (*RemoveShareResponse, error)
	// Gets share information for a single share.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	GetShare(ctx context.Context, in *GetShareRequest, opts ...grpc.CallOption) (*GetShareResponse, error)
	// List the shares the authenticated principal has created,
	// both as owner and creator. If a filter is specified, only
	// shares satisfying the filter MUST be returned.
	ListShares(ctx context.Context, in *ListSharesRequest, opts ...grpc.CallOption) (*ListSharesResponse, error)
	// Updates a share.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	UpdateShare(ctx context.Context, in *UpdateShareRequest, opts ...grpc.CallOption) (*UpdateShareResponse, error)
	// List all shares the authenticated principal has received.
	ListReceivedShares(ctx context.Context, in *ListReceivedSharesRequest, opts ...grpc.CallOption) (*ListReceivedSharesResponse, error)
	// Update the received share to change the share state or the display name.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	UpdateReceivedShare(ctx context.Context, in *UpdateReceivedShareRequest, opts ...grpc.CallOption) (*UpdateReceivedShareResponse, error)
	// Get the information for the given received share reference.
	// MUST return CODE_NOT_FOUND if the received share reference does not exist.
	GetReceivedShare(ctx context.Context, in *GetReceivedShareRequest, opts ...grpc.CallOption) (*GetReceivedShareResponse, error)
}

type collaborationAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewCollaborationAPIClient(cc grpc.ClientConnInterface) CollaborationAPIClient {
	return &collaborationAPIClient{cc}
}

func (c *collaborationAPIClient) CreateShare(ctx context.Context, in *CreateShareRequest, opts ...grpc.CallOption) (*CreateShareResponse, error) {
	out := new(CreateShareResponse)
	err := c.cc.Invoke(ctx, "/cs3.sharing.collaboration.v1beta1.CollaborationAPI/CreateShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collaborationAPIClient) RemoveShare(ctx context.Context, in *RemoveShareRequest, opts ...grpc.CallOption) (*RemoveShareResponse, error) {
	out := new(RemoveShareResponse)
	err := c.cc.Invoke(ctx, "/cs3.sharing.collaboration.v1beta1.CollaborationAPI/RemoveShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collaborationAPIClient) GetShare(ctx context.Context, in *GetShareRequest, opts ...grpc.CallOption) (*GetShareResponse, error) {
	out := new(GetShareResponse)
	err := c.cc.Invoke(ctx, "/cs3.sharing.collaboration.v1beta1.CollaborationAPI/GetShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collaborationAPIClient) ListShares(ctx context.Context, in *ListSharesRequest, opts ...grpc.CallOption) (*ListSharesResponse, error) {
	out := new(ListSharesResponse)
	err := c.cc.Invoke(ctx, "/cs3.sharing.collaboration.v1beta1.CollaborationAPI/ListShares", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collaborationAPIClient) UpdateShare(ctx context.Context, in *UpdateShareRequest, opts ...grpc.CallOption) (*UpdateShareResponse, error) {
	out := new(UpdateShareResponse)
	err := c.cc.Invoke(ctx, "/cs3.sharing.collaboration.v1beta1.CollaborationAPI/UpdateShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collaborationAPIClient) ListReceivedShares(ctx context.Context, in *ListReceivedSharesRequest, opts ...grpc.CallOption) (*ListReceivedSharesResponse, error) {
	out := new(ListReceivedSharesResponse)
	err := c.cc.Invoke(ctx, "/cs3.sharing.collaboration.v1beta1.CollaborationAPI/ListReceivedShares", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collaborationAPIClient) UpdateReceivedShare(ctx context.Context, in *UpdateReceivedShareRequest, opts ...grpc.CallOption) (*UpdateReceivedShareResponse, error) {
	out := new(UpdateReceivedShareResponse)
	err := c.cc.Invoke(ctx, "/cs3.sharing.collaboration.v1beta1.CollaborationAPI/UpdateReceivedShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collaborationAPIClient) GetReceivedShare(ctx context.Context, in *GetReceivedShareRequest, opts ...grpc.CallOption) (*GetReceivedShareResponse, error) {
	out := new(GetReceivedShareResponse)
	err := c.cc.Invoke(ctx, "/cs3.sharing.collaboration.v1beta1.CollaborationAPI/GetReceivedShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CollaborationAPIServer is the server API for CollaborationAPI service.
type CollaborationAPIServer interface {
	// Creates a new share.
	// MUST return CODE_NOT_FOUND if the resource reference does not exist.
	// MUST return CODE_ALREADY_EXISTS if the share already exists for the 4-tuple consisting of
	// (owner, shared_resource, grantee).
	// New shares MUST be created in the state SHARE_STATE_PENDING.
	CreateShare(context.Context, *CreateShareRequest) (*CreateShareResponse, error)
	// Removes a share.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	RemoveShare(context.Context, *RemoveShareRequest) (*RemoveShareResponse, error)
	// Gets share information for a single share.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	GetShare(context.Context, *GetShareRequest) (*GetShareResponse, error)
	// List the shares the authenticated principal has created,
	// both as owner and creator. If a filter is specified, only
	// shares satisfying the filter MUST be returned.
	ListShares(context.Context, *ListSharesRequest) (*ListSharesResponse, error)
	// Updates a share.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	UpdateShare(context.Context, *UpdateShareRequest) (*UpdateShareResponse, error)
	// List all shares the authenticated principal has received.
	ListReceivedShares(context.Context, *ListReceivedSharesRequest) (*ListReceivedSharesResponse, error)
	// Update the received share to change the share state or the display name.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	UpdateReceivedShare(context.Context, *UpdateReceivedShareRequest) (*UpdateReceivedShareResponse, error)
	// Get the information for the given received share reference.
	// MUST return CODE_NOT_FOUND if the received share reference does not exist.
	GetReceivedShare(context.Context, *GetReceivedShareRequest) (*GetReceivedShareResponse, error)
}

// UnimplementedCollaborationAPIServer can be embedded to have forward compatible implementations.
type UnimplementedCollaborationAPIServer struct {
}

func (*UnimplementedCollaborationAPIServer) CreateShare(context.Context, *CreateShareRequest) (*CreateShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateShare not implemented")
}
func (*UnimplementedCollaborationAPIServer) RemoveShare(context.Context, *RemoveShareRequest) (*RemoveShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveShare not implemented")
}
func (*UnimplementedCollaborationAPIServer) GetShare(context.Context, *GetShareRequest) (*GetShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShare not implemented")
}
func (*UnimplementedCollaborationAPIServer) ListShares(context.Context, *ListSharesRequest) (*ListSharesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListShares not implemented")
}
func (*UnimplementedCollaborationAPIServer) UpdateShare(context.Context, *UpdateShareRequest) (*UpdateShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateShare not implemented")
}
func (*UnimplementedCollaborationAPIServer) ListReceivedShares(context.Context, *ListReceivedSharesRequest) (*ListReceivedSharesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReceivedShares not implemented")
}
func (*UnimplementedCollaborationAPIServer) UpdateReceivedShare(context.Context, *UpdateReceivedShareRequest) (*UpdateReceivedShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReceivedShare not implemented")
}
func (*UnimplementedCollaborationAPIServer) GetReceivedShare(context.Context, *GetReceivedShareRequest) (*GetReceivedShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReceivedShare not implemented")
}

func RegisterCollaborationAPIServer(s *grpc.Server, srv CollaborationAPIServer) {
	s.RegisterService(&_CollaborationAPI_serviceDesc, srv)
}

func _CollaborationAPI_CreateShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollaborationAPIServer).CreateShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.sharing.collaboration.v1beta1.CollaborationAPI/CreateShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollaborationAPIServer).CreateShare(ctx, req.(*CreateShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollaborationAPI_RemoveShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollaborationAPIServer).RemoveShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.sharing.collaboration.v1beta1.CollaborationAPI/RemoveShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollaborationAPIServer).RemoveShare(ctx, req.(*RemoveShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollaborationAPI_GetShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollaborationAPIServer).GetShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.sharing.collaboration.v1beta1.CollaborationAPI/GetShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollaborationAPIServer).GetShare(ctx, req.(*GetShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollaborationAPI_ListShares_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSharesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollaborationAPIServer).ListShares(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.sharing.collaboration.v1beta1.CollaborationAPI/ListShares",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollaborationAPIServer).ListShares(ctx, req.(*ListSharesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollaborationAPI_UpdateShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollaborationAPIServer).UpdateShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.sharing.collaboration.v1beta1.CollaborationAPI/UpdateShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollaborationAPIServer).UpdateShare(ctx, req.(*UpdateShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollaborationAPI_ListReceivedShares_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReceivedSharesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollaborationAPIServer).ListReceivedShares(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.sharing.collaboration.v1beta1.CollaborationAPI/ListReceivedShares",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollaborationAPIServer).ListReceivedShares(ctx, req.(*ListReceivedSharesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollaborationAPI_UpdateReceivedShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReceivedShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollaborationAPIServer).UpdateReceivedShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.sharing.collaboration.v1beta1.CollaborationAPI/UpdateReceivedShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollaborationAPIServer).UpdateReceivedShare(ctx, req.(*UpdateReceivedShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollaborationAPI_GetReceivedShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReceivedShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollaborationAPIServer).GetReceivedShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.sharing.collaboration.v1beta1.CollaborationAPI/GetReceivedShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollaborationAPIServer).GetReceivedShare(ctx, req.(*GetReceivedShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CollaborationAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cs3.sharing.collaboration.v1beta1.CollaborationAPI",
	HandlerType: (*CollaborationAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateShare",
			Handler:    _CollaborationAPI_CreateShare_Handler,
		},
		{
			MethodName: "RemoveShare",
			Handler:    _CollaborationAPI_RemoveShare_Handler,
		},
		{
			MethodName: "GetShare",
			Handler:    _CollaborationAPI_GetShare_Handler,
		},
		{
			MethodName: "ListShares",
			Handler:    _CollaborationAPI_ListShares_Handler,
		},
		{
			MethodName: "UpdateShare",
			Handler:    _CollaborationAPI_UpdateShare_Handler,
		},
		{
			MethodName: "ListReceivedShares",
			Handler:    _CollaborationAPI_ListReceivedShares_Handler,
		},
		{
			MethodName: "UpdateReceivedShare",
			Handler:    _CollaborationAPI_UpdateReceivedShare_Handler,
		},
		{
			MethodName: "GetReceivedShare",
			Handler:    _CollaborationAPI_GetReceivedShare_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cs3/sharing/collaboration/v1beta1/collaboration_api.proto",
}
