// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: cs3/sharing/link/v1beta1/link_api.proto

package linkv1beta1

import (
	fmt "fmt"
	_ "github.com/cs3org/go-cs3apis/build/go-cs3apis/cs3/identity/user/v1beta1"
	_ "github.com/cs3org/go-cs3apis/build/go-cs3apis/cs3/rpc/v1beta1"
	_ "github.com/cs3org/go-cs3apis/build/go-cs3apis/cs3/storage/provider/v1beta1"
	_ "github.com/cs3org/go-cs3apis/build/go-cs3apis/cs3/types/v1beta1"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for LinkAPI service

type LinkAPIService interface {
	// Creates a new share.
	// MUST return CODE_NOT_FOUND if the resource reference does not exist.
	// MUST return CODE_ALREADY_EXISTS if the share already exists for the 4-tuple consisting of
	// (owner, shared_resource, grantee).
	// New shares MUST be created in the state SHARE_STATE_PENDING.
	CreatePublicShare(ctx context.Context, in *CreatePublicShareRequest, opts ...client.CallOption) (*CreatePublicShareResponse, error)
	// Removes a share.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	RemovePublicShare(ctx context.Context, in *RemovePublicShareRequest, opts ...client.CallOption) (*RemovePublicShareResponse, error)
	// Gets share information for a single share.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	GetPublicShare(ctx context.Context, in *GetPublicShareRequest, opts ...client.CallOption) (*GetPublicShareResponse, error)
	// Gets share information for a single share by its unlisted token.
	// MUST return CODE_NOT_FOUND if the share does not exist.
	GetPublicShareByToken(ctx context.Context, in *GetPublicShareByTokenRequest, opts ...client.CallOption) (*GetPublicShareByTokenResponse, error)
	// List the shares the authenticated principal has created,
	// both as owner and creator. If a filter is specified, only
	// shares satisfying the filter MUST be returned.
	ListPublicShares(ctx context.Context, in *ListPublicSharesRequest, opts ...client.CallOption) (*ListPublicSharesResponse, error)
	// Updates a share.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	UpdatePublicShare(ctx context.Context, in *UpdatePublicShareRequest, opts ...client.CallOption) (*UpdatePublicShareResponse, error)
}

type linkAPIService struct {
	c    client.Client
	name string
}

func NewLinkAPIService(name string, c client.Client) LinkAPIService {
	return &linkAPIService{
		c:    c,
		name: name,
	}
}

func (c *linkAPIService) CreatePublicShare(ctx context.Context, in *CreatePublicShareRequest, opts ...client.CallOption) (*CreatePublicShareResponse, error) {
	req := c.c.NewRequest(c.name, "LinkAPI.CreatePublicShare", in)
	out := new(CreatePublicShareResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linkAPIService) RemovePublicShare(ctx context.Context, in *RemovePublicShareRequest, opts ...client.CallOption) (*RemovePublicShareResponse, error) {
	req := c.c.NewRequest(c.name, "LinkAPI.RemovePublicShare", in)
	out := new(RemovePublicShareResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linkAPIService) GetPublicShare(ctx context.Context, in *GetPublicShareRequest, opts ...client.CallOption) (*GetPublicShareResponse, error) {
	req := c.c.NewRequest(c.name, "LinkAPI.GetPublicShare", in)
	out := new(GetPublicShareResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linkAPIService) GetPublicShareByToken(ctx context.Context, in *GetPublicShareByTokenRequest, opts ...client.CallOption) (*GetPublicShareByTokenResponse, error) {
	req := c.c.NewRequest(c.name, "LinkAPI.GetPublicShareByToken", in)
	out := new(GetPublicShareByTokenResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linkAPIService) ListPublicShares(ctx context.Context, in *ListPublicSharesRequest, opts ...client.CallOption) (*ListPublicSharesResponse, error) {
	req := c.c.NewRequest(c.name, "LinkAPI.ListPublicShares", in)
	out := new(ListPublicSharesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linkAPIService) UpdatePublicShare(ctx context.Context, in *UpdatePublicShareRequest, opts ...client.CallOption) (*UpdatePublicShareResponse, error) {
	req := c.c.NewRequest(c.name, "LinkAPI.UpdatePublicShare", in)
	out := new(UpdatePublicShareResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for LinkAPI service

type LinkAPIHandler interface {
	// Creates a new share.
	// MUST return CODE_NOT_FOUND if the resource reference does not exist.
	// MUST return CODE_ALREADY_EXISTS if the share already exists for the 4-tuple consisting of
	// (owner, shared_resource, grantee).
	// New shares MUST be created in the state SHARE_STATE_PENDING.
	CreatePublicShare(context.Context, *CreatePublicShareRequest, *CreatePublicShareResponse) error
	// Removes a share.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	RemovePublicShare(context.Context, *RemovePublicShareRequest, *RemovePublicShareResponse) error
	// Gets share information for a single share.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	GetPublicShare(context.Context, *GetPublicShareRequest, *GetPublicShareResponse) error
	// Gets share information for a single share by its unlisted token.
	// MUST return CODE_NOT_FOUND if the share does not exist.
	GetPublicShareByToken(context.Context, *GetPublicShareByTokenRequest, *GetPublicShareByTokenResponse) error
	// List the shares the authenticated principal has created,
	// both as owner and creator. If a filter is specified, only
	// shares satisfying the filter MUST be returned.
	ListPublicShares(context.Context, *ListPublicSharesRequest, *ListPublicSharesResponse) error
	// Updates a share.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	UpdatePublicShare(context.Context, *UpdatePublicShareRequest, *UpdatePublicShareResponse) error
}

func RegisterLinkAPIHandler(s server.Server, hdlr LinkAPIHandler, opts ...server.HandlerOption) error {
	type linkAPI interface {
		CreatePublicShare(ctx context.Context, in *CreatePublicShareRequest, out *CreatePublicShareResponse) error
		RemovePublicShare(ctx context.Context, in *RemovePublicShareRequest, out *RemovePublicShareResponse) error
		GetPublicShare(ctx context.Context, in *GetPublicShareRequest, out *GetPublicShareResponse) error
		GetPublicShareByToken(ctx context.Context, in *GetPublicShareByTokenRequest, out *GetPublicShareByTokenResponse) error
		ListPublicShares(ctx context.Context, in *ListPublicSharesRequest, out *ListPublicSharesResponse) error
		UpdatePublicShare(ctx context.Context, in *UpdatePublicShareRequest, out *UpdatePublicShareResponse) error
	}
	type LinkAPI struct {
		linkAPI
	}
	h := &linkAPIHandler{hdlr}
	return s.Handle(s.NewHandler(&LinkAPI{h}, opts...))
}

type linkAPIHandler struct {
	LinkAPIHandler
}

func (h *linkAPIHandler) CreatePublicShare(ctx context.Context, in *CreatePublicShareRequest, out *CreatePublicShareResponse) error {
	return h.LinkAPIHandler.CreatePublicShare(ctx, in, out)
}

func (h *linkAPIHandler) RemovePublicShare(ctx context.Context, in *RemovePublicShareRequest, out *RemovePublicShareResponse) error {
	return h.LinkAPIHandler.RemovePublicShare(ctx, in, out)
}

func (h *linkAPIHandler) GetPublicShare(ctx context.Context, in *GetPublicShareRequest, out *GetPublicShareResponse) error {
	return h.LinkAPIHandler.GetPublicShare(ctx, in, out)
}

func (h *linkAPIHandler) GetPublicShareByToken(ctx context.Context, in *GetPublicShareByTokenRequest, out *GetPublicShareByTokenResponse) error {
	return h.LinkAPIHandler.GetPublicShareByToken(ctx, in, out)
}

func (h *linkAPIHandler) ListPublicShares(ctx context.Context, in *ListPublicSharesRequest, out *ListPublicSharesResponse) error {
	return h.LinkAPIHandler.ListPublicShares(ctx, in, out)
}

func (h *linkAPIHandler) UpdatePublicShare(ctx context.Context, in *UpdatePublicShareRequest, out *UpdatePublicShareResponse) error {
	return h.LinkAPIHandler.UpdatePublicShare(ctx, in, out)
}
