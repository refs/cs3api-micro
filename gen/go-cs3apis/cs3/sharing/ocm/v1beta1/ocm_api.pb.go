// Copyright 2018-2019 CERN
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// In applying this license, CERN does not waive the privileges and immunities
// granted to it by virtue of its status as an Intergovernmental Organization
// or submit itself to any jurisdiction.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.24.0
// 	protoc        v3.8.0
// source: cs3/sharing/ocm/v1beta1/ocm_api.proto

package ocmv1beta1

import (
	context "context"
	v1beta14 "github.com/cs3org/go-cs3apis/build/go-cs3apis/cs3/identity/user/v1beta1"
	v1beta12 "github.com/cs3org/go-cs3apis/build/go-cs3apis/cs3/ocm/provider/v1beta1"
	v1beta13 "github.com/cs3org/go-cs3apis/build/go-cs3apis/cs3/rpc/v1beta1"
	v1beta11 "github.com/cs3org/go-cs3apis/build/go-cs3apis/cs3/storage/provider/v1beta1"
	v1beta1 "github.com/cs3org/go-cs3apis/build/go-cs3apis/cs3/types/v1beta1"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// REQUIRED.
// The filter to apply.
type ListOCMSharesRequest_Filter_Type int32

const (
	ListOCMSharesRequest_Filter_TYPE_INVALID          ListOCMSharesRequest_Filter_Type = 0
	ListOCMSharesRequest_Filter_TYPE_NO               ListOCMSharesRequest_Filter_Type = 1
	ListOCMSharesRequest_Filter_TYPE_RESOURCE_ID      ListOCMSharesRequest_Filter_Type = 2
	ListOCMSharesRequest_Filter_TYPE_OWNER            ListOCMSharesRequest_Filter_Type = 3
	ListOCMSharesRequest_Filter_TYPE_CREATOR          ListOCMSharesRequest_Filter_Type = 4
	ListOCMSharesRequest_Filter_TYPE_OWNER_PROVIDER   ListOCMSharesRequest_Filter_Type = 5
	ListOCMSharesRequest_Filter_TYPE_CREATOR_PROVIDER ListOCMSharesRequest_Filter_Type = 6
)

// Enum value maps for ListOCMSharesRequest_Filter_Type.
var (
	ListOCMSharesRequest_Filter_Type_name = map[int32]string{
		0: "TYPE_INVALID",
		1: "TYPE_NO",
		2: "TYPE_RESOURCE_ID",
		3: "TYPE_OWNER",
		4: "TYPE_CREATOR",
		5: "TYPE_OWNER_PROVIDER",
		6: "TYPE_CREATOR_PROVIDER",
	}
	ListOCMSharesRequest_Filter_Type_value = map[string]int32{
		"TYPE_INVALID":          0,
		"TYPE_NO":               1,
		"TYPE_RESOURCE_ID":      2,
		"TYPE_OWNER":            3,
		"TYPE_CREATOR":          4,
		"TYPE_OWNER_PROVIDER":   5,
		"TYPE_CREATOR_PROVIDER": 6,
	}
)

func (x ListOCMSharesRequest_Filter_Type) Enum() *ListOCMSharesRequest_Filter_Type {
	p := new(ListOCMSharesRequest_Filter_Type)
	*p = x
	return p
}

func (x ListOCMSharesRequest_Filter_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListOCMSharesRequest_Filter_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_cs3_sharing_ocm_v1beta1_ocm_api_proto_enumTypes[0].Descriptor()
}

func (ListOCMSharesRequest_Filter_Type) Type() protoreflect.EnumType {
	return &file_cs3_sharing_ocm_v1beta1_ocm_api_proto_enumTypes[0]
}

func (x ListOCMSharesRequest_Filter_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListOCMSharesRequest_Filter_Type.Descriptor instead.
func (ListOCMSharesRequest_Filter_Type) EnumDescriptor() ([]byte, []int) {
	return file_cs3_sharing_ocm_v1beta1_ocm_api_proto_rawDescGZIP(), []int{4, 0, 0}
}

type CreateOCMShareRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// OPTIONAL.
	// Opaque information.
	Opaque *v1beta1.Opaque `protobuf:"bytes,1,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// REQUIRED.
	// The unique identifier for the shared storage resource.
	ResourceId *v1beta11.ResourceId `protobuf:"bytes,2,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	// REQUIRED.
	// The share grant for the share.
	Grant *ShareGrant `protobuf:"bytes,3,opt,name=grant,proto3" json:"grant,omitempty"`
	// REQUIRED.
	// The details of the recipient user's mesh provider.
	RecipientMeshProvider *v1beta12.ProviderInfo `protobuf:"bytes,4,opt,name=recipient_mesh_provider,json=recipientMeshProvider,proto3" json:"recipient_mesh_provider,omitempty"`
}

func (x *CreateOCMShareRequest) Reset() {
	*x = CreateOCMShareRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cs3_sharing_ocm_v1beta1_ocm_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOCMShareRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOCMShareRequest) ProtoMessage() {}

func (x *CreateOCMShareRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cs3_sharing_ocm_v1beta1_ocm_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOCMShareRequest.ProtoReflect.Descriptor instead.
func (*CreateOCMShareRequest) Descriptor() ([]byte, []int) {
	return file_cs3_sharing_ocm_v1beta1_ocm_api_proto_rawDescGZIP(), []int{0}
}

func (x *CreateOCMShareRequest) GetOpaque() *v1beta1.Opaque {
	if x != nil {
		return x.Opaque
	}
	return nil
}

func (x *CreateOCMShareRequest) GetResourceId() *v1beta11.ResourceId {
	if x != nil {
		return x.ResourceId
	}
	return nil
}

func (x *CreateOCMShareRequest) GetGrant() *ShareGrant {
	if x != nil {
		return x.Grant
	}
	return nil
}

func (x *CreateOCMShareRequest) GetRecipientMeshProvider() *v1beta12.ProviderInfo {
	if x != nil {
		return x.RecipientMeshProvider
	}
	return nil
}

type CreateOCMShareResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// REQUIRED.
	// The response status.
	Status *v1beta13.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// OPTIONAL.
	// Opaque information.
	Opaque *v1beta1.Opaque `protobuf:"bytes,2,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// REQUIRED.
	// The created share.
	Share *Share `protobuf:"bytes,3,opt,name=share,proto3" json:"share,omitempty"`
}

func (x *CreateOCMShareResponse) Reset() {
	*x = CreateOCMShareResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cs3_sharing_ocm_v1beta1_ocm_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOCMShareResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOCMShareResponse) ProtoMessage() {}

func (x *CreateOCMShareResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cs3_sharing_ocm_v1beta1_ocm_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOCMShareResponse.ProtoReflect.Descriptor instead.
func (*CreateOCMShareResponse) Descriptor() ([]byte, []int) {
	return file_cs3_sharing_ocm_v1beta1_ocm_api_proto_rawDescGZIP(), []int{1}
}

func (x *CreateOCMShareResponse) GetStatus() *v1beta13.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *CreateOCMShareResponse) GetOpaque() *v1beta1.Opaque {
	if x != nil {
		return x.Opaque
	}
	return nil
}

func (x *CreateOCMShareResponse) GetShare() *Share {
	if x != nil {
		return x.Share
	}
	return nil
}

type UpdateOCMShareRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// OPTIONAL.
	// Opaque information.
	Opaque *v1beta1.Opaque `protobuf:"bytes,1,opt,name=opaque,proto3" json:"opaque,omitempty"` // REQUIRED.
	// REQUIRED.
	Ref   *ShareReference                    `protobuf:"bytes,2,opt,name=ref,proto3" json:"ref,omitempty"`
	Field *UpdateOCMShareRequest_UpdateField `protobuf:"bytes,3,opt,name=field,proto3" json:"field,omitempty"`
}

func (x *UpdateOCMShareRequest) Reset() {
	*x = UpdateOCMShareRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cs3_sharing_ocm_v1beta1_ocm_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOCMShareRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOCMShareRequest) ProtoMessage() {}

func (x *UpdateOCMShareRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cs3_sharing_ocm_v1beta1_ocm_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOCMShareRequest.ProtoReflect.Descriptor instead.
func (*UpdateOCMShareRequest) Descriptor() ([]byte, []int) {
	return file_cs3_sharing_ocm_v1beta1_ocm_api_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateOCMShareRequest) GetOpaque() *v1beta1.Opaque {
	if x != nil {
		return x.Opaque
	}
	return nil
}

func (x *UpdateOCMShareRequest) GetRef() *ShareReference {
	if x != nil {
		return x.Ref
	}
	return nil
}

func (x *UpdateOCMShareRequest) GetField() *UpdateOCMShareRequest_UpdateField {
	if x != nil {
		return x.Field
	}
	return nil
}

type UpdateOCMShareResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// REQUIRED.
	// The response status.
	Status *v1beta13.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// OPTIONAL.
	// Opaque information.
	Opaque *v1beta1.Opaque `protobuf:"bytes,2,opt,name=opaque,proto3" json:"opaque,omitempty"`
}

func (x *UpdateOCMShareResponse) Reset() {
	*x = UpdateOCMShareResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cs3_sharing_ocm_v1beta1_ocm_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOCMShareResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOCMShareResponse) ProtoMessage() {}

func (x *UpdateOCMShareResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cs3_sharing_ocm_v1beta1_ocm_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOCMShareResponse.ProtoReflect.Descriptor instead.
func (*UpdateOCMShareResponse) Descriptor() ([]byte, []int) {
	return file_cs3_sharing_ocm_v1beta1_ocm_api_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateOCMShareResponse) GetStatus() *v1beta13.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *UpdateOCMShareResponse) GetOpaque() *v1beta1.Opaque {
	if x != nil {
		return x.Opaque
	}
	return nil
}

type ListOCMSharesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// OPTIONAL.
	// Opaque information.
	Opaque *v1beta1.Opaque `protobuf:"bytes,1,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// OPTIONAL.
	// The list of filters to apply if any.
	Filters []*ListOCMSharesRequest_Filter `protobuf:"bytes,2,rep,name=filters,proto3" json:"filters,omitempty"`
}

func (x *ListOCMSharesRequest) Reset() {
	*x = ListOCMSharesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cs3_sharing_ocm_v1beta1_ocm_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOCMSharesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOCMSharesRequest) ProtoMessage() {}

func (x *ListOCMSharesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cs3_sharing_ocm_v1beta1_ocm_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOCMSharesRequest.ProtoReflect.Descriptor instead.
func (*ListOCMSharesRequest) Descriptor() ([]byte, []int) {
	return file_cs3_sharing_ocm_v1beta1_ocm_api_proto_rawDescGZIP(), []int{4}
}

func (x *ListOCMSharesRequest) GetOpaque() *v1beta1.Opaque {
	if x != nil {
		return x.Opaque
	}
	return nil
}

func (x *ListOCMSharesRequest) GetFilters() []*ListOCMSharesRequest_Filter {
	if x != nil {
		return x.Filters
	}
	return nil
}

type ListOCMSharesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// REQUIRED.
	// The response status.
	Status *v1beta13.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// OPTIONAL.
	// Opaque information.
	Opaque *v1beta1.Opaque `protobuf:"bytes,2,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// REQUIRED.
	// The list of shares.
	Shares []*Share `protobuf:"bytes,3,rep,name=shares,proto3" json:"shares,omitempty"`
}

func (x *ListOCMSharesResponse) Reset() {
	*x = ListOCMSharesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cs3_sharing_ocm_v1beta1_ocm_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOCMSharesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOCMSharesResponse) ProtoMessage() {}

func (x *ListOCMSharesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cs3_sharing_ocm_v1beta1_ocm_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOCMSharesResponse.ProtoReflect.Descriptor instead.
func (*ListOCMSharesResponse) Descriptor() ([]byte, []int) {
	return file_cs3_sharing_ocm_v1beta1_ocm_api_proto_rawDescGZIP(), []int{5}
}

func (x *ListOCMSharesResponse) GetStatus() *v1beta13.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ListOCMSharesResponse) GetOpaque() *v1beta1.Opaque {
	if x != nil {
		return x.Opaque
	}
	return nil
}

func (x *ListOCMSharesResponse) GetShares() []*Share {
	if x != nil {
		return x.Shares
	}
	return nil
}

type RemoveOCMShareRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// OPTIONAL.
	// Opaque information.
	Opaque *v1beta1.Opaque `protobuf:"bytes,1,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// REQUIRED.
	// The reference to which the action should be performed.
	Ref *ShareReference `protobuf:"bytes,2,opt,name=ref,proto3" json:"ref,omitempty"`
}

func (x *RemoveOCMShareRequest) Reset() {
	*x = RemoveOCMShareRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cs3_sharing_ocm_v1beta1_ocm_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveOCMShareRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveOCMShareRequest) ProtoMessage() {}

func (x *RemoveOCMShareRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cs3_sharing_ocm_v1beta1_ocm_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveOCMShareRequest.ProtoReflect.Descriptor instead.
func (*RemoveOCMShareRequest) Descriptor() ([]byte, []int) {
	return file_cs3_sharing_ocm_v1beta1_ocm_api_proto_rawDescGZIP(), []int{6}
}

func (x *RemoveOCMShareRequest) GetOpaque() *v1beta1.Opaque {
	if x != nil {
		return x.Opaque
	}
	return nil
}

func (x *RemoveOCMShareRequest) GetRef() *ShareReference {
	if x != nil {
		return x.Ref
	}
	return nil
}

type RemoveOCMShareResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// REQUIRED.
	// The response status.
	Status *v1beta13.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// OPTIONAL.
	// Opaque information.
	Opaque *v1beta1.Opaque `protobuf:"bytes,2,opt,name=opaque,proto3" json:"opaque,omitempty"`
}

func (x *RemoveOCMShareResponse) Reset() {
	*x = RemoveOCMShareResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cs3_sharing_ocm_v1beta1_ocm_api_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveOCMShareResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveOCMShareResponse) ProtoMessage() {}

func (x *RemoveOCMShareResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cs3_sharing_ocm_v1beta1_ocm_api_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveOCMShareResponse.ProtoReflect.Descriptor instead.
func (*RemoveOCMShareResponse) Descriptor() ([]byte, []int) {
	return file_cs3_sharing_ocm_v1beta1_ocm_api_proto_rawDescGZIP(), []int{7}
}

func (x *RemoveOCMShareResponse) GetStatus() *v1beta13.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *RemoveOCMShareResponse) GetOpaque() *v1beta1.Opaque {
	if x != nil {
		return x.Opaque
	}
	return nil
}

type GetOCMShareRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// OPTIONAL.
	// Opaque information.
	Opaque *v1beta1.Opaque `protobuf:"bytes,1,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// REQUIRED.
	// The reference to which the action should be performed.
	Ref *ShareReference `protobuf:"bytes,2,opt,name=ref,proto3" json:"ref,omitempty"`
}

func (x *GetOCMShareRequest) Reset() {
	*x = GetOCMShareRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cs3_sharing_ocm_v1beta1_ocm_api_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOCMShareRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOCMShareRequest) ProtoMessage() {}

func (x *GetOCMShareRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cs3_sharing_ocm_v1beta1_ocm_api_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOCMShareRequest.ProtoReflect.Descriptor instead.
func (*GetOCMShareRequest) Descriptor() ([]byte, []int) {
	return file_cs3_sharing_ocm_v1beta1_ocm_api_proto_rawDescGZIP(), []int{8}
}

func (x *GetOCMShareRequest) GetOpaque() *v1beta1.Opaque {
	if x != nil {
		return x.Opaque
	}
	return nil
}

func (x *GetOCMShareRequest) GetRef() *ShareReference {
	if x != nil {
		return x.Ref
	}
	return nil
}

type GetOCMShareResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// REQUIRED.
	// The response status.
	Status *v1beta13.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// OPTIONAL.
	// Opaque information.
	Opaque *v1beta1.Opaque `protobuf:"bytes,2,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// REQUIRED.
	// The share.
	Share *Share `protobuf:"bytes,3,opt,name=share,proto3" json:"share,omitempty"`
}

func (x *GetOCMShareResponse) Reset() {
	*x = GetOCMShareResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cs3_sharing_ocm_v1beta1_ocm_api_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOCMShareResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOCMShareResponse) ProtoMessage() {}

func (x *GetOCMShareResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cs3_sharing_ocm_v1beta1_ocm_api_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOCMShareResponse.ProtoReflect.Descriptor instead.
func (*GetOCMShareResponse) Descriptor() ([]byte, []int) {
	return file_cs3_sharing_ocm_v1beta1_ocm_api_proto_rawDescGZIP(), []int{9}
}

func (x *GetOCMShareResponse) GetStatus() *v1beta13.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetOCMShareResponse) GetOpaque() *v1beta1.Opaque {
	if x != nil {
		return x.Opaque
	}
	return nil
}

func (x *GetOCMShareResponse) GetShare() *Share {
	if x != nil {
		return x.Share
	}
	return nil
}

type ListReceivedOCMSharesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// OPTIONAL.
	// Opaque information.
	Opaque *v1beta1.Opaque `protobuf:"bytes,1,opt,name=opaque,proto3" json:"opaque,omitempty"`
}

func (x *ListReceivedOCMSharesRequest) Reset() {
	*x = ListReceivedOCMSharesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cs3_sharing_ocm_v1beta1_ocm_api_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListReceivedOCMSharesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListReceivedOCMSharesRequest) ProtoMessage() {}

func (x *ListReceivedOCMSharesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cs3_sharing_ocm_v1beta1_ocm_api_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListReceivedOCMSharesRequest.ProtoReflect.Descriptor instead.
func (*ListReceivedOCMSharesRequest) Descriptor() ([]byte, []int) {
	return file_cs3_sharing_ocm_v1beta1_ocm_api_proto_rawDescGZIP(), []int{10}
}

func (x *ListReceivedOCMSharesRequest) GetOpaque() *v1beta1.Opaque {
	if x != nil {
		return x.Opaque
	}
	return nil
}

type ListReceivedOCMSharesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// REQUIRED.
	// The response status.
	Status *v1beta13.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// OPTIONAL.
	// Opaque information.
	Opaque *v1beta1.Opaque `protobuf:"bytes,2,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// REQUIRED.
	// The list of received shares.
	Shares []*ReceivedShare `protobuf:"bytes,3,rep,name=shares,proto3" json:"shares,omitempty"`
}

func (x *ListReceivedOCMSharesResponse) Reset() {
	*x = ListReceivedOCMSharesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cs3_sharing_ocm_v1beta1_ocm_api_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListReceivedOCMSharesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListReceivedOCMSharesResponse) ProtoMessage() {}

func (x *ListReceivedOCMSharesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cs3_sharing_ocm_v1beta1_ocm_api_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListReceivedOCMSharesResponse.ProtoReflect.Descriptor instead.
func (*ListReceivedOCMSharesResponse) Descriptor() ([]byte, []int) {
	return file_cs3_sharing_ocm_v1beta1_ocm_api_proto_rawDescGZIP(), []int{11}
}

func (x *ListReceivedOCMSharesResponse) GetStatus() *v1beta13.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ListReceivedOCMSharesResponse) GetOpaque() *v1beta1.Opaque {
	if x != nil {
		return x.Opaque
	}
	return nil
}

func (x *ListReceivedOCMSharesResponse) GetShares() []*ReceivedShare {
	if x != nil {
		return x.Shares
	}
	return nil
}

// TODO(labkode): clean up display_name ? we'll use storage links for that.
type UpdateReceivedOCMShareRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// OPTIONAL.
	// Opaque information.
	Opaque *v1beta1.Opaque `protobuf:"bytes,1,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// REQUIRED.
	Ref   *ShareReference                            `protobuf:"bytes,2,opt,name=ref,proto3" json:"ref,omitempty"`
	Field *UpdateReceivedOCMShareRequest_UpdateField `protobuf:"bytes,3,opt,name=field,proto3" json:"field,omitempty"`
}

func (x *UpdateReceivedOCMShareRequest) Reset() {
	*x = UpdateReceivedOCMShareRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cs3_sharing_ocm_v1beta1_ocm_api_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateReceivedOCMShareRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateReceivedOCMShareRequest) ProtoMessage() {}

func (x *UpdateReceivedOCMShareRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cs3_sharing_ocm_v1beta1_ocm_api_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateReceivedOCMShareRequest.ProtoReflect.Descriptor instead.
func (*UpdateReceivedOCMShareRequest) Descriptor() ([]byte, []int) {
	return file_cs3_sharing_ocm_v1beta1_ocm_api_proto_rawDescGZIP(), []int{12}
}

func (x *UpdateReceivedOCMShareRequest) GetOpaque() *v1beta1.Opaque {
	if x != nil {
		return x.Opaque
	}
	return nil
}

func (x *UpdateReceivedOCMShareRequest) GetRef() *ShareReference {
	if x != nil {
		return x.Ref
	}
	return nil
}

func (x *UpdateReceivedOCMShareRequest) GetField() *UpdateReceivedOCMShareRequest_UpdateField {
	if x != nil {
		return x.Field
	}
	return nil
}

type UpdateReceivedOCMShareResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// REQUIRED.
	// The response status.
	Status *v1beta13.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// OPTIONAL.
	// Opaque information.
	Opaque *v1beta1.Opaque `protobuf:"bytes,2,opt,name=opaque,proto3" json:"opaque,omitempty"`
}

func (x *UpdateReceivedOCMShareResponse) Reset() {
	*x = UpdateReceivedOCMShareResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cs3_sharing_ocm_v1beta1_ocm_api_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateReceivedOCMShareResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateReceivedOCMShareResponse) ProtoMessage() {}

func (x *UpdateReceivedOCMShareResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cs3_sharing_ocm_v1beta1_ocm_api_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateReceivedOCMShareResponse.ProtoReflect.Descriptor instead.
func (*UpdateReceivedOCMShareResponse) Descriptor() ([]byte, []int) {
	return file_cs3_sharing_ocm_v1beta1_ocm_api_proto_rawDescGZIP(), []int{13}
}

func (x *UpdateReceivedOCMShareResponse) GetStatus() *v1beta13.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *UpdateReceivedOCMShareResponse) GetOpaque() *v1beta1.Opaque {
	if x != nil {
		return x.Opaque
	}
	return nil
}

type GetReceivedOCMShareRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// OPTIONAL.
	// Opaque information.
	Opaque *v1beta1.Opaque `protobuf:"bytes,1,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// REQUIRED.
	// The reference of the received share.
	Ref *ShareReference `protobuf:"bytes,2,opt,name=ref,proto3" json:"ref,omitempty"`
}

func (x *GetReceivedOCMShareRequest) Reset() {
	*x = GetReceivedOCMShareRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cs3_sharing_ocm_v1beta1_ocm_api_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReceivedOCMShareRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReceivedOCMShareRequest) ProtoMessage() {}

func (x *GetReceivedOCMShareRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cs3_sharing_ocm_v1beta1_ocm_api_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReceivedOCMShareRequest.ProtoReflect.Descriptor instead.
func (*GetReceivedOCMShareRequest) Descriptor() ([]byte, []int) {
	return file_cs3_sharing_ocm_v1beta1_ocm_api_proto_rawDescGZIP(), []int{14}
}

func (x *GetReceivedOCMShareRequest) GetOpaque() *v1beta1.Opaque {
	if x != nil {
		return x.Opaque
	}
	return nil
}

func (x *GetReceivedOCMShareRequest) GetRef() *ShareReference {
	if x != nil {
		return x.Ref
	}
	return nil
}

type GetReceivedOCMShareResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// REQUIRED.
	// The response status.
	Status *v1beta13.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// OPTIONAL.
	// Opaque information.
	Opaque *v1beta1.Opaque `protobuf:"bytes,2,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// REQUIRED.
	// The share.
	Share *ReceivedShare `protobuf:"bytes,3,opt,name=share,proto3" json:"share,omitempty"`
}

func (x *GetReceivedOCMShareResponse) Reset() {
	*x = GetReceivedOCMShareResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cs3_sharing_ocm_v1beta1_ocm_api_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReceivedOCMShareResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReceivedOCMShareResponse) ProtoMessage() {}

func (x *GetReceivedOCMShareResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cs3_sharing_ocm_v1beta1_ocm_api_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReceivedOCMShareResponse.ProtoReflect.Descriptor instead.
func (*GetReceivedOCMShareResponse) Descriptor() ([]byte, []int) {
	return file_cs3_sharing_ocm_v1beta1_ocm_api_proto_rawDescGZIP(), []int{15}
}

func (x *GetReceivedOCMShareResponse) GetStatus() *v1beta13.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetReceivedOCMShareResponse) GetOpaque() *v1beta1.Opaque {
	if x != nil {
		return x.Opaque
	}
	return nil
}

func (x *GetReceivedOCMShareResponse) GetShare() *ReceivedShare {
	if x != nil {
		return x.Share
	}
	return nil
}

// REQUIRED.
type UpdateOCMShareRequest_UpdateField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// One of the update fields MUST be specified.
	//
	// Types that are assignable to Field:
	//	*UpdateOCMShareRequest_UpdateField_Permissions
	//	*UpdateOCMShareRequest_UpdateField_DisplayName
	Field isUpdateOCMShareRequest_UpdateField_Field `protobuf_oneof:"field"`
}

func (x *UpdateOCMShareRequest_UpdateField) Reset() {
	*x = UpdateOCMShareRequest_UpdateField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cs3_sharing_ocm_v1beta1_ocm_api_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOCMShareRequest_UpdateField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOCMShareRequest_UpdateField) ProtoMessage() {}

func (x *UpdateOCMShareRequest_UpdateField) ProtoReflect() protoreflect.Message {
	mi := &file_cs3_sharing_ocm_v1beta1_ocm_api_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOCMShareRequest_UpdateField.ProtoReflect.Descriptor instead.
func (*UpdateOCMShareRequest_UpdateField) Descriptor() ([]byte, []int) {
	return file_cs3_sharing_ocm_v1beta1_ocm_api_proto_rawDescGZIP(), []int{2, 0}
}

func (m *UpdateOCMShareRequest_UpdateField) GetField() isUpdateOCMShareRequest_UpdateField_Field {
	if m != nil {
		return m.Field
	}
	return nil
}

func (x *UpdateOCMShareRequest_UpdateField) GetPermissions() *SharePermissions {
	if x, ok := x.GetField().(*UpdateOCMShareRequest_UpdateField_Permissions); ok {
		return x.Permissions
	}
	return nil
}

func (x *UpdateOCMShareRequest_UpdateField) GetDisplayName() string {
	if x, ok := x.GetField().(*UpdateOCMShareRequest_UpdateField_DisplayName); ok {
		return x.DisplayName
	}
	return ""
}

type isUpdateOCMShareRequest_UpdateField_Field interface {
	isUpdateOCMShareRequest_UpdateField_Field()
}

type UpdateOCMShareRequest_UpdateField_Permissions struct {
	// Update the permissions.
	Permissions *SharePermissions `protobuf:"bytes,2,opt,name=permissions,proto3,oneof"`
}

type UpdateOCMShareRequest_UpdateField_DisplayName struct {
	// Update the display name.
	DisplayName string `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3,oneof"`
}

func (*UpdateOCMShareRequest_UpdateField_Permissions) isUpdateOCMShareRequest_UpdateField_Field() {}

func (*UpdateOCMShareRequest_UpdateField_DisplayName) isUpdateOCMShareRequest_UpdateField_Field() {}

// REQUIRED.
// represents a filter to apply to the request.
type ListOCMSharesRequest_Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// REQUIRED.
	Type ListOCMSharesRequest_Filter_Type `protobuf:"varint,2,opt,name=type,proto3,enum=cs3.sharing.ocm.v1beta1.ListOCMSharesRequest_Filter_Type" json:"type,omitempty"`
	// Types that are assignable to Term:
	//	*ListOCMSharesRequest_Filter_ResourceId
	//	*ListOCMSharesRequest_Filter_Owner
	//	*ListOCMSharesRequest_Filter_Creator
	Term isListOCMSharesRequest_Filter_Term `protobuf_oneof:"term"`
}

func (x *ListOCMSharesRequest_Filter) Reset() {
	*x = ListOCMSharesRequest_Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cs3_sharing_ocm_v1beta1_ocm_api_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOCMSharesRequest_Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOCMSharesRequest_Filter) ProtoMessage() {}

func (x *ListOCMSharesRequest_Filter) ProtoReflect() protoreflect.Message {
	mi := &file_cs3_sharing_ocm_v1beta1_ocm_api_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOCMSharesRequest_Filter.ProtoReflect.Descriptor instead.
func (*ListOCMSharesRequest_Filter) Descriptor() ([]byte, []int) {
	return file_cs3_sharing_ocm_v1beta1_ocm_api_proto_rawDescGZIP(), []int{4, 0}
}

func (x *ListOCMSharesRequest_Filter) GetType() ListOCMSharesRequest_Filter_Type {
	if x != nil {
		return x.Type
	}
	return ListOCMSharesRequest_Filter_TYPE_INVALID
}

func (m *ListOCMSharesRequest_Filter) GetTerm() isListOCMSharesRequest_Filter_Term {
	if m != nil {
		return m.Term
	}
	return nil
}

func (x *ListOCMSharesRequest_Filter) GetResourceId() *v1beta11.ResourceId {
	if x, ok := x.GetTerm().(*ListOCMSharesRequest_Filter_ResourceId); ok {
		return x.ResourceId
	}
	return nil
}

func (x *ListOCMSharesRequest_Filter) GetOwner() *v1beta14.UserId {
	if x, ok := x.GetTerm().(*ListOCMSharesRequest_Filter_Owner); ok {
		return x.Owner
	}
	return nil
}

func (x *ListOCMSharesRequest_Filter) GetCreator() *v1beta14.UserId {
	if x, ok := x.GetTerm().(*ListOCMSharesRequest_Filter_Creator); ok {
		return x.Creator
	}
	return nil
}

type isListOCMSharesRequest_Filter_Term interface {
	isListOCMSharesRequest_Filter_Term()
}

type ListOCMSharesRequest_Filter_ResourceId struct {
	ResourceId *v1beta11.ResourceId `protobuf:"bytes,3,opt,name=resource_id,json=resourceId,proto3,oneof"`
}

type ListOCMSharesRequest_Filter_Owner struct {
	Owner *v1beta14.UserId `protobuf:"bytes,4,opt,name=owner,proto3,oneof"`
}

type ListOCMSharesRequest_Filter_Creator struct {
	Creator *v1beta14.UserId `protobuf:"bytes,5,opt,name=creator,proto3,oneof"`
}

func (*ListOCMSharesRequest_Filter_ResourceId) isListOCMSharesRequest_Filter_Term() {}

func (*ListOCMSharesRequest_Filter_Owner) isListOCMSharesRequest_Filter_Term() {}

func (*ListOCMSharesRequest_Filter_Creator) isListOCMSharesRequest_Filter_Term() {}

// REQUIRED.
type UpdateReceivedOCMShareRequest_UpdateField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// One of the update fields MUST be specified.
	//
	// Types that are assignable to Field:
	//	*UpdateReceivedOCMShareRequest_UpdateField_DisplayName
	//	*UpdateReceivedOCMShareRequest_UpdateField_State
	Field isUpdateReceivedOCMShareRequest_UpdateField_Field `protobuf_oneof:"field"`
}

func (x *UpdateReceivedOCMShareRequest_UpdateField) Reset() {
	*x = UpdateReceivedOCMShareRequest_UpdateField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cs3_sharing_ocm_v1beta1_ocm_api_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateReceivedOCMShareRequest_UpdateField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateReceivedOCMShareRequest_UpdateField) ProtoMessage() {}

func (x *UpdateReceivedOCMShareRequest_UpdateField) ProtoReflect() protoreflect.Message {
	mi := &file_cs3_sharing_ocm_v1beta1_ocm_api_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateReceivedOCMShareRequest_UpdateField.ProtoReflect.Descriptor instead.
func (*UpdateReceivedOCMShareRequest_UpdateField) Descriptor() ([]byte, []int) {
	return file_cs3_sharing_ocm_v1beta1_ocm_api_proto_rawDescGZIP(), []int{12, 0}
}

func (m *UpdateReceivedOCMShareRequest_UpdateField) GetField() isUpdateReceivedOCMShareRequest_UpdateField_Field {
	if m != nil {
		return m.Field
	}
	return nil
}

func (x *UpdateReceivedOCMShareRequest_UpdateField) GetDisplayName() string {
	if x, ok := x.GetField().(*UpdateReceivedOCMShareRequest_UpdateField_DisplayName); ok {
		return x.DisplayName
	}
	return ""
}

func (x *UpdateReceivedOCMShareRequest_UpdateField) GetState() ShareState {
	if x, ok := x.GetField().(*UpdateReceivedOCMShareRequest_UpdateField_State); ok {
		return x.State
	}
	return ShareState_SHARE_STATE_INVALID
}

type isUpdateReceivedOCMShareRequest_UpdateField_Field interface {
	isUpdateReceivedOCMShareRequest_UpdateField_Field()
}

type UpdateReceivedOCMShareRequest_UpdateField_DisplayName struct {
	// Update the display name.
	DisplayName string `protobuf:"bytes,1,opt,name=display_name,json=displayName,proto3,oneof"`
}

type UpdateReceivedOCMShareRequest_UpdateField_State struct {
	// Update the share state
	State ShareState `protobuf:"varint,2,opt,name=state,proto3,enum=cs3.sharing.ocm.v1beta1.ShareState,oneof"`
}

func (*UpdateReceivedOCMShareRequest_UpdateField_DisplayName) isUpdateReceivedOCMShareRequest_UpdateField_Field() {
}

func (*UpdateReceivedOCMShareRequest_UpdateField_State) isUpdateReceivedOCMShareRequest_UpdateField_Field() {
}

var File_cs3_sharing_ocm_v1beta1_ocm_api_proto protoreflect.FileDescriptor

var file_cs3_sharing_ocm_v1beta1_ocm_api_proto_rawDesc = []byte{
	0x0a, 0x25, 0x63, 0x73, 0x33, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x6f, 0x63,
	0x6d, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x6f, 0x63, 0x6d, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x63, 0x73, 0x33, 0x2e, 0x73, 0x68, 0x61,
	0x72, 0x69, 0x6e, 0x67, 0x2e, 0x6f, 0x63, 0x6d, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x1a, 0x29, 0x63, 0x73, 0x33, 0x2f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x28, 0x63, 0x73, 0x33,
	0x2f, 0x6f, 0x63, 0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2f, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x63, 0x73, 0x33, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x63, 0x73, 0x33, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67,
	0x2f, 0x6f, 0x63, 0x6d, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x63, 0x73,
	0x33, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x63, 0x73, 0x33, 0x2f,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb0, 0x02, 0x0a, 0x15, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4f, 0x43, 0x4d, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x52, 0x06,
	0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x12, 0x49, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x73,
	0x33, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x49, 0x64, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x39, 0x0a, 0x05, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x6f,
	0x63, 0x6d, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x47, 0x72, 0x61, 0x6e, 0x74, 0x52, 0x05, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x12, 0x5e, 0x0a, 0x17,
	0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x68, 0x5f, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x63, 0x73, 0x33, 0x2e, 0x6f, 0x63, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x15, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74,
	0x4d, 0x65, 0x73, 0x68, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x22, 0xb2, 0x01, 0x0a,
	0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x43, 0x4d, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x06, 0x6f, 0x70, 0x61, 0x71,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4f, 0x70, 0x61,
	0x71, 0x75, 0x65, 0x52, 0x06, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x12, 0x34, 0x0a, 0x05, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x73, 0x33,
	0x2e, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x6f, 0x63, 0x6d, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x05, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x22, 0xe4, 0x02, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x43, 0x4d, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x6f,
	0x70, 0x61, 0x71, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x73,
	0x33, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x52, 0x06, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x12, 0x39,
	0x0a, 0x03, 0x72, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x73,
	0x33, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x6f, 0x63, 0x6d, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x03, 0x72, 0x65, 0x66, 0x12, 0x50, 0x0a, 0x05, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x73,
	0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x6f, 0x63, 0x6d, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x43, 0x4d, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x1a, 0x8a, 0x01, 0x0a, 0x0b,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x4d, 0x0a, 0x0b, 0x70,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x6f,
	0x63, 0x6d, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x0b, 0x70,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x23, 0x0a, 0x0c, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x42,
	0x07, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x22, 0x7c, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4f, 0x43, 0x4d, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x06, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x52, 0x06,
	0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x22, 0xd6, 0x04, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x4f,
	0x43, 0x4d, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x31, 0x0a, 0x06, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x52, 0x06, 0x6f, 0x70, 0x61, 0x71,
	0x75, 0x65, 0x12, 0x4e, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e,
	0x67, 0x2e, 0x6f, 0x63, 0x6d, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x4f, 0x43, 0x4d, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x1a, 0xba, 0x03, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x4d, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x63, 0x73,
	0x33, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x6f, 0x63, 0x6d, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x43, 0x4d, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x4b, 0x0a, 0x0b,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x48, 0x00, 0x52, 0x0a, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x05, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x48, 0x00, 0x52, 0x05, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x48, 0x00, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x6f, 0x72, 0x22, 0x91, 0x01, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x0b,
	0x0a, 0x07, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x49, 0x44, 0x10,
	0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x57, 0x4e, 0x45, 0x52, 0x10,
	0x03, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x4f,
	0x52, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x57, 0x4e, 0x45,
	0x52, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x10, 0x05, 0x12, 0x19, 0x0a, 0x15,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x50, 0x52, 0x4f,
	0x56, 0x49, 0x44, 0x45, 0x52, 0x10, 0x06, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x22,
	0xb3, 0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x43, 0x4d, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x73, 0x33, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x06, 0x6f, 0x70,
	0x61, 0x71, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x73, 0x33,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4f,
	0x70, 0x61, 0x71, 0x75, 0x65, 0x52, 0x06, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x12, 0x36, 0x0a,
	0x06, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x63, 0x73, 0x33, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x6f, 0x63, 0x6d, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x06, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x73, 0x22, 0x85, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x4f, 0x43, 0x4d, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x31, 0x0a, 0x06, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x52, 0x06, 0x6f, 0x70, 0x61, 0x71,
	0x75, 0x65, 0x12, 0x39, 0x0a, 0x03, 0x72, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x6f, 0x63,
	0x6d, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x03, 0x72, 0x65, 0x66, 0x22, 0x7c, 0x0a,
	0x16, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4f, 0x43, 0x4d, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x06, 0x6f, 0x70, 0x61, 0x71,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4f, 0x70, 0x61,
	0x71, 0x75, 0x65, 0x52, 0x06, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x22, 0x82, 0x01, 0x0a, 0x12,
	0x47, 0x65, 0x74, 0x4f, 0x43, 0x4d, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x52, 0x06, 0x6f,
	0x70, 0x61, 0x71, 0x75, 0x65, 0x12, 0x39, 0x0a, 0x03, 0x72, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67,
	0x2e, 0x6f, 0x63, 0x6d, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x03, 0x72, 0x65, 0x66,
	0x22, 0xaf, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4f, 0x43, 0x4d, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x06, 0x6f, 0x70, 0x61,
	0x71, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x73, 0x33, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4f, 0x70,
	0x61, 0x71, 0x75, 0x65, 0x52, 0x06, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x12, 0x34, 0x0a, 0x05,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x73,
	0x33, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x6f, 0x63, 0x6d, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x05, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x22, 0x51, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x4f, 0x43, 0x4d, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x52, 0x06, 0x6f,
	0x70, 0x61, 0x71, 0x75, 0x65, 0x22, 0xc3, 0x01, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x4f, 0x43, 0x4d, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x06, 0x6f, 0x70, 0x61, 0x71,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4f, 0x70, 0x61,
	0x71, 0x75, 0x65, 0x52, 0x06, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x12, 0x3e, 0x0a, 0x06, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x73,
	0x33, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x6f, 0x63, 0x6d, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x52, 0x06, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x22, 0xe1, 0x02, 0x0a, 0x1d,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x4f, 0x43,
	0x4d, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a,
	0x06, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x63, 0x73, 0x33, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x52, 0x06, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65,
	0x12, 0x39, 0x0a, 0x03, 0x72, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x63, 0x73, 0x33, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x6f, 0x63, 0x6d, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x03, 0x72, 0x65, 0x66, 0x12, 0x58, 0x0a, 0x05, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x63, 0x73, 0x33,
	0x2e, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x6f, 0x63, 0x6d, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x4f, 0x43, 0x4d, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x05,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x1a, 0x78, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x12, 0x23, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x73,
	0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x6f, 0x63, 0x6d, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x22,
	0x84, 0x01, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x4f, 0x43, 0x4d, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x06, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x52, 0x06,
	0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x22, 0x8a, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x4f, 0x43, 0x4d, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65,
	0x52, 0x06, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x12, 0x39, 0x0a, 0x03, 0x72, 0x65, 0x66, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x73, 0x68, 0x61, 0x72,
	0x69, 0x6e, 0x67, 0x2e, 0x6f, 0x63, 0x6d, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x03,
	0x72, 0x65, 0x66, 0x22, 0xbf, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x4f, 0x43, 0x4d, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x06, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x52,
	0x06, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x12, 0x3c, 0x0a, 0x05, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x73, 0x68, 0x61,
	0x72, 0x69, 0x6e, 0x67, 0x2e, 0x6f, 0x63, 0x6d, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x05,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x32, 0xd3, 0x07, 0x0a, 0x06, 0x4f, 0x63, 0x6d, 0x41, 0x50, 0x49,
	0x12, 0x71, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x43, 0x4d, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x12, 0x2e, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67,
	0x2e, 0x6f, 0x63, 0x6d, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4f, 0x43, 0x4d, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67,
	0x2e, 0x6f, 0x63, 0x6d, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4f, 0x43, 0x4d, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x71, 0x0a, 0x0e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4f, 0x43, 0x4d,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x12, 0x2e, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x73, 0x68, 0x61, 0x72,
	0x69, 0x6e, 0x67, 0x2e, 0x6f, 0x63, 0x6d, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4f, 0x43, 0x4d, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x73, 0x68, 0x61, 0x72,
	0x69, 0x6e, 0x67, 0x2e, 0x6f, 0x63, 0x6d, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4f, 0x43, 0x4d, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x68, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x4f, 0x43, 0x4d,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x12, 0x2b, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x73, 0x68, 0x61, 0x72,
	0x69, 0x6e, 0x67, 0x2e, 0x6f, 0x63, 0x6d, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x4f, 0x43, 0x4d, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67,
	0x2e, 0x6f, 0x63, 0x6d, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x4f, 0x43, 0x4d, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x6e, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x43, 0x4d, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x73, 0x12, 0x2d, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e,
	0x6f, 0x63, 0x6d, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x4f, 0x43, 0x4d, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2e, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x6f,
	0x63, 0x6d, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f,
	0x43, 0x4d, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x71, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x43, 0x4d, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x12, 0x2e, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67,
	0x2e, 0x6f, 0x63, 0x6d, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4f, 0x43, 0x4d, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67,
	0x2e, 0x6f, 0x63, 0x6d, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4f, 0x43, 0x4d, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x86, 0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x4f, 0x43, 0x4d, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x12, 0x35, 0x2e,
	0x63, 0x73, 0x33, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x6f, 0x63, 0x6d, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x4f, 0x43, 0x4d, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x69,
	0x6e, 0x67, 0x2e, 0x6f, 0x63, 0x6d, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x4f, 0x43, 0x4d, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x89, 0x01, 0x0a,
	0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x4f,
	0x43, 0x4d, 0x53, 0x68, 0x61, 0x72, 0x65, 0x12, 0x36, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x73, 0x68,
	0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x6f, 0x63, 0x6d, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64,
	0x4f, 0x43, 0x4d, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x37, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x6f, 0x63,
	0x6d, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x4f, 0x43, 0x4d, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x80, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x4f, 0x43, 0x4d, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x12, 0x33, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x6f,
	0x63, 0x6d, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x4f, 0x43, 0x4d, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x73, 0x68, 0x61, 0x72,
	0x69, 0x6e, 0x67, 0x2e, 0x6f, 0x63, 0x6d, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x4f, 0x43, 0x4d, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x72, 0x0a, 0x1b, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x6f,
	0x63, 0x6d, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x42, 0x0b, 0x4f, 0x63, 0x6d, 0x41,
	0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x0a, 0x6f, 0x63, 0x6d, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0xa2, 0x02, 0x03, 0x43, 0x53, 0x4f, 0xaa, 0x02, 0x17, 0x43, 0x73,
	0x33, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x63, 0x6d, 0x2e, 0x56, 0x31,
	0x42, 0x65, 0x74, 0x61, 0x31, 0xca, 0x02, 0x17, 0x43, 0x73, 0x33, 0x5c, 0x53, 0x68, 0x61, 0x72,
	0x69, 0x6e, 0x67, 0x5c, 0x4f, 0x63, 0x6d, 0x5c, 0x56, 0x31, 0x42, 0x65, 0x74, 0x61, 0x31, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cs3_sharing_ocm_v1beta1_ocm_api_proto_rawDescOnce sync.Once
	file_cs3_sharing_ocm_v1beta1_ocm_api_proto_rawDescData = file_cs3_sharing_ocm_v1beta1_ocm_api_proto_rawDesc
)

func file_cs3_sharing_ocm_v1beta1_ocm_api_proto_rawDescGZIP() []byte {
	file_cs3_sharing_ocm_v1beta1_ocm_api_proto_rawDescOnce.Do(func() {
		file_cs3_sharing_ocm_v1beta1_ocm_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_cs3_sharing_ocm_v1beta1_ocm_api_proto_rawDescData)
	})
	return file_cs3_sharing_ocm_v1beta1_ocm_api_proto_rawDescData
}

var file_cs3_sharing_ocm_v1beta1_ocm_api_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_cs3_sharing_ocm_v1beta1_ocm_api_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_cs3_sharing_ocm_v1beta1_ocm_api_proto_goTypes = []interface{}{
	(ListOCMSharesRequest_Filter_Type)(0),             // 0: cs3.sharing.ocm.v1beta1.ListOCMSharesRequest.Filter.Type
	(*CreateOCMShareRequest)(nil),                     // 1: cs3.sharing.ocm.v1beta1.CreateOCMShareRequest
	(*CreateOCMShareResponse)(nil),                    // 2: cs3.sharing.ocm.v1beta1.CreateOCMShareResponse
	(*UpdateOCMShareRequest)(nil),                     // 3: cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest
	(*UpdateOCMShareResponse)(nil),                    // 4: cs3.sharing.ocm.v1beta1.UpdateOCMShareResponse
	(*ListOCMSharesRequest)(nil),                      // 5: cs3.sharing.ocm.v1beta1.ListOCMSharesRequest
	(*ListOCMSharesResponse)(nil),                     // 6: cs3.sharing.ocm.v1beta1.ListOCMSharesResponse
	(*RemoveOCMShareRequest)(nil),                     // 7: cs3.sharing.ocm.v1beta1.RemoveOCMShareRequest
	(*RemoveOCMShareResponse)(nil),                    // 8: cs3.sharing.ocm.v1beta1.RemoveOCMShareResponse
	(*GetOCMShareRequest)(nil),                        // 9: cs3.sharing.ocm.v1beta1.GetOCMShareRequest
	(*GetOCMShareResponse)(nil),                       // 10: cs3.sharing.ocm.v1beta1.GetOCMShareResponse
	(*ListReceivedOCMSharesRequest)(nil),              // 11: cs3.sharing.ocm.v1beta1.ListReceivedOCMSharesRequest
	(*ListReceivedOCMSharesResponse)(nil),             // 12: cs3.sharing.ocm.v1beta1.ListReceivedOCMSharesResponse
	(*UpdateReceivedOCMShareRequest)(nil),             // 13: cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareRequest
	(*UpdateReceivedOCMShareResponse)(nil),            // 14: cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareResponse
	(*GetReceivedOCMShareRequest)(nil),                // 15: cs3.sharing.ocm.v1beta1.GetReceivedOCMShareRequest
	(*GetReceivedOCMShareResponse)(nil),               // 16: cs3.sharing.ocm.v1beta1.GetReceivedOCMShareResponse
	(*UpdateOCMShareRequest_UpdateField)(nil),         // 17: cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.UpdateField
	(*ListOCMSharesRequest_Filter)(nil),               // 18: cs3.sharing.ocm.v1beta1.ListOCMSharesRequest.Filter
	(*UpdateReceivedOCMShareRequest_UpdateField)(nil), // 19: cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareRequest.UpdateField
	(*v1beta1.Opaque)(nil),                            // 20: cs3.types.v1beta1.Opaque
	(*v1beta11.ResourceId)(nil),                       // 21: cs3.storage.provider.v1beta1.ResourceId
	(*ShareGrant)(nil),                                // 22: cs3.sharing.ocm.v1beta1.ShareGrant
	(*v1beta12.ProviderInfo)(nil),                     // 23: cs3.ocm.provider.v1beta1.ProviderInfo
	(*v1beta13.Status)(nil),                           // 24: cs3.rpc.v1beta1.Status
	(*Share)(nil),                                     // 25: cs3.sharing.ocm.v1beta1.Share
	(*ShareReference)(nil),                            // 26: cs3.sharing.ocm.v1beta1.ShareReference
	(*ReceivedShare)(nil),                             // 27: cs3.sharing.ocm.v1beta1.ReceivedShare
	(*SharePermissions)(nil),                          // 28: cs3.sharing.ocm.v1beta1.SharePermissions
	(*v1beta14.UserId)(nil),                           // 29: cs3.identity.user.v1beta1.UserId
	(ShareState)(0),                                   // 30: cs3.sharing.ocm.v1beta1.ShareState
}
var file_cs3_sharing_ocm_v1beta1_ocm_api_proto_depIdxs = []int32{
	20, // 0: cs3.sharing.ocm.v1beta1.CreateOCMShareRequest.opaque:type_name -> cs3.types.v1beta1.Opaque
	21, // 1: cs3.sharing.ocm.v1beta1.CreateOCMShareRequest.resource_id:type_name -> cs3.storage.provider.v1beta1.ResourceId
	22, // 2: cs3.sharing.ocm.v1beta1.CreateOCMShareRequest.grant:type_name -> cs3.sharing.ocm.v1beta1.ShareGrant
	23, // 3: cs3.sharing.ocm.v1beta1.CreateOCMShareRequest.recipient_mesh_provider:type_name -> cs3.ocm.provider.v1beta1.ProviderInfo
	24, // 4: cs3.sharing.ocm.v1beta1.CreateOCMShareResponse.status:type_name -> cs3.rpc.v1beta1.Status
	20, // 5: cs3.sharing.ocm.v1beta1.CreateOCMShareResponse.opaque:type_name -> cs3.types.v1beta1.Opaque
	25, // 6: cs3.sharing.ocm.v1beta1.CreateOCMShareResponse.share:type_name -> cs3.sharing.ocm.v1beta1.Share
	20, // 7: cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.opaque:type_name -> cs3.types.v1beta1.Opaque
	26, // 8: cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.ref:type_name -> cs3.sharing.ocm.v1beta1.ShareReference
	17, // 9: cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.field:type_name -> cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.UpdateField
	24, // 10: cs3.sharing.ocm.v1beta1.UpdateOCMShareResponse.status:type_name -> cs3.rpc.v1beta1.Status
	20, // 11: cs3.sharing.ocm.v1beta1.UpdateOCMShareResponse.opaque:type_name -> cs3.types.v1beta1.Opaque
	20, // 12: cs3.sharing.ocm.v1beta1.ListOCMSharesRequest.opaque:type_name -> cs3.types.v1beta1.Opaque
	18, // 13: cs3.sharing.ocm.v1beta1.ListOCMSharesRequest.filters:type_name -> cs3.sharing.ocm.v1beta1.ListOCMSharesRequest.Filter
	24, // 14: cs3.sharing.ocm.v1beta1.ListOCMSharesResponse.status:type_name -> cs3.rpc.v1beta1.Status
	20, // 15: cs3.sharing.ocm.v1beta1.ListOCMSharesResponse.opaque:type_name -> cs3.types.v1beta1.Opaque
	25, // 16: cs3.sharing.ocm.v1beta1.ListOCMSharesResponse.shares:type_name -> cs3.sharing.ocm.v1beta1.Share
	20, // 17: cs3.sharing.ocm.v1beta1.RemoveOCMShareRequest.opaque:type_name -> cs3.types.v1beta1.Opaque
	26, // 18: cs3.sharing.ocm.v1beta1.RemoveOCMShareRequest.ref:type_name -> cs3.sharing.ocm.v1beta1.ShareReference
	24, // 19: cs3.sharing.ocm.v1beta1.RemoveOCMShareResponse.status:type_name -> cs3.rpc.v1beta1.Status
	20, // 20: cs3.sharing.ocm.v1beta1.RemoveOCMShareResponse.opaque:type_name -> cs3.types.v1beta1.Opaque
	20, // 21: cs3.sharing.ocm.v1beta1.GetOCMShareRequest.opaque:type_name -> cs3.types.v1beta1.Opaque
	26, // 22: cs3.sharing.ocm.v1beta1.GetOCMShareRequest.ref:type_name -> cs3.sharing.ocm.v1beta1.ShareReference
	24, // 23: cs3.sharing.ocm.v1beta1.GetOCMShareResponse.status:type_name -> cs3.rpc.v1beta1.Status
	20, // 24: cs3.sharing.ocm.v1beta1.GetOCMShareResponse.opaque:type_name -> cs3.types.v1beta1.Opaque
	25, // 25: cs3.sharing.ocm.v1beta1.GetOCMShareResponse.share:type_name -> cs3.sharing.ocm.v1beta1.Share
	20, // 26: cs3.sharing.ocm.v1beta1.ListReceivedOCMSharesRequest.opaque:type_name -> cs3.types.v1beta1.Opaque
	24, // 27: cs3.sharing.ocm.v1beta1.ListReceivedOCMSharesResponse.status:type_name -> cs3.rpc.v1beta1.Status
	20, // 28: cs3.sharing.ocm.v1beta1.ListReceivedOCMSharesResponse.opaque:type_name -> cs3.types.v1beta1.Opaque
	27, // 29: cs3.sharing.ocm.v1beta1.ListReceivedOCMSharesResponse.shares:type_name -> cs3.sharing.ocm.v1beta1.ReceivedShare
	20, // 30: cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareRequest.opaque:type_name -> cs3.types.v1beta1.Opaque
	26, // 31: cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareRequest.ref:type_name -> cs3.sharing.ocm.v1beta1.ShareReference
	19, // 32: cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareRequest.field:type_name -> cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareRequest.UpdateField
	24, // 33: cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareResponse.status:type_name -> cs3.rpc.v1beta1.Status
	20, // 34: cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareResponse.opaque:type_name -> cs3.types.v1beta1.Opaque
	20, // 35: cs3.sharing.ocm.v1beta1.GetReceivedOCMShareRequest.opaque:type_name -> cs3.types.v1beta1.Opaque
	26, // 36: cs3.sharing.ocm.v1beta1.GetReceivedOCMShareRequest.ref:type_name -> cs3.sharing.ocm.v1beta1.ShareReference
	24, // 37: cs3.sharing.ocm.v1beta1.GetReceivedOCMShareResponse.status:type_name -> cs3.rpc.v1beta1.Status
	20, // 38: cs3.sharing.ocm.v1beta1.GetReceivedOCMShareResponse.opaque:type_name -> cs3.types.v1beta1.Opaque
	27, // 39: cs3.sharing.ocm.v1beta1.GetReceivedOCMShareResponse.share:type_name -> cs3.sharing.ocm.v1beta1.ReceivedShare
	28, // 40: cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.UpdateField.permissions:type_name -> cs3.sharing.ocm.v1beta1.SharePermissions
	0,  // 41: cs3.sharing.ocm.v1beta1.ListOCMSharesRequest.Filter.type:type_name -> cs3.sharing.ocm.v1beta1.ListOCMSharesRequest.Filter.Type
	21, // 42: cs3.sharing.ocm.v1beta1.ListOCMSharesRequest.Filter.resource_id:type_name -> cs3.storage.provider.v1beta1.ResourceId
	29, // 43: cs3.sharing.ocm.v1beta1.ListOCMSharesRequest.Filter.owner:type_name -> cs3.identity.user.v1beta1.UserId
	29, // 44: cs3.sharing.ocm.v1beta1.ListOCMSharesRequest.Filter.creator:type_name -> cs3.identity.user.v1beta1.UserId
	30, // 45: cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareRequest.UpdateField.state:type_name -> cs3.sharing.ocm.v1beta1.ShareState
	1,  // 46: cs3.sharing.ocm.v1beta1.OcmAPI.CreateOCMShare:input_type -> cs3.sharing.ocm.v1beta1.CreateOCMShareRequest
	7,  // 47: cs3.sharing.ocm.v1beta1.OcmAPI.RemoveOCMShare:input_type -> cs3.sharing.ocm.v1beta1.RemoveOCMShareRequest
	9,  // 48: cs3.sharing.ocm.v1beta1.OcmAPI.GetOCMShare:input_type -> cs3.sharing.ocm.v1beta1.GetOCMShareRequest
	5,  // 49: cs3.sharing.ocm.v1beta1.OcmAPI.ListOCMShares:input_type -> cs3.sharing.ocm.v1beta1.ListOCMSharesRequest
	3,  // 50: cs3.sharing.ocm.v1beta1.OcmAPI.UpdateOCMShare:input_type -> cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest
	11, // 51: cs3.sharing.ocm.v1beta1.OcmAPI.ListReceivedOCMShares:input_type -> cs3.sharing.ocm.v1beta1.ListReceivedOCMSharesRequest
	13, // 52: cs3.sharing.ocm.v1beta1.OcmAPI.UpdateReceivedOCMShare:input_type -> cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareRequest
	15, // 53: cs3.sharing.ocm.v1beta1.OcmAPI.GetReceivedOCMShare:input_type -> cs3.sharing.ocm.v1beta1.GetReceivedOCMShareRequest
	2,  // 54: cs3.sharing.ocm.v1beta1.OcmAPI.CreateOCMShare:output_type -> cs3.sharing.ocm.v1beta1.CreateOCMShareResponse
	8,  // 55: cs3.sharing.ocm.v1beta1.OcmAPI.RemoveOCMShare:output_type -> cs3.sharing.ocm.v1beta1.RemoveOCMShareResponse
	10, // 56: cs3.sharing.ocm.v1beta1.OcmAPI.GetOCMShare:output_type -> cs3.sharing.ocm.v1beta1.GetOCMShareResponse
	6,  // 57: cs3.sharing.ocm.v1beta1.OcmAPI.ListOCMShares:output_type -> cs3.sharing.ocm.v1beta1.ListOCMSharesResponse
	4,  // 58: cs3.sharing.ocm.v1beta1.OcmAPI.UpdateOCMShare:output_type -> cs3.sharing.ocm.v1beta1.UpdateOCMShareResponse
	12, // 59: cs3.sharing.ocm.v1beta1.OcmAPI.ListReceivedOCMShares:output_type -> cs3.sharing.ocm.v1beta1.ListReceivedOCMSharesResponse
	14, // 60: cs3.sharing.ocm.v1beta1.OcmAPI.UpdateReceivedOCMShare:output_type -> cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareResponse
	16, // 61: cs3.sharing.ocm.v1beta1.OcmAPI.GetReceivedOCMShare:output_type -> cs3.sharing.ocm.v1beta1.GetReceivedOCMShareResponse
	54, // [54:62] is the sub-list for method output_type
	46, // [46:54] is the sub-list for method input_type
	46, // [46:46] is the sub-list for extension type_name
	46, // [46:46] is the sub-list for extension extendee
	0,  // [0:46] is the sub-list for field type_name
}

func init() { file_cs3_sharing_ocm_v1beta1_ocm_api_proto_init() }
func file_cs3_sharing_ocm_v1beta1_ocm_api_proto_init() {
	if File_cs3_sharing_ocm_v1beta1_ocm_api_proto != nil {
		return
	}
	file_cs3_sharing_ocm_v1beta1_resources_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_cs3_sharing_ocm_v1beta1_ocm_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOCMShareRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cs3_sharing_ocm_v1beta1_ocm_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOCMShareResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cs3_sharing_ocm_v1beta1_ocm_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOCMShareRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cs3_sharing_ocm_v1beta1_ocm_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOCMShareResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cs3_sharing_ocm_v1beta1_ocm_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOCMSharesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cs3_sharing_ocm_v1beta1_ocm_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOCMSharesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cs3_sharing_ocm_v1beta1_ocm_api_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveOCMShareRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cs3_sharing_ocm_v1beta1_ocm_api_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveOCMShareResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cs3_sharing_ocm_v1beta1_ocm_api_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOCMShareRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cs3_sharing_ocm_v1beta1_ocm_api_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOCMShareResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cs3_sharing_ocm_v1beta1_ocm_api_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListReceivedOCMSharesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cs3_sharing_ocm_v1beta1_ocm_api_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListReceivedOCMSharesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cs3_sharing_ocm_v1beta1_ocm_api_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateReceivedOCMShareRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cs3_sharing_ocm_v1beta1_ocm_api_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateReceivedOCMShareResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cs3_sharing_ocm_v1beta1_ocm_api_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReceivedOCMShareRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cs3_sharing_ocm_v1beta1_ocm_api_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReceivedOCMShareResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cs3_sharing_ocm_v1beta1_ocm_api_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOCMShareRequest_UpdateField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cs3_sharing_ocm_v1beta1_ocm_api_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOCMSharesRequest_Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cs3_sharing_ocm_v1beta1_ocm_api_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateReceivedOCMShareRequest_UpdateField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_cs3_sharing_ocm_v1beta1_ocm_api_proto_msgTypes[16].OneofWrappers = []interface{}{
		(*UpdateOCMShareRequest_UpdateField_Permissions)(nil),
		(*UpdateOCMShareRequest_UpdateField_DisplayName)(nil),
	}
	file_cs3_sharing_ocm_v1beta1_ocm_api_proto_msgTypes[17].OneofWrappers = []interface{}{
		(*ListOCMSharesRequest_Filter_ResourceId)(nil),
		(*ListOCMSharesRequest_Filter_Owner)(nil),
		(*ListOCMSharesRequest_Filter_Creator)(nil),
	}
	file_cs3_sharing_ocm_v1beta1_ocm_api_proto_msgTypes[18].OneofWrappers = []interface{}{
		(*UpdateReceivedOCMShareRequest_UpdateField_DisplayName)(nil),
		(*UpdateReceivedOCMShareRequest_UpdateField_State)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cs3_sharing_ocm_v1beta1_ocm_api_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_cs3_sharing_ocm_v1beta1_ocm_api_proto_goTypes,
		DependencyIndexes: file_cs3_sharing_ocm_v1beta1_ocm_api_proto_depIdxs,
		EnumInfos:         file_cs3_sharing_ocm_v1beta1_ocm_api_proto_enumTypes,
		MessageInfos:      file_cs3_sharing_ocm_v1beta1_ocm_api_proto_msgTypes,
	}.Build()
	File_cs3_sharing_ocm_v1beta1_ocm_api_proto = out.File
	file_cs3_sharing_ocm_v1beta1_ocm_api_proto_rawDesc = nil
	file_cs3_sharing_ocm_v1beta1_ocm_api_proto_goTypes = nil
	file_cs3_sharing_ocm_v1beta1_ocm_api_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// OcmAPIClient is the client API for OcmAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OcmAPIClient interface {
	// Creates a new ocm share.
	// MUST return CODE_NOT_FOUND if the resource reference does not exist.
	// MUST return CODE_ALREADY_EXISTS if the share already exists for the 4-tuple consisting of
	// (owner, shared_resource, grantee).
	// New shares MUST be created in the state SHARE_STATE_PENDING.
	CreateOCMShare(ctx context.Context, in *CreateOCMShareRequest, opts ...grpc.CallOption) (*CreateOCMShareResponse, error)
	// Removes a share.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	RemoveOCMShare(ctx context.Context, in *RemoveOCMShareRequest, opts ...grpc.CallOption) (*RemoveOCMShareResponse, error)
	// Gets share information for a single share.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	GetOCMShare(ctx context.Context, in *GetOCMShareRequest, opts ...grpc.CallOption) (*GetOCMShareResponse, error)
	// List the shares the authenticated principal has created,
	// both as owner and creator. If a filter is specified, only
	// shares satisfying the filter MUST be returned.
	ListOCMShares(ctx context.Context, in *ListOCMSharesRequest, opts ...grpc.CallOption) (*ListOCMSharesResponse, error)
	// Updates a share.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	UpdateOCMShare(ctx context.Context, in *UpdateOCMShareRequest, opts ...grpc.CallOption) (*UpdateOCMShareResponse, error)
	// List all shares the authenticated principal has received.
	ListReceivedOCMShares(ctx context.Context, in *ListReceivedOCMSharesRequest, opts ...grpc.CallOption) (*ListReceivedOCMSharesResponse, error)
	// Update the received share to change the share state or the display name.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	UpdateReceivedOCMShare(ctx context.Context, in *UpdateReceivedOCMShareRequest, opts ...grpc.CallOption) (*UpdateReceivedOCMShareResponse, error)
	// Get the information for the given received share reference.
	// MUST return CODE_NOT_FOUND if the received share reference does not exist.
	GetReceivedOCMShare(ctx context.Context, in *GetReceivedOCMShareRequest, opts ...grpc.CallOption) (*GetReceivedOCMShareResponse, error)
}

type ocmAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewOcmAPIClient(cc grpc.ClientConnInterface) OcmAPIClient {
	return &ocmAPIClient{cc}
}

func (c *ocmAPIClient) CreateOCMShare(ctx context.Context, in *CreateOCMShareRequest, opts ...grpc.CallOption) (*CreateOCMShareResponse, error) {
	out := new(CreateOCMShareResponse)
	err := c.cc.Invoke(ctx, "/cs3.sharing.ocm.v1beta1.OcmAPI/CreateOCMShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocmAPIClient) RemoveOCMShare(ctx context.Context, in *RemoveOCMShareRequest, opts ...grpc.CallOption) (*RemoveOCMShareResponse, error) {
	out := new(RemoveOCMShareResponse)
	err := c.cc.Invoke(ctx, "/cs3.sharing.ocm.v1beta1.OcmAPI/RemoveOCMShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocmAPIClient) GetOCMShare(ctx context.Context, in *GetOCMShareRequest, opts ...grpc.CallOption) (*GetOCMShareResponse, error) {
	out := new(GetOCMShareResponse)
	err := c.cc.Invoke(ctx, "/cs3.sharing.ocm.v1beta1.OcmAPI/GetOCMShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocmAPIClient) ListOCMShares(ctx context.Context, in *ListOCMSharesRequest, opts ...grpc.CallOption) (*ListOCMSharesResponse, error) {
	out := new(ListOCMSharesResponse)
	err := c.cc.Invoke(ctx, "/cs3.sharing.ocm.v1beta1.OcmAPI/ListOCMShares", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocmAPIClient) UpdateOCMShare(ctx context.Context, in *UpdateOCMShareRequest, opts ...grpc.CallOption) (*UpdateOCMShareResponse, error) {
	out := new(UpdateOCMShareResponse)
	err := c.cc.Invoke(ctx, "/cs3.sharing.ocm.v1beta1.OcmAPI/UpdateOCMShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocmAPIClient) ListReceivedOCMShares(ctx context.Context, in *ListReceivedOCMSharesRequest, opts ...grpc.CallOption) (*ListReceivedOCMSharesResponse, error) {
	out := new(ListReceivedOCMSharesResponse)
	err := c.cc.Invoke(ctx, "/cs3.sharing.ocm.v1beta1.OcmAPI/ListReceivedOCMShares", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocmAPIClient) UpdateReceivedOCMShare(ctx context.Context, in *UpdateReceivedOCMShareRequest, opts ...grpc.CallOption) (*UpdateReceivedOCMShareResponse, error) {
	out := new(UpdateReceivedOCMShareResponse)
	err := c.cc.Invoke(ctx, "/cs3.sharing.ocm.v1beta1.OcmAPI/UpdateReceivedOCMShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocmAPIClient) GetReceivedOCMShare(ctx context.Context, in *GetReceivedOCMShareRequest, opts ...grpc.CallOption) (*GetReceivedOCMShareResponse, error) {
	out := new(GetReceivedOCMShareResponse)
	err := c.cc.Invoke(ctx, "/cs3.sharing.ocm.v1beta1.OcmAPI/GetReceivedOCMShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OcmAPIServer is the server API for OcmAPI service.
type OcmAPIServer interface {
	// Creates a new ocm share.
	// MUST return CODE_NOT_FOUND if the resource reference does not exist.
	// MUST return CODE_ALREADY_EXISTS if the share already exists for the 4-tuple consisting of
	// (owner, shared_resource, grantee).
	// New shares MUST be created in the state SHARE_STATE_PENDING.
	CreateOCMShare(context.Context, *CreateOCMShareRequest) (*CreateOCMShareResponse, error)
	// Removes a share.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	RemoveOCMShare(context.Context, *RemoveOCMShareRequest) (*RemoveOCMShareResponse, error)
	// Gets share information for a single share.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	GetOCMShare(context.Context, *GetOCMShareRequest) (*GetOCMShareResponse, error)
	// List the shares the authenticated principal has created,
	// both as owner and creator. If a filter is specified, only
	// shares satisfying the filter MUST be returned.
	ListOCMShares(context.Context, *ListOCMSharesRequest) (*ListOCMSharesResponse, error)
	// Updates a share.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	UpdateOCMShare(context.Context, *UpdateOCMShareRequest) (*UpdateOCMShareResponse, error)
	// List all shares the authenticated principal has received.
	ListReceivedOCMShares(context.Context, *ListReceivedOCMSharesRequest) (*ListReceivedOCMSharesResponse, error)
	// Update the received share to change the share state or the display name.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	UpdateReceivedOCMShare(context.Context, *UpdateReceivedOCMShareRequest) (*UpdateReceivedOCMShareResponse, error)
	// Get the information for the given received share reference.
	// MUST return CODE_NOT_FOUND if the received share reference does not exist.
	GetReceivedOCMShare(context.Context, *GetReceivedOCMShareRequest) (*GetReceivedOCMShareResponse, error)
}

// UnimplementedOcmAPIServer can be embedded to have forward compatible implementations.
type UnimplementedOcmAPIServer struct {
}

func (*UnimplementedOcmAPIServer) CreateOCMShare(context.Context, *CreateOCMShareRequest) (*CreateOCMShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOCMShare not implemented")
}
func (*UnimplementedOcmAPIServer) RemoveOCMShare(context.Context, *RemoveOCMShareRequest) (*RemoveOCMShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveOCMShare not implemented")
}
func (*UnimplementedOcmAPIServer) GetOCMShare(context.Context, *GetOCMShareRequest) (*GetOCMShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOCMShare not implemented")
}
func (*UnimplementedOcmAPIServer) ListOCMShares(context.Context, *ListOCMSharesRequest) (*ListOCMSharesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOCMShares not implemented")
}
func (*UnimplementedOcmAPIServer) UpdateOCMShare(context.Context, *UpdateOCMShareRequest) (*UpdateOCMShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOCMShare not implemented")
}
func (*UnimplementedOcmAPIServer) ListReceivedOCMShares(context.Context, *ListReceivedOCMSharesRequest) (*ListReceivedOCMSharesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReceivedOCMShares not implemented")
}
func (*UnimplementedOcmAPIServer) UpdateReceivedOCMShare(context.Context, *UpdateReceivedOCMShareRequest) (*UpdateReceivedOCMShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReceivedOCMShare not implemented")
}
func (*UnimplementedOcmAPIServer) GetReceivedOCMShare(context.Context, *GetReceivedOCMShareRequest) (*GetReceivedOCMShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReceivedOCMShare not implemented")
}

func RegisterOcmAPIServer(s *grpc.Server, srv OcmAPIServer) {
	s.RegisterService(&_OcmAPI_serviceDesc, srv)
}

func _OcmAPI_CreateOCMShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOCMShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcmAPIServer).CreateOCMShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.sharing.ocm.v1beta1.OcmAPI/CreateOCMShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcmAPIServer).CreateOCMShare(ctx, req.(*CreateOCMShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcmAPI_RemoveOCMShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveOCMShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcmAPIServer).RemoveOCMShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.sharing.ocm.v1beta1.OcmAPI/RemoveOCMShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcmAPIServer).RemoveOCMShare(ctx, req.(*RemoveOCMShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcmAPI_GetOCMShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOCMShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcmAPIServer).GetOCMShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.sharing.ocm.v1beta1.OcmAPI/GetOCMShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcmAPIServer).GetOCMShare(ctx, req.(*GetOCMShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcmAPI_ListOCMShares_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOCMSharesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcmAPIServer).ListOCMShares(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.sharing.ocm.v1beta1.OcmAPI/ListOCMShares",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcmAPIServer).ListOCMShares(ctx, req.(*ListOCMSharesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcmAPI_UpdateOCMShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOCMShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcmAPIServer).UpdateOCMShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.sharing.ocm.v1beta1.OcmAPI/UpdateOCMShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcmAPIServer).UpdateOCMShare(ctx, req.(*UpdateOCMShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcmAPI_ListReceivedOCMShares_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReceivedOCMSharesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcmAPIServer).ListReceivedOCMShares(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.sharing.ocm.v1beta1.OcmAPI/ListReceivedOCMShares",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcmAPIServer).ListReceivedOCMShares(ctx, req.(*ListReceivedOCMSharesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcmAPI_UpdateReceivedOCMShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReceivedOCMShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcmAPIServer).UpdateReceivedOCMShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.sharing.ocm.v1beta1.OcmAPI/UpdateReceivedOCMShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcmAPIServer).UpdateReceivedOCMShare(ctx, req.(*UpdateReceivedOCMShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcmAPI_GetReceivedOCMShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReceivedOCMShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcmAPIServer).GetReceivedOCMShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.sharing.ocm.v1beta1.OcmAPI/GetReceivedOCMShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcmAPIServer).GetReceivedOCMShare(ctx, req.(*GetReceivedOCMShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _OcmAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cs3.sharing.ocm.v1beta1.OcmAPI",
	HandlerType: (*OcmAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOCMShare",
			Handler:    _OcmAPI_CreateOCMShare_Handler,
		},
		{
			MethodName: "RemoveOCMShare",
			Handler:    _OcmAPI_RemoveOCMShare_Handler,
		},
		{
			MethodName: "GetOCMShare",
			Handler:    _OcmAPI_GetOCMShare_Handler,
		},
		{
			MethodName: "ListOCMShares",
			Handler:    _OcmAPI_ListOCMShares_Handler,
		},
		{
			MethodName: "UpdateOCMShare",
			Handler:    _OcmAPI_UpdateOCMShare_Handler,
		},
		{
			MethodName: "ListReceivedOCMShares",
			Handler:    _OcmAPI_ListReceivedOCMShares_Handler,
		},
		{
			MethodName: "UpdateReceivedOCMShare",
			Handler:    _OcmAPI_UpdateReceivedOCMShare_Handler,
		},
		{
			MethodName: "GetReceivedOCMShare",
			Handler:    _OcmAPI_GetReceivedOCMShare_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cs3/sharing/ocm/v1beta1/ocm_api.proto",
}
