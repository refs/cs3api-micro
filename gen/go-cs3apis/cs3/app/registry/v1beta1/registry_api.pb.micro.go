// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: cs3/app/registry/v1beta1/registry_api.proto

package registryv1beta1

import (
	fmt "fmt"
	_ "github.com/cs3org/go-cs3apis/build/go-cs3apis/cs3/rpc/v1beta1"
	_ "github.com/cs3org/go-cs3apis/build/go-cs3apis/cs3/storage/provider/v1beta1"
	_ "github.com/cs3org/go-cs3apis/build/go-cs3apis/cs3/types/v1beta1"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for RegistryAPI service

type RegistryAPIService interface {
	// Returns the app providers that are capable of handling this resource info.
	// MUST return CODE_NOT_FOUND if no providers are available.
	GetAppProviders(ctx context.Context, in *GetAppProvidersRequest, opts ...client.CallOption) (*GetAppProvidersResponse, error)
	// Returns a list of the available app providers known by this registry.
	ListAppProviders(ctx context.Context, in *ListAppProvidersRequest, opts ...client.CallOption) (*ListAppProvidersResponse, error)
}

type registryAPIService struct {
	c    client.Client
	name string
}

func NewRegistryAPIService(name string, c client.Client) RegistryAPIService {
	return &registryAPIService{
		c:    c,
		name: name,
	}
}

func (c *registryAPIService) GetAppProviders(ctx context.Context, in *GetAppProvidersRequest, opts ...client.CallOption) (*GetAppProvidersResponse, error) {
	req := c.c.NewRequest(c.name, "RegistryAPI.GetAppProviders", in)
	out := new(GetAppProvidersResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryAPIService) ListAppProviders(ctx context.Context, in *ListAppProvidersRequest, opts ...client.CallOption) (*ListAppProvidersResponse, error) {
	req := c.c.NewRequest(c.name, "RegistryAPI.ListAppProviders", in)
	out := new(ListAppProvidersResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RegistryAPI service

type RegistryAPIHandler interface {
	// Returns the app providers that are capable of handling this resource info.
	// MUST return CODE_NOT_FOUND if no providers are available.
	GetAppProviders(context.Context, *GetAppProvidersRequest, *GetAppProvidersResponse) error
	// Returns a list of the available app providers known by this registry.
	ListAppProviders(context.Context, *ListAppProvidersRequest, *ListAppProvidersResponse) error
}

func RegisterRegistryAPIHandler(s server.Server, hdlr RegistryAPIHandler, opts ...server.HandlerOption) error {
	type registryAPI interface {
		GetAppProviders(ctx context.Context, in *GetAppProvidersRequest, out *GetAppProvidersResponse) error
		ListAppProviders(ctx context.Context, in *ListAppProvidersRequest, out *ListAppProvidersResponse) error
	}
	type RegistryAPI struct {
		registryAPI
	}
	h := &registryAPIHandler{hdlr}
	return s.Handle(s.NewHandler(&RegistryAPI{h}, opts...))
}

type registryAPIHandler struct {
	RegistryAPIHandler
}

func (h *registryAPIHandler) GetAppProviders(ctx context.Context, in *GetAppProvidersRequest, out *GetAppProvidersResponse) error {
	return h.RegistryAPIHandler.GetAppProviders(ctx, in, out)
}

func (h *registryAPIHandler) ListAppProviders(ctx context.Context, in *ListAppProvidersRequest, out *ListAppProvidersResponse) error {
	return h.RegistryAPIHandler.ListAppProviders(ctx, in, out)
}
