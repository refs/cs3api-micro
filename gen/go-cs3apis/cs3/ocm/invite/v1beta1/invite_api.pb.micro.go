// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: cs3/ocm/invite/v1beta1/invite_api.proto

package invitev1beta1

import (
	fmt "fmt"
	_ "github.com/cs3org/go-cs3apis/build/go-cs3apis/cs3/identity/user/v1beta1"
	_ "github.com/cs3org/go-cs3apis/build/go-cs3apis/cs3/ocm/provider/v1beta1"
	_ "github.com/cs3org/go-cs3apis/build/go-cs3apis/cs3/rpc/v1beta1"
	_ "github.com/cs3org/go-cs3apis/build/go-cs3apis/cs3/types/v1beta1"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for InviteAPI service

type InviteAPIService interface {
	// Generates a new token for the user with a validity of 24 hours.
	GenerateInviteToken(ctx context.Context, in *GenerateInviteTokenRequest, opts ...client.CallOption) (*GenerateInviteTokenResponse, error)
	// Forwards a received invite to the sync'n'share system provider.
	ForwardInvite(ctx context.Context, in *ForwardInviteRequest, opts ...client.CallOption) (*ForwardInviteResponse, error)
	// Completes an invitation acceptance.
	AcceptInvite(ctx context.Context, in *AcceptInviteRequest, opts ...client.CallOption) (*AcceptInviteResponse, error)
	// Retrieves details about a remote user who has accepted an invite to share.
	GetRemoteUser(ctx context.Context, in *GetRemoteUserRequest, opts ...client.CallOption) (*GetRemoteUserResponse, error)
}

type inviteAPIService struct {
	c    client.Client
	name string
}

func NewInviteAPIService(name string, c client.Client) InviteAPIService {
	return &inviteAPIService{
		c:    c,
		name: name,
	}
}

func (c *inviteAPIService) GenerateInviteToken(ctx context.Context, in *GenerateInviteTokenRequest, opts ...client.CallOption) (*GenerateInviteTokenResponse, error) {
	req := c.c.NewRequest(c.name, "InviteAPI.GenerateInviteToken", in)
	out := new(GenerateInviteTokenResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inviteAPIService) ForwardInvite(ctx context.Context, in *ForwardInviteRequest, opts ...client.CallOption) (*ForwardInviteResponse, error) {
	req := c.c.NewRequest(c.name, "InviteAPI.ForwardInvite", in)
	out := new(ForwardInviteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inviteAPIService) AcceptInvite(ctx context.Context, in *AcceptInviteRequest, opts ...client.CallOption) (*AcceptInviteResponse, error) {
	req := c.c.NewRequest(c.name, "InviteAPI.AcceptInvite", in)
	out := new(AcceptInviteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inviteAPIService) GetRemoteUser(ctx context.Context, in *GetRemoteUserRequest, opts ...client.CallOption) (*GetRemoteUserResponse, error) {
	req := c.c.NewRequest(c.name, "InviteAPI.GetRemoteUser", in)
	out := new(GetRemoteUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for InviteAPI service

type InviteAPIHandler interface {
	// Generates a new token for the user with a validity of 24 hours.
	GenerateInviteToken(context.Context, *GenerateInviteTokenRequest, *GenerateInviteTokenResponse) error
	// Forwards a received invite to the sync'n'share system provider.
	ForwardInvite(context.Context, *ForwardInviteRequest, *ForwardInviteResponse) error
	// Completes an invitation acceptance.
	AcceptInvite(context.Context, *AcceptInviteRequest, *AcceptInviteResponse) error
	// Retrieves details about a remote user who has accepted an invite to share.
	GetRemoteUser(context.Context, *GetRemoteUserRequest, *GetRemoteUserResponse) error
}

func RegisterInviteAPIHandler(s server.Server, hdlr InviteAPIHandler, opts ...server.HandlerOption) error {
	type inviteAPI interface {
		GenerateInviteToken(ctx context.Context, in *GenerateInviteTokenRequest, out *GenerateInviteTokenResponse) error
		ForwardInvite(ctx context.Context, in *ForwardInviteRequest, out *ForwardInviteResponse) error
		AcceptInvite(ctx context.Context, in *AcceptInviteRequest, out *AcceptInviteResponse) error
		GetRemoteUser(ctx context.Context, in *GetRemoteUserRequest, out *GetRemoteUserResponse) error
	}
	type InviteAPI struct {
		inviteAPI
	}
	h := &inviteAPIHandler{hdlr}
	return s.Handle(s.NewHandler(&InviteAPI{h}, opts...))
}

type inviteAPIHandler struct {
	InviteAPIHandler
}

func (h *inviteAPIHandler) GenerateInviteToken(ctx context.Context, in *GenerateInviteTokenRequest, out *GenerateInviteTokenResponse) error {
	return h.InviteAPIHandler.GenerateInviteToken(ctx, in, out)
}

func (h *inviteAPIHandler) ForwardInvite(ctx context.Context, in *ForwardInviteRequest, out *ForwardInviteResponse) error {
	return h.InviteAPIHandler.ForwardInvite(ctx, in, out)
}

func (h *inviteAPIHandler) AcceptInvite(ctx context.Context, in *AcceptInviteRequest, out *AcceptInviteResponse) error {
	return h.InviteAPIHandler.AcceptInvite(ctx, in, out)
}

func (h *inviteAPIHandler) GetRemoteUser(ctx context.Context, in *GetRemoteUserRequest, out *GetRemoteUserResponse) error {
	return h.InviteAPIHandler.GetRemoteUser(ctx, in, out)
}
