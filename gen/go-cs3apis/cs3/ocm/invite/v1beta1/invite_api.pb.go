// Copyright 2018-2019 CERN
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// In applying this license, CERN does not waive the privileges and immunities
// granted to it by virtue of its status as an Intergovernmental Organization
// or submit itself to any jurisdiction.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.24.0
// 	protoc        v3.8.0
// source: cs3/ocm/invite/v1beta1/invite_api.proto

package invitev1beta1

import (
	context "context"
	v1beta13 "github.com/cs3org/go-cs3apis/build/go-cs3apis/cs3/identity/user/v1beta1"
	v1beta12 "github.com/cs3org/go-cs3apis/build/go-cs3apis/cs3/ocm/provider/v1beta1"
	v1beta11 "github.com/cs3org/go-cs3apis/build/go-cs3apis/cs3/rpc/v1beta1"
	v1beta1 "github.com/cs3org/go-cs3apis/build/go-cs3apis/cs3/types/v1beta1"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type GenerateInviteTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// OPTIONAL.
	// Opaque information.
	Opaque *v1beta1.Opaque `protobuf:"bytes,1,opt,name=opaque,proto3" json:"opaque,omitempty"`
}

func (x *GenerateInviteTokenRequest) Reset() {
	*x = GenerateInviteTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cs3_ocm_invite_v1beta1_invite_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateInviteTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateInviteTokenRequest) ProtoMessage() {}

func (x *GenerateInviteTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cs3_ocm_invite_v1beta1_invite_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateInviteTokenRequest.ProtoReflect.Descriptor instead.
func (*GenerateInviteTokenRequest) Descriptor() ([]byte, []int) {
	return file_cs3_ocm_invite_v1beta1_invite_api_proto_rawDescGZIP(), []int{0}
}

func (x *GenerateInviteTokenRequest) GetOpaque() *v1beta1.Opaque {
	if x != nil {
		return x.Opaque
	}
	return nil
}

type GenerateInviteTokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// REQUIRED.
	// The response status.
	Status *v1beta11.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// OPTIONAL.
	// Opaque information.
	Opaque *v1beta1.Opaque `protobuf:"bytes,2,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// REQUIRED.
	// The generated token.
	InviteToken *InviteToken `protobuf:"bytes,3,opt,name=invite_token,json=inviteToken,proto3" json:"invite_token,omitempty"`
}

func (x *GenerateInviteTokenResponse) Reset() {
	*x = GenerateInviteTokenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cs3_ocm_invite_v1beta1_invite_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateInviteTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateInviteTokenResponse) ProtoMessage() {}

func (x *GenerateInviteTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cs3_ocm_invite_v1beta1_invite_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateInviteTokenResponse.ProtoReflect.Descriptor instead.
func (*GenerateInviteTokenResponse) Descriptor() ([]byte, []int) {
	return file_cs3_ocm_invite_v1beta1_invite_api_proto_rawDescGZIP(), []int{1}
}

func (x *GenerateInviteTokenResponse) GetStatus() *v1beta11.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GenerateInviteTokenResponse) GetOpaque() *v1beta1.Opaque {
	if x != nil {
		return x.Opaque
	}
	return nil
}

func (x *GenerateInviteTokenResponse) GetInviteToken() *InviteToken {
	if x != nil {
		return x.InviteToken
	}
	return nil
}

type ForwardInviteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// OPTIONAL.
	// Opaque information.
	Opaque *v1beta1.Opaque `protobuf:"bytes,1,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// REQUIRED.
	// The token to authenticate with.
	InviteToken *InviteToken `protobuf:"bytes,2,opt,name=invite_token,json=inviteToken,proto3" json:"invite_token,omitempty"`
	// REQUIRED.
	// The details of the sync'n'share system provider of the user who sent the invite.
	OriginSystemProvider *v1beta12.ProviderInfo `protobuf:"bytes,3,opt,name=origin_system_provider,json=originSystemProvider,proto3" json:"origin_system_provider,omitempty"`
}

func (x *ForwardInviteRequest) Reset() {
	*x = ForwardInviteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cs3_ocm_invite_v1beta1_invite_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForwardInviteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForwardInviteRequest) ProtoMessage() {}

func (x *ForwardInviteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cs3_ocm_invite_v1beta1_invite_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForwardInviteRequest.ProtoReflect.Descriptor instead.
func (*ForwardInviteRequest) Descriptor() ([]byte, []int) {
	return file_cs3_ocm_invite_v1beta1_invite_api_proto_rawDescGZIP(), []int{2}
}

func (x *ForwardInviteRequest) GetOpaque() *v1beta1.Opaque {
	if x != nil {
		return x.Opaque
	}
	return nil
}

func (x *ForwardInviteRequest) GetInviteToken() *InviteToken {
	if x != nil {
		return x.InviteToken
	}
	return nil
}

func (x *ForwardInviteRequest) GetOriginSystemProvider() *v1beta12.ProviderInfo {
	if x != nil {
		return x.OriginSystemProvider
	}
	return nil
}

type ForwardInviteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// REQUIRED.
	// The response status.
	Status *v1beta11.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// OPTIONAL.
	// Opaque information.
	Opaque *v1beta1.Opaque `protobuf:"bytes,2,opt,name=opaque,proto3" json:"opaque,omitempty"`
}

func (x *ForwardInviteResponse) Reset() {
	*x = ForwardInviteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cs3_ocm_invite_v1beta1_invite_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForwardInviteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForwardInviteResponse) ProtoMessage() {}

func (x *ForwardInviteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cs3_ocm_invite_v1beta1_invite_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForwardInviteResponse.ProtoReflect.Descriptor instead.
func (*ForwardInviteResponse) Descriptor() ([]byte, []int) {
	return file_cs3_ocm_invite_v1beta1_invite_api_proto_rawDescGZIP(), []int{3}
}

func (x *ForwardInviteResponse) GetStatus() *v1beta11.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ForwardInviteResponse) GetOpaque() *v1beta1.Opaque {
	if x != nil {
		return x.Opaque
	}
	return nil
}

type AcceptInviteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// OPTIONAL.
	// Opaque information.
	Opaque *v1beta1.Opaque `protobuf:"bytes,1,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// REQUIRED.
	// The token to authenticate with.
	InviteToken *InviteToken `protobuf:"bytes,2,opt,name=invite_token,json=inviteToken,proto3" json:"invite_token,omitempty"`
	// REQUIRED.
	// The user who accepted the invite.
	RemoteUser *v1beta13.User `protobuf:"bytes,3,opt,name=remote_user,json=remoteUser,proto3" json:"remote_user,omitempty"`
}

func (x *AcceptInviteRequest) Reset() {
	*x = AcceptInviteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cs3_ocm_invite_v1beta1_invite_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcceptInviteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcceptInviteRequest) ProtoMessage() {}

func (x *AcceptInviteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cs3_ocm_invite_v1beta1_invite_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcceptInviteRequest.ProtoReflect.Descriptor instead.
func (*AcceptInviteRequest) Descriptor() ([]byte, []int) {
	return file_cs3_ocm_invite_v1beta1_invite_api_proto_rawDescGZIP(), []int{4}
}

func (x *AcceptInviteRequest) GetOpaque() *v1beta1.Opaque {
	if x != nil {
		return x.Opaque
	}
	return nil
}

func (x *AcceptInviteRequest) GetInviteToken() *InviteToken {
	if x != nil {
		return x.InviteToken
	}
	return nil
}

func (x *AcceptInviteRequest) GetRemoteUser() *v1beta13.User {
	if x != nil {
		return x.RemoteUser
	}
	return nil
}

type AcceptInviteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// REQUIRED.
	// The response status.
	Status *v1beta11.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// OPTIONAL.
	// Opaque information.
	Opaque *v1beta1.Opaque `protobuf:"bytes,2,opt,name=opaque,proto3" json:"opaque,omitempty"`
}

func (x *AcceptInviteResponse) Reset() {
	*x = AcceptInviteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cs3_ocm_invite_v1beta1_invite_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcceptInviteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcceptInviteResponse) ProtoMessage() {}

func (x *AcceptInviteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cs3_ocm_invite_v1beta1_invite_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcceptInviteResponse.ProtoReflect.Descriptor instead.
func (*AcceptInviteResponse) Descriptor() ([]byte, []int) {
	return file_cs3_ocm_invite_v1beta1_invite_api_proto_rawDescGZIP(), []int{5}
}

func (x *AcceptInviteResponse) GetStatus() *v1beta11.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *AcceptInviteResponse) GetOpaque() *v1beta1.Opaque {
	if x != nil {
		return x.Opaque
	}
	return nil
}

type GetRemoteUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// OPTIONAL.
	// Opaque information.
	Opaque *v1beta1.Opaque `protobuf:"bytes,1,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// REQUIRED.
	// The id of the user.
	RemoteUserId *v1beta13.UserId `protobuf:"bytes,2,opt,name=remote_user_id,json=remoteUserId,proto3" json:"remote_user_id,omitempty"`
}

func (x *GetRemoteUserRequest) Reset() {
	*x = GetRemoteUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cs3_ocm_invite_v1beta1_invite_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRemoteUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRemoteUserRequest) ProtoMessage() {}

func (x *GetRemoteUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cs3_ocm_invite_v1beta1_invite_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRemoteUserRequest.ProtoReflect.Descriptor instead.
func (*GetRemoteUserRequest) Descriptor() ([]byte, []int) {
	return file_cs3_ocm_invite_v1beta1_invite_api_proto_rawDescGZIP(), []int{6}
}

func (x *GetRemoteUserRequest) GetOpaque() *v1beta1.Opaque {
	if x != nil {
		return x.Opaque
	}
	return nil
}

func (x *GetRemoteUserRequest) GetRemoteUserId() *v1beta13.UserId {
	if x != nil {
		return x.RemoteUserId
	}
	return nil
}

type GetRemoteUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// REQUIRED.
	// The response status.
	Status *v1beta11.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// OPTIONAL.
	// Opaque information.
	Opaque *v1beta1.Opaque `protobuf:"bytes,2,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// REQUIRED.
	// The user information.
	RemoteUser *v1beta13.User `protobuf:"bytes,3,opt,name=remote_user,json=remoteUser,proto3" json:"remote_user,omitempty"`
}

func (x *GetRemoteUserResponse) Reset() {
	*x = GetRemoteUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cs3_ocm_invite_v1beta1_invite_api_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRemoteUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRemoteUserResponse) ProtoMessage() {}

func (x *GetRemoteUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cs3_ocm_invite_v1beta1_invite_api_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRemoteUserResponse.ProtoReflect.Descriptor instead.
func (*GetRemoteUserResponse) Descriptor() ([]byte, []int) {
	return file_cs3_ocm_invite_v1beta1_invite_api_proto_rawDescGZIP(), []int{7}
}

func (x *GetRemoteUserResponse) GetStatus() *v1beta11.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetRemoteUserResponse) GetOpaque() *v1beta1.Opaque {
	if x != nil {
		return x.Opaque
	}
	return nil
}

func (x *GetRemoteUserResponse) GetRemoteUser() *v1beta13.User {
	if x != nil {
		return x.RemoteUser
	}
	return nil
}

var File_cs3_ocm_invite_v1beta1_invite_api_proto protoreflect.FileDescriptor

var file_cs3_ocm_invite_v1beta1_invite_api_proto_rawDesc = []byte{
	0x0a, 0x27, 0x63, 0x73, 0x33, 0x2f, 0x6f, 0x63, 0x6d, 0x2f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x63, 0x73, 0x33, 0x2e, 0x6f,
	0x63, 0x6d, 0x2e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x1a, 0x29, 0x63, 0x73, 0x33, 0x2f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2f,
	0x75, 0x73, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x26, 0x63, 0x73,
	0x33, 0x2f, 0x6f, 0x63, 0x6d, 0x2f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x2f, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x28, 0x63, 0x73, 0x33, 0x2f, 0x6f, 0x63, 0x6d, 0x2f, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c,
	0x63, 0x73, 0x33, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x63, 0x73,
	0x33, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4f, 0x0a, 0x1a, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x6f, 0x70, 0x61,
	0x71, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x73, 0x33, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4f, 0x70,
	0x61, 0x71, 0x75, 0x65, 0x52, 0x06, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x22, 0xc9, 0x01, 0x0a,
	0x1b, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63,
	0x73, 0x33, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a,
	0x06, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x63, 0x73, 0x33, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x52, 0x06, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65,
	0x12, 0x46, 0x0a, 0x0c, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x6f, 0x63, 0x6d,
	0x2e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x0b, 0x69, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xef, 0x01, 0x0a, 0x14, 0x46, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x31, 0x0a, 0x06, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x52, 0x06, 0x6f, 0x70,
	0x61, 0x71, 0x75, 0x65, 0x12, 0x46, 0x0a, 0x0c, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x73, 0x33,
	0x2e, 0x6f, 0x63, 0x6d, 0x2e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52,
	0x0b, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x5c, 0x0a, 0x16,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63,
	0x73, 0x33, 0x2e, 0x6f, 0x63, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x14, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x22, 0x7b, 0x0a, 0x15, 0x46, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x06, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x52,
	0x06, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x22, 0xd2, 0x01, 0x0a, 0x13, 0x41, 0x63, 0x63, 0x65,
	0x70, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x31, 0x0a, 0x06, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x52, 0x06, 0x6f, 0x70, 0x61, 0x71,
	0x75, 0x65, 0x12, 0x46, 0x0a, 0x0c, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x6f,
	0x63, 0x6d, 0x2e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x0b, 0x69,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x40, 0x0a, 0x0b, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x22, 0x7a, 0x0a, 0x14,
	0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x06, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65,
	0x52, 0x06, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x22, 0x92, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x31, 0x0a, 0x06, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x52, 0x06, 0x6f, 0x70,
	0x61, 0x71, 0x75, 0x65, 0x12, 0x47, 0x0a, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63,
	0x73, 0x33, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52,
	0x0c, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xbd, 0x01,
	0x0a, 0x15, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x06, 0x6f, 0x70, 0x61, 0x71,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4f, 0x70, 0x61,
	0x71, 0x75, 0x65, 0x52, 0x06, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x32, 0xd2, 0x03,
	0x0a, 0x09, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x41, 0x50, 0x49, 0x12, 0x7e, 0x0a, 0x13, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x32, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x6f, 0x63, 0x6d, 0x2e, 0x69, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x6f, 0x63, 0x6d,
	0x2e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6c, 0x0a, 0x0d, 0x46,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x12, 0x2c, 0x2e, 0x63,
	0x73, 0x33, 0x2e, 0x6f, 0x63, 0x6d, 0x2e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x63, 0x73, 0x33,
	0x2e, 0x6f, 0x63, 0x6d, 0x2e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x69, 0x0a, 0x0c, 0x41, 0x63, 0x63,
	0x65, 0x70, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x12, 0x2b, 0x2e, 0x63, 0x73, 0x33, 0x2e,
	0x6f, 0x63, 0x6d, 0x2e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x6f, 0x63, 0x6d,
	0x2e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6c, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x2c, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x6f, 0x63, 0x6d, 0x2e,
	0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x6f, 0x63, 0x6d, 0x2e, 0x69, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x42, 0x75, 0x0a, 0x1a, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x6f, 0x63,
	0x6d, 0x2e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x42, 0x0e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x50, 0x01, 0x5a, 0x0d, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0xa2, 0x02, 0x03, 0x43, 0x4f, 0x49, 0xaa, 0x02, 0x16, 0x43, 0x73, 0x33, 0x2e, 0x4f, 0x63,
	0x6d, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x2e, 0x56, 0x31, 0x42, 0x65, 0x74, 0x61, 0x31,
	0xca, 0x02, 0x16, 0x43, 0x73, 0x33, 0x5c, 0x4f, 0x63, 0x6d, 0x5c, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x5c, 0x56, 0x31, 0x42, 0x65, 0x74, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_cs3_ocm_invite_v1beta1_invite_api_proto_rawDescOnce sync.Once
	file_cs3_ocm_invite_v1beta1_invite_api_proto_rawDescData = file_cs3_ocm_invite_v1beta1_invite_api_proto_rawDesc
)

func file_cs3_ocm_invite_v1beta1_invite_api_proto_rawDescGZIP() []byte {
	file_cs3_ocm_invite_v1beta1_invite_api_proto_rawDescOnce.Do(func() {
		file_cs3_ocm_invite_v1beta1_invite_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_cs3_ocm_invite_v1beta1_invite_api_proto_rawDescData)
	})
	return file_cs3_ocm_invite_v1beta1_invite_api_proto_rawDescData
}

var file_cs3_ocm_invite_v1beta1_invite_api_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_cs3_ocm_invite_v1beta1_invite_api_proto_goTypes = []interface{}{
	(*GenerateInviteTokenRequest)(nil),  // 0: cs3.ocm.invite.v1beta1.GenerateInviteTokenRequest
	(*GenerateInviteTokenResponse)(nil), // 1: cs3.ocm.invite.v1beta1.GenerateInviteTokenResponse
	(*ForwardInviteRequest)(nil),        // 2: cs3.ocm.invite.v1beta1.ForwardInviteRequest
	(*ForwardInviteResponse)(nil),       // 3: cs3.ocm.invite.v1beta1.ForwardInviteResponse
	(*AcceptInviteRequest)(nil),         // 4: cs3.ocm.invite.v1beta1.AcceptInviteRequest
	(*AcceptInviteResponse)(nil),        // 5: cs3.ocm.invite.v1beta1.AcceptInviteResponse
	(*GetRemoteUserRequest)(nil),        // 6: cs3.ocm.invite.v1beta1.GetRemoteUserRequest
	(*GetRemoteUserResponse)(nil),       // 7: cs3.ocm.invite.v1beta1.GetRemoteUserResponse
	(*v1beta1.Opaque)(nil),              // 8: cs3.types.v1beta1.Opaque
	(*v1beta11.Status)(nil),             // 9: cs3.rpc.v1beta1.Status
	(*InviteToken)(nil),                 // 10: cs3.ocm.invite.v1beta1.InviteToken
	(*v1beta12.ProviderInfo)(nil),       // 11: cs3.ocm.provider.v1beta1.ProviderInfo
	(*v1beta13.User)(nil),               // 12: cs3.identity.user.v1beta1.User
	(*v1beta13.UserId)(nil),             // 13: cs3.identity.user.v1beta1.UserId
}
var file_cs3_ocm_invite_v1beta1_invite_api_proto_depIdxs = []int32{
	8,  // 0: cs3.ocm.invite.v1beta1.GenerateInviteTokenRequest.opaque:type_name -> cs3.types.v1beta1.Opaque
	9,  // 1: cs3.ocm.invite.v1beta1.GenerateInviteTokenResponse.status:type_name -> cs3.rpc.v1beta1.Status
	8,  // 2: cs3.ocm.invite.v1beta1.GenerateInviteTokenResponse.opaque:type_name -> cs3.types.v1beta1.Opaque
	10, // 3: cs3.ocm.invite.v1beta1.GenerateInviteTokenResponse.invite_token:type_name -> cs3.ocm.invite.v1beta1.InviteToken
	8,  // 4: cs3.ocm.invite.v1beta1.ForwardInviteRequest.opaque:type_name -> cs3.types.v1beta1.Opaque
	10, // 5: cs3.ocm.invite.v1beta1.ForwardInviteRequest.invite_token:type_name -> cs3.ocm.invite.v1beta1.InviteToken
	11, // 6: cs3.ocm.invite.v1beta1.ForwardInviteRequest.origin_system_provider:type_name -> cs3.ocm.provider.v1beta1.ProviderInfo
	9,  // 7: cs3.ocm.invite.v1beta1.ForwardInviteResponse.status:type_name -> cs3.rpc.v1beta1.Status
	8,  // 8: cs3.ocm.invite.v1beta1.ForwardInviteResponse.opaque:type_name -> cs3.types.v1beta1.Opaque
	8,  // 9: cs3.ocm.invite.v1beta1.AcceptInviteRequest.opaque:type_name -> cs3.types.v1beta1.Opaque
	10, // 10: cs3.ocm.invite.v1beta1.AcceptInviteRequest.invite_token:type_name -> cs3.ocm.invite.v1beta1.InviteToken
	12, // 11: cs3.ocm.invite.v1beta1.AcceptInviteRequest.remote_user:type_name -> cs3.identity.user.v1beta1.User
	9,  // 12: cs3.ocm.invite.v1beta1.AcceptInviteResponse.status:type_name -> cs3.rpc.v1beta1.Status
	8,  // 13: cs3.ocm.invite.v1beta1.AcceptInviteResponse.opaque:type_name -> cs3.types.v1beta1.Opaque
	8,  // 14: cs3.ocm.invite.v1beta1.GetRemoteUserRequest.opaque:type_name -> cs3.types.v1beta1.Opaque
	13, // 15: cs3.ocm.invite.v1beta1.GetRemoteUserRequest.remote_user_id:type_name -> cs3.identity.user.v1beta1.UserId
	9,  // 16: cs3.ocm.invite.v1beta1.GetRemoteUserResponse.status:type_name -> cs3.rpc.v1beta1.Status
	8,  // 17: cs3.ocm.invite.v1beta1.GetRemoteUserResponse.opaque:type_name -> cs3.types.v1beta1.Opaque
	12, // 18: cs3.ocm.invite.v1beta1.GetRemoteUserResponse.remote_user:type_name -> cs3.identity.user.v1beta1.User
	0,  // 19: cs3.ocm.invite.v1beta1.InviteAPI.GenerateInviteToken:input_type -> cs3.ocm.invite.v1beta1.GenerateInviteTokenRequest
	2,  // 20: cs3.ocm.invite.v1beta1.InviteAPI.ForwardInvite:input_type -> cs3.ocm.invite.v1beta1.ForwardInviteRequest
	4,  // 21: cs3.ocm.invite.v1beta1.InviteAPI.AcceptInvite:input_type -> cs3.ocm.invite.v1beta1.AcceptInviteRequest
	6,  // 22: cs3.ocm.invite.v1beta1.InviteAPI.GetRemoteUser:input_type -> cs3.ocm.invite.v1beta1.GetRemoteUserRequest
	1,  // 23: cs3.ocm.invite.v1beta1.InviteAPI.GenerateInviteToken:output_type -> cs3.ocm.invite.v1beta1.GenerateInviteTokenResponse
	3,  // 24: cs3.ocm.invite.v1beta1.InviteAPI.ForwardInvite:output_type -> cs3.ocm.invite.v1beta1.ForwardInviteResponse
	5,  // 25: cs3.ocm.invite.v1beta1.InviteAPI.AcceptInvite:output_type -> cs3.ocm.invite.v1beta1.AcceptInviteResponse
	7,  // 26: cs3.ocm.invite.v1beta1.InviteAPI.GetRemoteUser:output_type -> cs3.ocm.invite.v1beta1.GetRemoteUserResponse
	23, // [23:27] is the sub-list for method output_type
	19, // [19:23] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_cs3_ocm_invite_v1beta1_invite_api_proto_init() }
func file_cs3_ocm_invite_v1beta1_invite_api_proto_init() {
	if File_cs3_ocm_invite_v1beta1_invite_api_proto != nil {
		return
	}
	file_cs3_ocm_invite_v1beta1_resources_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_cs3_ocm_invite_v1beta1_invite_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateInviteTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cs3_ocm_invite_v1beta1_invite_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateInviteTokenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cs3_ocm_invite_v1beta1_invite_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForwardInviteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cs3_ocm_invite_v1beta1_invite_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForwardInviteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cs3_ocm_invite_v1beta1_invite_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcceptInviteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cs3_ocm_invite_v1beta1_invite_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcceptInviteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cs3_ocm_invite_v1beta1_invite_api_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRemoteUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cs3_ocm_invite_v1beta1_invite_api_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRemoteUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cs3_ocm_invite_v1beta1_invite_api_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_cs3_ocm_invite_v1beta1_invite_api_proto_goTypes,
		DependencyIndexes: file_cs3_ocm_invite_v1beta1_invite_api_proto_depIdxs,
		MessageInfos:      file_cs3_ocm_invite_v1beta1_invite_api_proto_msgTypes,
	}.Build()
	File_cs3_ocm_invite_v1beta1_invite_api_proto = out.File
	file_cs3_ocm_invite_v1beta1_invite_api_proto_rawDesc = nil
	file_cs3_ocm_invite_v1beta1_invite_api_proto_goTypes = nil
	file_cs3_ocm_invite_v1beta1_invite_api_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// InviteAPIClient is the client API for InviteAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type InviteAPIClient interface {
	// Generates a new token for the user with a validity of 24 hours.
	GenerateInviteToken(ctx context.Context, in *GenerateInviteTokenRequest, opts ...grpc.CallOption) (*GenerateInviteTokenResponse, error)
	// Forwards a received invite to the sync'n'share system provider.
	ForwardInvite(ctx context.Context, in *ForwardInviteRequest, opts ...grpc.CallOption) (*ForwardInviteResponse, error)
	// Completes an invitation acceptance.
	AcceptInvite(ctx context.Context, in *AcceptInviteRequest, opts ...grpc.CallOption) (*AcceptInviteResponse, error)
	// Retrieves details about a remote user who has accepted an invite to share.
	GetRemoteUser(ctx context.Context, in *GetRemoteUserRequest, opts ...grpc.CallOption) (*GetRemoteUserResponse, error)
}

type inviteAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewInviteAPIClient(cc grpc.ClientConnInterface) InviteAPIClient {
	return &inviteAPIClient{cc}
}

func (c *inviteAPIClient) GenerateInviteToken(ctx context.Context, in *GenerateInviteTokenRequest, opts ...grpc.CallOption) (*GenerateInviteTokenResponse, error) {
	out := new(GenerateInviteTokenResponse)
	err := c.cc.Invoke(ctx, "/cs3.ocm.invite.v1beta1.InviteAPI/GenerateInviteToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inviteAPIClient) ForwardInvite(ctx context.Context, in *ForwardInviteRequest, opts ...grpc.CallOption) (*ForwardInviteResponse, error) {
	out := new(ForwardInviteResponse)
	err := c.cc.Invoke(ctx, "/cs3.ocm.invite.v1beta1.InviteAPI/ForwardInvite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inviteAPIClient) AcceptInvite(ctx context.Context, in *AcceptInviteRequest, opts ...grpc.CallOption) (*AcceptInviteResponse, error) {
	out := new(AcceptInviteResponse)
	err := c.cc.Invoke(ctx, "/cs3.ocm.invite.v1beta1.InviteAPI/AcceptInvite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inviteAPIClient) GetRemoteUser(ctx context.Context, in *GetRemoteUserRequest, opts ...grpc.CallOption) (*GetRemoteUserResponse, error) {
	out := new(GetRemoteUserResponse)
	err := c.cc.Invoke(ctx, "/cs3.ocm.invite.v1beta1.InviteAPI/GetRemoteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InviteAPIServer is the server API for InviteAPI service.
type InviteAPIServer interface {
	// Generates a new token for the user with a validity of 24 hours.
	GenerateInviteToken(context.Context, *GenerateInviteTokenRequest) (*GenerateInviteTokenResponse, error)
	// Forwards a received invite to the sync'n'share system provider.
	ForwardInvite(context.Context, *ForwardInviteRequest) (*ForwardInviteResponse, error)
	// Completes an invitation acceptance.
	AcceptInvite(context.Context, *AcceptInviteRequest) (*AcceptInviteResponse, error)
	// Retrieves details about a remote user who has accepted an invite to share.
	GetRemoteUser(context.Context, *GetRemoteUserRequest) (*GetRemoteUserResponse, error)
}

// UnimplementedInviteAPIServer can be embedded to have forward compatible implementations.
type UnimplementedInviteAPIServer struct {
}

func (*UnimplementedInviteAPIServer) GenerateInviteToken(context.Context, *GenerateInviteTokenRequest) (*GenerateInviteTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateInviteToken not implemented")
}
func (*UnimplementedInviteAPIServer) ForwardInvite(context.Context, *ForwardInviteRequest) (*ForwardInviteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForwardInvite not implemented")
}
func (*UnimplementedInviteAPIServer) AcceptInvite(context.Context, *AcceptInviteRequest) (*AcceptInviteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptInvite not implemented")
}
func (*UnimplementedInviteAPIServer) GetRemoteUser(context.Context, *GetRemoteUserRequest) (*GetRemoteUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRemoteUser not implemented")
}

func RegisterInviteAPIServer(s *grpc.Server, srv InviteAPIServer) {
	s.RegisterService(&_InviteAPI_serviceDesc, srv)
}

func _InviteAPI_GenerateInviteToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateInviteTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InviteAPIServer).GenerateInviteToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.ocm.invite.v1beta1.InviteAPI/GenerateInviteToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InviteAPIServer).GenerateInviteToken(ctx, req.(*GenerateInviteTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InviteAPI_ForwardInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForwardInviteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InviteAPIServer).ForwardInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.ocm.invite.v1beta1.InviteAPI/ForwardInvite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InviteAPIServer).ForwardInvite(ctx, req.(*ForwardInviteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InviteAPI_AcceptInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptInviteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InviteAPIServer).AcceptInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.ocm.invite.v1beta1.InviteAPI/AcceptInvite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InviteAPIServer).AcceptInvite(ctx, req.(*AcceptInviteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InviteAPI_GetRemoteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRemoteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InviteAPIServer).GetRemoteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.ocm.invite.v1beta1.InviteAPI/GetRemoteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InviteAPIServer).GetRemoteUser(ctx, req.(*GetRemoteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _InviteAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cs3.ocm.invite.v1beta1.InviteAPI",
	HandlerType: (*InviteAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateInviteToken",
			Handler:    _InviteAPI_GenerateInviteToken_Handler,
		},
		{
			MethodName: "ForwardInvite",
			Handler:    _InviteAPI_ForwardInvite_Handler,
		},
		{
			MethodName: "AcceptInvite",
			Handler:    _InviteAPI_AcceptInvite_Handler,
		},
		{
			MethodName: "GetRemoteUser",
			Handler:    _InviteAPI_GetRemoteUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cs3/ocm/invite/v1beta1/invite_api.proto",
}
